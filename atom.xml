<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>W_C__L</title>
  <subtitle>我们都老得太快   却聪明的太迟~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://imwcl.com/"/>
  <updated>2017-03-16T16:18:33.000Z</updated>
  <id>http://imwcl.com/</id>
  
  <author>
    <name>W_C__L</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手把手教你发布自己的开源框架到CocoaPods</title>
    <link href="http://imwcl.com/2017/03/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%88%B0CocoaPods/"/>
    <id>http://imwcl.com/2017/03/17/手把手教你发布自己的开源框架到CocoaPods/</id>
    <published>2017-03-16T16:17:19.000Z</published>
    <updated>2017-03-16T16:18:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>偶尔会发布自己的开源框架到CocoaPods上，但是每次都忘记命令行，写这篇博客的目的是为了记录下来步骤，方便以后翻阅使用</p>
</blockquote>
<h1 id="一、先将代码传到github上"><a href="#一、先将代码传到github上" class="headerlink" title="一、先将代码传到github上"></a>一、先将代码传到github上</h1><p>这步比较简单，大致说一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建本地仓库</span><br><span class="line">git init</span><br><span class="line">// 添加名称为origin的远程连接</span><br><span class="line">git remote add origin &apos;你的github项目地址&apos;</span><br><span class="line">// 将本地代码加入本地仓库里</span><br><span class="line">git add .</span><br><span class="line">// 提交修改到本地仓库</span><br><span class="line">git commit -m &apos;你的修改记录&apos;</span><br><span class="line">// 推送master分支的代码到名称为origin的远程仓库</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="二、给你git打上tag"><a href="#二、给你git打上tag" class="headerlink" title="二、给你git打上tag"></a>二、给你git打上tag</h1><p>打tag的目的就相当于给你的开源框架制定版本号，每个版本一个tag，下面是打tag的流程：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看本地tag</span><br><span class="line">git tag</span><br><span class="line">// 添加本地tag 1.0.0</span><br><span class="line">git tag -a 1.0.0 -m &apos;release 1.0.0&apos;</span><br><span class="line">// 将tag传到远程</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<h2 id="tag的其他操作"><a href="#tag的其他操作" class="headerlink" title="tag的其他操作"></a>tag的其他操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 删除本地tag</span><br><span class="line">git tag -d 1.0.0</span><br><span class="line">// 删除远程tag</span><br><span class="line">git push origin -d tag 1.0.0</span><br></pre></td></tr></table></figure>
<h1 id="三、注册Trunk"><a href="#三、注册Trunk" class="headerlink" title="三、注册Trunk"></a>三、注册<strong>Trunk</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register 你的邮箱 &apos;你的用户名&apos; --description=&apos;你的描述&apos;</span><br></pre></td></tr></table></figure>
<p>成功的话就会受到一份邮件，点击邮件中的链接后验证一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<p>成功的话会返回以下类似字段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- Name:     WCL</span><br><span class="line">- Email:    wangchonglei93@icloud.com</span><br><span class="line">- Since:    January 10th, 21:32</span><br><span class="line">- Pods:</span><br><span class="line">  - WCLImagePickerController</span><br><span class="line">  - WCLShineButton</span><br><span class="line">  - CRRefresh</span><br><span class="line">- Sessions:</span><br><span class="line">  - January 10th, 21:32 - July 22nd, 07:38. IP: 58.132.205.59</span><br></pre></td></tr></table></figure>
<p>如果你的pod是由多人维护的，你也可以添加其他维护者：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk add-owner ARAnalytics kyle@cocoapods.org</span><br></pre></td></tr></table></figure>
<h1 id="四、创建自己项目的Podspec描述文件"><a href="#四、创建自己项目的Podspec描述文件" class="headerlink" title="四、创建自己项目的Podspec描述文件"></a>四、<strong>创建自己项目的Podspec描述文件</strong></h1><p>上传到cocoapods时主要就依赖着.podspec的描述文件来进行配置的，所以我们要先建立一个.podspec的描述文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 初始化.podspec文件</span><br><span class="line">pod spec create 你的项目名</span><br></pre></td></tr></table></figure>
<p>初步了解.podspec文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name         = "你的项目名"</span><br><span class="line">  s.version      = "项目的版本"</span><br><span class="line">  s.summary      = "项目的描述"</span><br><span class="line">  s.homepage     = "项目的主页，一般为github地址就行"</span><br><span class="line">  s.license      = "许可证：一般为 MIT"</span><br><span class="line">  s.author             = &#123; "作者名" =&gt; "你的邮箱" &#125;</span><br><span class="line">  // 支持的最低版本，比如ios 8.0</span><br><span class="line">  s.platform     = :ios, "8.0"</span><br><span class="line">  // 源代码地址，也就是你github上的地址</span><br><span class="line">  s.source       = &#123; :git =&gt; "你的github地址", :tag =&gt; "项目的tag" &#125;</span><br><span class="line">  // 源代码的文件路径</span><br><span class="line">  s.source_files  = "WCL", "WCL/**/*.&#123;h,m&#125;" , "WCL/*.&#123;swift&#125;"</span><br><span class="line">  // 资源文件路径</span><br><span class="line">  s.resources     = "WCL.png", "WCL/**/*.&#123;bundle&#125;" , "WCL/*.&#123;bundle&#125;"</span><br><span class="line">  // 用到的框架</span><br><span class="line">  s.framework  = "UIKit"</span><br><span class="line">  // 依赖的第三方库</span><br><span class="line">  s.dependency "JSONKit", "~&gt; 1.4"</span><br></pre></td></tr></table></figure>
<p>编辑完podspec文件后，需要验证一下这个文件是否可用，如果有任何WARNING或者ERROR都是不可以的，它就不能被添加到Spec Repo中，不过xcode的WARNING是可以存在的，验证需要执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint 你的podspec文件名.podspec</span><br></pre></td></tr></table></figure>
<p>通过的话就验证成功，失败会告诉你错误的位置，一般很详细</p>
<h1 id="五、传到CocoaPods上"><a href="#五、传到CocoaPods上" class="headerlink" title="五、传到CocoaPods上"></a>五、传到CocoaPods上</h1><p>pod trunk push 命令会首先验证你本地的podspec文件(是否有错误)，之后会上传spec文件到trunk，最后会将你上传的podspec文件转换为需要的json文件。在工程根目录(包含有.podspec)下执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push</span><br></pre></td></tr></table></figure>
<p>没有错误的话，会提示你成功，并返回一下类似代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 🎉  Congrats</span><br><span class="line"></span><br><span class="line"> 🚀  CRRefresh (1.0.0) successfully published</span><br><span class="line"> 📅  March 16th, 07:14</span><br><span class="line"> 🌎  https://cocoapods.org/pods/CRRefresh</span><br><span class="line"> 👍  Tell your friends!</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上是基本流程，如果有什么问题欢迎交流，最后谢谢大家的阅读</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 03月 09日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;偶尔会发布自己的开源框架到CocoaPods上，但是每次都忘记命令行，写这篇博客的目的是为了记录下来步骤，方便以后翻阅使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、先将代码传到github上&quot;&gt;&lt;a href=&quot;#一、先将代码传到github上&quot; class=&quot;headerlink&quot; title=&quot;一、先将代码传到github上&quot;&gt;&lt;/a&gt;一、先将代码传到github上&lt;/h1&gt;&lt;p&gt;这步比较简单，大致说一下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 创建本地仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 添加名称为origin的远程连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin &amp;apos;你的github项目地址&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 将本地代码加入本地仓库里&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 提交修改到本地仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit -m &amp;apos;你的修改记录&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 推送master分支的代码到名称为origin的远程仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CocoaPods" scheme="http://imwcl.com/categories/CocoaPods/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 外观模式</title>
    <link href="http://imwcl.com/2017/03/09/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/03/09/swift设计模式学习-外观模式/</id>
    <published>2017-03-09T03:56:53.000Z</published>
    <updated>2017-03-09T04:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><p>外观模式（Facade），为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<h2 id="外观模式的基本实现"><a href="#外观模式的基本实现" class="headerlink" title="外观模式的基本实现"></a>外观模式的基本实现</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/Facade.png" alt=""></p>
<a id="more"></a>
<p>上图是外观模式的UML图，下面是基本的代码实现过程：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 外观类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> one   = <span class="type">SubSystemOne</span>()</span><br><span class="line">    <span class="keyword">let</span> two   = <span class="type">SubSystemTwo</span>()</span><br><span class="line">    <span class="keyword">let</span> three = <span class="type">SubSystemThree</span>()</span><br><span class="line">    <span class="keyword">let</span> four  = <span class="type">SubSystemFour</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodA</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"方法组A"</span>)</span><br><span class="line">        one.methodOne()</span><br><span class="line">        two.methodTwo()</span><br><span class="line">        three.methodThree()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodB</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"方法组B"</span>)</span><br><span class="line">        two.methodTwo()</span><br><span class="line">        three.methodThree()</span><br><span class="line">        four.methodFour()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK: 子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemOne</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"子系统方法一"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemTwo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodTwo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"子系统方法二"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemThree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodThree</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"子系统方法三"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSystemFour</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">methodFour</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"子系统方法四"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="外观模式解决实际问题（购买基金）"><a href="#外观模式解决实际问题（购买基金）" class="headerlink" title="外观模式解决实际问题（购买基金）"></a>外观模式解决实际问题（购买基金）</h2><p>在生活中很多地方也用到外观模式，比如购买基金，我们从基金机构那里购买基金，然后他们帮我们管理我们的基金，去操作和运行，我们只管购买和卖出就行了，而不用去管他们内部的操作，下面是UML图和具体实现：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/Fund.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 基金类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fund</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gu1 = <span class="type">Stock1</span>()</span><br><span class="line">    <span class="keyword">var</span> gu2 = <span class="type">Stock2</span>()</span><br><span class="line">    <span class="keyword">var</span> gu3 = <span class="type">Stock3</span>()</span><br><span class="line">    <span class="keyword">var</span> nd  = <span class="type">NationalDebt</span>()</span><br><span class="line">    <span class="keyword">var</span> rt  = <span class="type">Realty</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">buyFund</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"买入基金"</span>)</span><br><span class="line">        gu1.buy()</span><br><span class="line">        gu2.buy()</span><br><span class="line">        gu3.buy()</span><br><span class="line">        nd.buy()</span><br><span class="line">        rt.buy()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">shellFund</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\n卖出基金"</span>)</span><br><span class="line">        gu1.shell()</span><br><span class="line">        gu2.shell()</span><br><span class="line">        gu3.shell()</span><br><span class="line">        nd.shell()</span><br><span class="line">        rt.shell()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//股票类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock1</span>: <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"股票一"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock2</span>: <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"股票二"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock3</span>: <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"股票三"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NationalDebt</span>: <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"国债"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Realty</span>: <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"房地产"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dealName: <span class="type">String</span> &#123;<span class="keyword">get</span>&#125;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Deal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">shell</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(dealName)</span>卖出"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">buy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(dealName)</span>买入"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 下面我们调用一下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jijin = <span class="type">Fund</span>()</span><br><span class="line"><span class="comment">// 基金购买</span></span><br><span class="line">jijin.buyFund()</span><br><span class="line"><span class="comment">// 基金赎回</span></span><br><span class="line">jijin.shellFund()</span><br></pre></td></tr></table></figure>
<p>下面是调用的结果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">买入基金</span><br><span class="line">股票一买入</span><br><span class="line">股票二买入</span><br><span class="line">股票三买入</span><br><span class="line">国债买入</span><br><span class="line">房地产买入</span><br><span class="line"></span><br><span class="line">卖出基金</span><br><span class="line">股票一卖出</span><br><span class="line">股票二卖出</span><br><span class="line">股票三卖出</span><br><span class="line">国债卖出</span><br><span class="line">房地产卖出</span><br></pre></td></tr></table></figure>
<p>以上就是简单的外观模式的实现，定义高层接口，基金的买入和卖出，去使用整个基金系统，而不用去管内部是怎么操作的。</p>
<h2 id="外观模式的优点"><a href="#外观模式的优点" class="headerlink" title="外观模式的优点"></a>外观模式的优点</h2><p>（1）实现了子系统与客户端之间的松耦合关系。</p>
<p>（2）客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。</p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 03月 09日</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot;外观模式&quot;&gt;&lt;/a&gt;外观模式&lt;/h1&gt;&lt;p&gt;外观模式（Facade），为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。&lt;/p&gt;
&lt;h2 id=&quot;外观模式的基本实现&quot;&gt;&lt;a href=&quot;#外观模式的基本实现&quot; class=&quot;headerlink&quot; title=&quot;外观模式的基本实现&quot;&gt;&lt;/a&gt;外观模式的基本实现&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/Facade.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 模板方法模式</title>
    <link href="http://imwcl.com/2017/02/24/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/02/24/swift设计模式学习-模板方法模式/</id>
    <published>2017-02-24T05:48:43.000Z</published>
    <updated>2017-02-24T05:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h1><p>模板方法模式，定义一个操作中算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<h2 id="模板方法模式的基本实现"><a href="#模板方法模式的基本实现" class="headerlink" title="模板方法模式的基本实现"></a>模板方法模式的基本实现</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/TemplateMethod.png" alt=""></p>
<a id="more"></a>
<p>上图是基本模板模式的UML图，这种设计模式在很多地方都有用到，下面是基本实现的代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">templateMethod</span><span class="params">()</span></span> &#123;</span><br><span class="line">        primitiveOperation1()</span><br><span class="line">        primitiveOperation2()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassA</span>: <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"具体类A方法1实现"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"具体类A方法2实现"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassB</span>: <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"具体类B方法1实现"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">primitiveOperation2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"具体类B方法2实现"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="模板方法模式解决实际问题（填表格）"><a href="#模板方法模式解决实际问题（填表格）" class="headerlink" title="模板方法模式解决实际问题（填表格）"></a><strong>模板方法模式解决实际问题（填表格）</strong></h2><p>在生活中很多地方用到的模板方法模式，比如我们填一份表格，我们要按照表格的模板开始填，只需要填关键部分，而不用将表格的所有文字炒一遍，下面是UML和代码：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/TemplateTable.png" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表格的模板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateTable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showTable</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fillName()</span><br><span class="line">        fillSex()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillName</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"你的名字：<span class="subst">\(yourName()</span>)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fillSex</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"你的性别：<span class="subst">\(yourSex()</span>)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">yourName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">yourSex</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wcl填写的表格</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WCLTable</span>: <span class="title">TemplateTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">yourName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"wcl"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">yourSex</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"male"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// scy填写的表格</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SCYTable</span>: <span class="title">TemplateTable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">yourName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"scy"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">yourSex</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"female"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们调用一下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wcl = <span class="type">WCLTable</span>()</span><br><span class="line">wcl.showTable()</span><br><span class="line"><span class="keyword">let</span> scy = <span class="type">SCYTable</span>()</span><br><span class="line">scy.showTable()</span><br></pre></td></tr></table></figure>
<p> 下面是调用的结果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你的名字：wcl</span><br><span class="line">你的性别：male</span><br><span class="line">你的名字：scy</span><br><span class="line">你的性别：female</span><br></pre></td></tr></table></figure>
<h2 id="模板方法模式的特点"><a href="#模板方法模式的特点" class="headerlink" title="模板方法模式的特点"></a>模板方法模式的特点</h2><p>模板方法模式是通过把不变行为搬移到超类，去除子类中重复代码来体现它的优势，它提供了一个很好的代码复用平台。</p>
<blockquote>
<p>以上是我对模板方法模式的理解，如果有不对的地方欢迎大家交流，最后谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月 24日</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板方法模式&quot;&gt;&lt;a href=&quot;#模板方法模式&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式&quot;&gt;&lt;/a&gt;模板方法模式&lt;/h1&gt;&lt;p&gt;模板方法模式，定义一个操作中算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;h2 id=&quot;模板方法模式的基本实现&quot;&gt;&lt;a href=&quot;#模板方法模式的基本实现&quot; class=&quot;headerlink&quot; title=&quot;模板方法模式的基本实现&quot;&gt;&lt;/a&gt;模板方法模式的基本实现&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/TemplateMethod.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 代理模式</title>
    <link href="http://imwcl.com/2017/02/21/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/02/21/swift设计模式学习-代理模式/</id>
    <published>2017-02-21T15:32:55.000Z</published>
    <updated>2017-02-21T15:35:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/631106979/SwiftDesignPattern" target="_blank" rel="external">设计模式学习的demo地址</a>，欢迎大家学习交流</p>
</blockquote>
<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式为其他对象提供一种代理以控制对这个对象的访问，在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<h2 id="代理模式的组成"><a href="#代理模式的组成" class="headerlink" title="代理模式的组成"></a>代理模式的组成</h2><ul>
<li><strong>抽象角色</strong>：通过接口或抽象类声明真实角色实现的业务方法。</li>
<li><strong>代理角色</strong>：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。</li>
<li><strong>真实角色</strong>：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</li>
</ul>
<a id="more"></a>
<h2 id="代理模式的基本实现"><a href="#代理模式的基本实现" class="headerlink" title="代理模式的基本实现"></a>代理模式的基本实现</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/Proxy.png" alt=""></p>
<p>上图是最基本的代理模式的结构图，下面将用<strong>Swift</strong>代码来实现一个基本代理模式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span>: <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"真实的请求"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>: <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 真实的对象</span></span><br><span class="line">    <span class="keyword">var</span> realSubject: <span class="type">RealSubject</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">()</span></span> &#123;</span><br><span class="line">        realSubject?.request()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上是一个最基本的代理模式的构成，这样可以用<code>Proxy</code>来代替<code>RealSubject</code>，从而对客户端隐藏真实的对象。</p>
<h2 id="代理模式解决实际问题（快递于淘宝卖家的关系）"><a href="#代理模式解决实际问题（快递于淘宝卖家的关系）" class="headerlink" title="代理模式解决实际问题（快递于淘宝卖家的关系）"></a>代理模式解决实际问题（快递于淘宝卖家的关系）</h2><p>在生活中很多地方存在着代理模式，比如淘宝卖家与快递的问题，我们买东西需要淘宝卖家进行配送，但是其实他们并没有配送的功能，实际上是由快递公司进行的配送，淘宝就相当于快递公司的代理，买家也不用关心淘宝卖家是怎么送货过来的，下面是大概的实现方式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个配送的接口</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Deliver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> goodsName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deliverGoods</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快递公司继承配送的接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Express</span>: <span class="title">Deliver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> goodsName: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(goodsName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.goodsName = goodsName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deliverGoods</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"由顺丰快递配送<span class="subst">\(goodsName)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 淘宝卖家也继承配送的接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taobao</span>: <span class="title">Deliver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实际上是由快递公司配送</span></span><br><span class="line">    <span class="keyword">var</span> express: <span class="type">Express</span></span><br><span class="line">    <span class="keyword">var</span> goodsName: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(goodsName: <span class="type">String</span>) &#123;</span><br><span class="line">        express = <span class="type">Express</span>(goodsName: goodsName)</span><br><span class="line">        <span class="keyword">self</span>.goodsName = goodsName</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"买了一个<span class="subst">\(goodsName)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deliverGoods</span><span class="params">()</span></span> &#123;</span><br><span class="line">        express.deliverGoods()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们使用一下以上代码看看：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tb = <span class="type">Taobao</span>(goodsName: <span class="string">"电脑"</span>)</span><br><span class="line">tb.deliverGoods()</span><br></pre></td></tr></table></figure>
<p>下面是打印结果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">买了一个电脑</span><br><span class="line">由顺丰快递配送电脑</span><br></pre></td></tr></table></figure>
<h2 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h2><ol>
<li>职责清晰，真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件完成事务，附带的结果就是编程简洁清晰。</li>
<li>代理对象可以在客户端和目标对象之间起到中介的作用，这样起到了中介的作用和保护了目标对象的作用。</li>
<li>高扩展性</li>
</ol>
<blockquote>
<p>以上是我对于代理模式的理解，如果有不对的地方欢迎大家交流，最后谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月 21日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/631106979/SwiftDesignPattern&quot;&gt;设计模式学习的demo地址&lt;/a&gt;，欢迎大家学习交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h1&gt;&lt;p&gt;代理模式为其他对象提供一种代理以控制对这个对象的访问，在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。&lt;/p&gt;
&lt;h2 id=&quot;代理模式的组成&quot;&gt;&lt;a href=&quot;#代理模式的组成&quot; class=&quot;headerlink&quot; title=&quot;代理模式的组成&quot;&gt;&lt;/a&gt;代理模式的组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;抽象角色&lt;/strong&gt;：通过接口或抽象类声明真实角色实现的业务方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代理角色&lt;/strong&gt;：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;真实角色&lt;/strong&gt;：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 原型模式</title>
    <link href="http://imwcl.com/2017/02/20/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/02/20/swift设计模式学习-原型模式/</id>
    <published>2017-02-20T11:50:21.000Z</published>
    <updated>2017-02-20T11:53:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://github.com/631106979/SwiftDesignPattern" target="_blank" rel="external">设计模式学习的demo地址</a>，欢迎大家学习交流</p>
</blockquote>
<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<code>Prototype</code>原型模式是一种创建型设计模式，<code>Prototype</code>模式允许一个对象再创建另外一个可定制的对象，根本无需知道任何如何创建的细节,工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建。它主要面对的问题是：“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。</p>
<a id="more"></a>
<h2 id="原型模式的基本实现"><a href="#原型模式的基本实现" class="headerlink" title="原型模式的基本实现"></a>原型模式的基本实现</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/prototype.png" alt=""></p>
<p>上图是最基本的原型模式的结构图，下面将用<strong>Swift</strong>代码来实现一个基本原型模式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个原型协议</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clone</span><span class="params">()</span></span> -&gt; <span class="type">Prototype</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型的具体对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototypeA</span>: <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="comment">// 实现克隆的具体操作</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clone</span><span class="params">()</span></span> -&gt; <span class="type">Prototype</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="type">ConcretePrototypeA</span>()</span><br><span class="line">        p.id = id</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不知道大家有没哟发现，这个设计模式我们在代码中经常会用到，那就是<code>NSCopying</code>协议，通过这个协议来实现对象的深拷贝，下面我们就用<code>NSCopying</code>来实现一下。</p>
<h2 id="原型模式解决实际问题（NSCopying）"><a href="#原型模式解决实际问题（NSCopying）" class="headerlink" title="原型模式解决实际问题（NSCopying）"></a>原型模式解决实际问题（NSCopying）</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resume</span>: <span class="title">NSCopying</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> sex: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> company: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, sex: <span class="type">String</span>, age: <span class="type">String</span>, company: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.sex = sex</span><br><span class="line">        <span class="keyword">self</span>.age = age</span><br><span class="line">        <span class="keyword">self</span>.company = company</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">disPlay</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"name: <span class="subst">\(name)</span>, sex: <span class="subst">\(sex)</span>, age: <span class="subst">\(age)</span>, company: <span class="subst">\(company)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(with zone: NSZone? = <span class="literal">nil</span>)</span></span> -&gt; <span class="type">Any</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Resume</span>(name: name, sex: sex, age: age, company: company)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面是通过<code>NSCopying</code>来实现原型模式的例子，一下是使用过程：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wcl = <span class="type">Resume</span>(name: <span class="string">"wcl"</span>, sex: <span class="string">"male"</span>, age: <span class="string">"23"</span>, company: <span class="string">"beijing"</span>)</span><br><span class="line"><span class="keyword">let</span> scy = wcl.copy() <span class="keyword">as</span>! <span class="type">Resume</span></span><br><span class="line">scy.name = <span class="string">"scy"</span></span><br><span class="line">scy.sex = <span class="string">"female"</span></span><br><span class="line">wcl.disPlay()</span><br><span class="line">scy.disPlay()</span><br></pre></td></tr></table></figure>
<p>以下是打印的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: wcl, sex: male, age: 23, company: beijing</span><br><span class="line">name: scy, sex: female, age: 23, company: beijing</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上是我对于原型模式的理解，如果有不对的地方欢迎大家交流，最后谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月 20日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/631106979/SwiftDesignPattern&quot;&gt;设计模式学习的demo地址&lt;/a&gt;，欢迎大家学习交流&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot;原型模式&quot;&gt;&lt;/a&gt;原型模式&lt;/h1&gt;&lt;p&gt;用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。&lt;code&gt;Prototype&lt;/code&gt;原型模式是一种创建型设计模式，&lt;code&gt;Prototype&lt;/code&gt;模式允许一个对象再创建另外一个可定制的对象，根本无需知道任何如何创建的细节,工作原理是:通过将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝它们自己来实施创建。它主要面对的问题是：“某些结构复杂的对象”的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是他们却拥有比较稳定一致的接口。&lt;/p&gt;
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 策略模式</title>
    <link href="http://imwcl.com/2017/02/18/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/02/18/swift设计模式学习-策略模式/</id>
    <published>2017-02-18T14:08:53.000Z</published>
    <updated>2017-02-18T14:10:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略模式定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。</p>
<h2 id="策略模式的组成"><a href="#策略模式的组成" class="headerlink" title="策略模式的组成"></a>策略模式的组成</h2><ul>
<li>抽象策略角色（Strategy）： 策略类，通常由一个接口或者抽象类实现。</li>
<li>具体策略角色（ConcreteStrategy）：包装了相关的算法和行为。</li>
<li>环境角色（Context）：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<a id="more"></a>
<h2 id="策略模式的基本实现"><a href="#策略模式的基本实现" class="headerlink" title="策略模式的基本实现"></a>策略模式的基本实现</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/Strategy.png" alt=""></p>
<p>上图是最基本的装饰模式的结构图，下面将用<a href="http://lib.csdn.net/base/swift" target="_blank" rel="external"><strong>Swift</strong></a>代码来实现一个基本策略模式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略类，定义所有支持 的算法的公共接口</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略类，封装了具体的算法或行为，继承于Strategy</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span>: <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ConcreteStrategyA"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span>: <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ConcreteStrategyB"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyC</span>: <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">AlgorithmInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ConcreteStrategyC"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context上下文，用一个 ConcreteStrategy来配置，维护一个对Strategy对象的引用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> strategy: <span class="type">Strategy</span>?</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">ContextInterface</span><span class="params">()</span></span> &#123;</span><br><span class="line">        strategy?.<span class="type">AlgorithmInterface</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码是最简单的策略模式的实现过程，定义了一个<code>Strategy</code>的算法族，通过它的子类可以实现算法（<code>AlgorithmInterface</code>）的替换，而不会影响到客户端。</p>
<h2 id="用策略模式解决实际问题（商场打折）"><a href="#用策略模式解决实际问题（商场打折）" class="headerlink" title="用策略模式解决实际问题（商场打折）"></a>用策略模式解决实际问题（商场打折）</h2><p>我们知道在商场中一般有很多打折优惠方案，类似这种问题就可以用策略模式来解决，打折不同的方案就相当于不同的策略（<code>ConcreteStrategy</code>），然后用一个<code>Context</code>类来实现不同算法的切换，下面是商场打折策略模式的实现于<code>UML</code>图：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/CashSuper.png" alt=""></p>
<p>以上是一个简单的商场收银系统，<code>CashNormal</code>为普通收费子类，<code>CashRebate</code>为打折收费子类，<code>CashReturn</code>为返利收费子类，下面是代码的实现过程：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个收费的策略接口</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CashSuper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">acceptCash</span><span class="params">(money: Double)</span></span> -&gt; <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通收费子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashNormal</span>: <span class="title">CashSuper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 正常原价返回</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">acceptCash</span><span class="params">(money: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打折收费子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashRebate</span>: <span class="title">CashSuper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 折扣率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> moneyRebate: <span class="type">Double</span> = <span class="number">1.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(moneyRebate: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.moneyRebate = moneyRebate</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">acceptCash</span><span class="params">(money: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money*moneyRebate</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返利收费子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashReturn</span>: <span class="title">CashSuper</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 返利要求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> moneyCondition: <span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 返多少</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> moneyReturn: <span class="type">Double</span>    = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(moneyCondition: <span class="type">Double</span>, moneyReturn: <span class="type">Double</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.moneyCondition = moneyCondition</span><br><span class="line">        <span class="keyword">self</span>.moneyReturn    = moneyReturn</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">acceptCash</span><span class="params">(money: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result = money</span><br><span class="line">        <span class="keyword">if</span> money &gt;= moneyCondition &#123;</span><br><span class="line">            result = money - floor(money / moneyCondition) * moneyReturn</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// context类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> cs: <span class="type">CashSuper</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过枚举判断使用哪种方式</span></span><br><span class="line">    <span class="keyword">init</span>(style: <span class="type">CashStyle</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> style &#123;</span><br><span class="line">        <span class="keyword">case</span> .normal:</span><br><span class="line">            cs = <span class="type">CashNormal</span>()</span><br><span class="line">        <span class="keyword">case</span> .rebate(moneyRebate: <span class="keyword">let</span> money):</span><br><span class="line">            cs = <span class="type">CashRebate</span>(moneyRebate: money)</span><br><span class="line">        <span class="keyword">case</span> .<span class="keyword">return</span>(moneyCondition: <span class="keyword">let</span> moneyCondition, moneyReturn: <span class="keyword">let</span> moneyReturn):</span><br><span class="line">            cs = <span class="type">CashReturn</span>(moneyCondition: moneyCondition, moneyReturn: moneyReturn)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getResult</span><span class="params">(money: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cs?.acceptCash(money: money) ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优惠的枚举类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CashStyle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> normal</span><br><span class="line">    <span class="keyword">case</span> rebate(moneyRebate: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> `<span class="keyword">return</span>`(moneyCondition: <span class="type">Double</span>, moneyReturn: <span class="type">Double</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们测试一下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> money: <span class="type">Double</span> = <span class="number">300</span></span><br><span class="line"><span class="comment">// 普通</span></span><br><span class="line"><span class="keyword">let</span> normal = <span class="type">CashContext</span>(style: .normal)</span><br><span class="line"><span class="comment">// 打7折</span></span><br><span class="line"><span class="keyword">let</span> rebate = <span class="type">CashContext</span>(style: .rebate(moneyRebate: <span class="number">0.7</span>))</span><br><span class="line"><span class="comment">// 满一百返20</span></span><br><span class="line"><span class="keyword">let</span> `<span class="keyword">return</span>` = <span class="type">CashContext</span>(style: .<span class="keyword">return</span>(moneyCondition: <span class="number">100</span>, moneyReturn: <span class="number">20</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"普通: <span class="subst">\(normal.getResult(money: money)</span>)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"打8折: <span class="subst">\(rebate.getResult(money: money)</span>)"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"满一百返20: <span class="subst">\(`<span class="keyword">return</span>`.getResult(money: money)</span>)"</span>)</span><br></pre></td></tr></table></figure>
<p>下面是执行的结果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">普通: <span class="number">300.0</span></span><br><span class="line">打<span class="number">8</span>折: <span class="number">210.0</span></span><br><span class="line">满一百返<span class="number">20</span>: <span class="number">240.0</span></span><br></pre></td></tr></table></figure>
<h2 id="策略模式总结"><a href="#策略模式总结" class="headerlink" title="策略模式总结"></a>策略模式总结</h2><p>我们可以理解为策略就是用来封装算法，但在实践过程中不用那么死板，可以用来封装几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</p>
<blockquote>
<p>以上是我对于策略模式的理解，如果有不对的地方欢迎大家交流，最后谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月 18日</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h1&gt;&lt;p&gt;策略模式定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化，不会影响到使用算法的客户。&lt;/p&gt;
&lt;h2 id=&quot;策略模式的组成&quot;&gt;&lt;a href=&quot;#策略模式的组成&quot; class=&quot;headerlink&quot; title=&quot;策略模式的组成&quot;&gt;&lt;/a&gt;策略模式的组成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;抽象策略角色（Strategy）： 策略类，通常由一个接口或者抽象类实现。&lt;/li&gt;
&lt;li&gt;具体策略角色（ConcreteStrategy）：包装了相关的算法和行为。&lt;/li&gt;
&lt;li&gt;环境角色（Context）：持有一个策略类的引用，最终给客户端调用。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS动画进阶 - 手摸手教你写ShineButton动画</title>
    <link href="http://imwcl.com/2017/02/16/iOS%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6-%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%86%99ShineButton%E5%8A%A8%E7%94%BB/"/>
    <id>http://imwcl.com/2017/02/16/iOS动画进阶-手摸手教你写ShineButton动画/</id>
    <published>2017-02-15T16:25:10.000Z</published>
    <updated>2017-02-15T16:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前段时间在github上看见一个非常nice的动画效果，可惜是安卓的，想着用swift写一个iOS版的，下下来源代码研究了一下，下面是我写代码的心路历程</p>
</blockquote>
<p>先上图和<a href="https://github.com/631106979/WCLShineButton" target="_blank" rel="external">demo的地址</a></p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/demo_shine_others.gif" alt=""></p>
<a id="more"></a>
<h2 id="分析动画过程"><a href="#分析动画过程" class="headerlink" title="分析动画过程"></a>分析动画过程</h2><p>刚开始看的时候感觉这个动画很炫酷，实现起来应该挺复制的，后来我将gif图逐一分解，大致浏览了一下安卓的实现过程，大致了解的实现的过程，下面是一些关键的动画步骤：</p>
<ol>
<li>第一步是里面图片的缩放动画，使用<code>CALayer</code>配合<code>CAKeyframeAnimation</code>来实现；</li>
<li>第二步是是里面一个圆环逐渐变大的过程，使用<code>CAShapeLayer</code>配合<code>CAKeyframeAnimation</code>来实现；</li>
<li>第三步是最外面一层太阳的扩散效果同样也使用<code>CAShapeLayer</code>配合<code>CAKeyframeAnimation</code>来实现；</li>
<li>最后是闪烁和颜色变化的的效果，使用<code>CABasicAnimation</code>和<code>CADisplayLink</code>来实现。</li>
</ol>
<h2 id="一、缩放动画的实现"><a href="#一、缩放动画的实现" class="headerlink" title="一、缩放动画的实现"></a>一、缩放动画的实现</h2><p>这个实现的过程相对而言比较简单，用<code>CALayer</code>做为<code>mask</code>来实现下图心形的图片，然后用<code>CAKeyframeAnimation</code>来实现动画，<code>values</code>的值为<code>[0.4, 1, 0.9, 1]</code>，差值器模式为<code>kCAAnimationCubic</code>，下面是实现结果和关键代码：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/wcl1.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">startAnim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> anim = <span class="type">CAKeyframeAnimation</span>(keyPath: <span class="string">"transform.scale"</span>)</span><br><span class="line">    anim.duration  = animDuration</span><br><span class="line">    anim.values = [<span class="number">0.4</span>, <span class="number">1</span>, <span class="number">0.9</span>, <span class="number">1</span>]</span><br><span class="line">    anim.calculationMode = kCAAnimationCubic</span><br><span class="line">    maskLayer.add(anim, forKey: <span class="string">"scale"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、圆环扩散动画的实现"><a href="#二、圆环扩散动画的实现" class="headerlink" title="二、圆环扩散动画的实现"></a>二、圆环扩散动画的实现</h2><p>首先圆环我们用<code>CAShapeLayer</code>来绘制一个圆环，然后通过<code>CAKeyframeAnimation</code>来改变圆环的<code>path</code>就可以了，下面是实现结果和关键代码：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/wcl.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">startAnim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> anim = <span class="type">CAKeyframeAnimation</span>(keyPath: <span class="string">"path"</span>)</span><br><span class="line">    anim.duration = params.animDuration * <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">let</span> size = frame.size</span><br><span class="line">    <span class="keyword">let</span> fromPath = <span class="type">UIBezierPath</span>(arcCenter: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width/<span class="number">2</span>, y: size.height/<span class="number">2</span>), radius: <span class="number">1</span>, startAngle: <span class="number">0</span>, endAngle: <span class="type">CGFloat</span>(<span class="type">M_PI</span>) * <span class="number">2.0</span>, clockwise: <span class="literal">false</span>).cgPath</span><br><span class="line">    <span class="keyword">let</span> toPath = <span class="type">UIBezierPath</span>(arcCenter: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: size.width/<span class="number">2</span>, y: size.height/<span class="number">2</span>), radius: size.width/<span class="number">2</span> * <span class="type">CGFloat</span>(params.shineDistanceMultiple), startAngle: <span class="number">0</span>, endAngle: <span class="type">CGFloat</span>(<span class="type">M_PI</span>) * <span class="number">2.0</span>, clockwise: <span class="literal">false</span>).cgPath</span><br><span class="line">    anim.delegate = <span class="keyword">self</span></span><br><span class="line">    anim.values = [fromPath, toPath]</span><br><span class="line">    anim.timingFunctions = [<span class="type">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionEaseOut)]</span><br><span class="line">    anim.isRemovedOnCompletion = <span class="literal">false</span></span><br><span class="line">    anim.fillMode = kCAFillModeForwards</span><br><span class="line">    shapeLayer.add(anim, forKey: <span class="string">"path"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、太阳的扩散效果实现"><a href="#三、太阳的扩散效果实现" class="headerlink" title="三、太阳的扩散效果实现"></a>三、太阳的扩散效果实现</h2><p>首先我们得先算出每个太阳的位置和将要扩散到的位置，然后用<code>CAShapeLayer</code>绘制出太阳，用<code>CAKeyframeAnimation</code>实现扩散的效果，下面是实现后的结果和关键代码 :</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/wcl2.gif" alt=""></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">startAnim</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> radius = frame.size.width/<span class="number">2</span> * <span class="type">CGFloat</span>(params.shineDistanceMultiple*<span class="number">1.4</span>)</span><br><span class="line">    <span class="keyword">var</span> startAngle: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> angle = <span class="type">CGFloat</span>(<span class="type">M_PI</span>*<span class="number">2</span>/<span class="type">Double</span>(params.shineCount)) + startAngle</span><br><span class="line">    <span class="keyword">if</span> params.shineCount%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">        startAngle = <span class="type">CGFloat</span>(<span class="type">M_PI</span>*<span class="number">2</span> - (<span class="type">Double</span>(angle)/<span class="type">Double</span>(params.shineCount)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;params.shineCount &#123;</span><br><span class="line">        <span class="keyword">let</span> bigShine = shineLayers[i]</span><br><span class="line">        <span class="keyword">let</span> bigAnim = getAngleAnim(shine: bigShine, angle: startAngle + <span class="type">CGFloat</span>(angle)*<span class="type">CGFloat</span>(i), radius: radius)</span><br><span class="line">        <span class="keyword">let</span> smallShine = smallShineLayers[i]</span><br><span class="line">        <span class="keyword">var</span> radiusSub = frame.size.width*<span class="number">0.15</span>*<span class="number">0.66</span></span><br><span class="line">        <span class="keyword">if</span> params.shineSize != <span class="number">0</span> &#123;</span><br><span class="line">            radiusSub = params.shineSize*<span class="number">0.66</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> smallAnim = getAngleAnim(shine: smallShine, angle: startAngle + <span class="type">CGFloat</span>(angle)*<span class="type">CGFloat</span>(i) - <span class="type">CGFloat</span>(params.smallShineOffsetAngle)*<span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180</span>, radius: radius-radiusSub)</span><br><span class="line">        bigShine.add(bigAnim, forKey: <span class="string">"path"</span>)</span><br><span class="line">        smallShine.add(smallAnim, forKey: <span class="string">"path"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> angleAnim = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"transform.rotation"</span>)</span><br><span class="line">    angleAnim.duration = params.animDuration * <span class="number">0.87</span></span><br><span class="line">    angleAnim.timingFunction = <span class="type">CAMediaTimingFunction</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">    angleAnim.fromValue = <span class="number">0</span></span><br><span class="line">    angleAnim.toValue = <span class="type">CGFloat</span>(params.shineTurnAngle)*<span class="type">CGFloat</span>(<span class="type">M_PI</span>)/<span class="number">180</span></span><br><span class="line">    angleAnim.delegate = <span class="keyword">self</span></span><br><span class="line">    add(angleAnim, forKey: <span class="string">"rotate"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、最后再将这些动画通过一定规律结合起来"><a href="#四、最后再将这些动画通过一定规律结合起来" class="headerlink" title="四、最后再将这些动画通过一定规律结合起来"></a>四、最后再将这些动画通过一定规律结合起来</h2><p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/wcl3.gif" alt=""></p>
<p>上图是将之前动画步骤组合起来后的效果，上面的一些代码只是部分代码，全部代码可以去我的<a href="https://github.com/631106979/WCLShineButton" target="_blank" rel="external">github地址</a>上去下在浏览，如果大家喜欢可以点一个赞，有更好的想法也可以提出来，大家一起交流一下，最后谢谢大家阅读~~</p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月16日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间在github上看见一个非常nice的动画效果，可惜是安卓的，想着用swift写一个iOS版的，下下来源代码研究了一下，下面是我写代码的心路历程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先上图和&lt;a href=&quot;https://github.com/631106979/WCLShineButton&quot;&gt;demo的地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLShineButton/demo_shine_others.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS动画进阶" scheme="http://imwcl.com/categories/iOS%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift设计模式学习 - 装饰模式</title>
    <link href="http://imwcl.com/2017/02/09/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://imwcl.com/2017/02/09/swift设计模式学习-装饰模式/</id>
    <published>2017-02-09T09:29:39.000Z</published>
    <updated>2017-02-09T09:36:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h1><p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。</p>
<h2 id="装饰模式的特点"><a href="#装饰模式的特点" class="headerlink" title="装饰模式的特点"></a>装饰模式的特点</h2><ol>
<li>装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。</li>
<li>装饰对象包含一个真实对象的引用（reference）</li>
<li>装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。</li>
<li>装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。<a id="more"></a>
<h2 id="装饰模式的基本实现"><a href="#装饰模式的基本实现" class="headerlink" title="装饰模式的基本实现"></a>装饰模式的基本实现</h2></li>
</ol>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/Decorator.png" alt=""></p>
<p>上图是最基本的装饰模式的结构图，下面将用swift代码来实现一个基本装饰模式：</p>
<p>1）.先写一个Component接口</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2）.写一个具体的Component对象</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span>: <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">operation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 具体操作的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）.写一个装饰抽象类</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>: <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> component: <span class="type">Component</span>?</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">operation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        component?.operation()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4）.写具体的装饰对象</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰对象A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span>: <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> addedState: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">operation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation()</span><br><span class="line">        addedState = <span class="string">"ConcreteDecoratorA独有的功能，用来区分ConcreteDecoratorB"</span></span><br><span class="line">        <span class="comment">// 具体装饰对象A的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 装饰对象B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span>: <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">operation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.operation()</span><br><span class="line">        addedBehavior()</span><br><span class="line">        <span class="comment">// 具体装饰对象B的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ConcreteDecoratorB独有的方法，用来区分ConcreteDecoratorA</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addedBehavior</span><span class="params">()</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以上代码我们就能简单了解装饰模式的基本实现于过程，它的主要的目的就是：<strong>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能</strong>，就像以上示例代码一样，通过<code>ConcreteDecoratorA</code>与<code>ConcreteDecoratorB</code>去扩展<code>ConcreteComponent</code>这个对象的功能，这样不用去改变<code>ConcreteComponent</code>这个类的源文件，也可以达到扩展的效果。</p>
<h2 id="用装饰模式解决实际问题（买车选配的问题）"><a href="#用装饰模式解决实际问题（买车选配的问题）" class="headerlink" title="用装饰模式解决实际问题（买车选配的问题）"></a>用装饰模式解决实际问题（买车选配的问题）</h2><p>下面通过一个实际的例子来看看，比如我们在买车的时候一般会选配很多配件，下面我们通过策略模式来实现这一过程，下上个结构图：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/blog/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/CarParts.png" alt=""></p>
<p>下面贴上代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多少钱</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span>-&gt; <span class="type">Int</span></span><br><span class="line">    <span class="comment">// 展示装配的配件</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteComponents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Suv</span>: <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(owner: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(owner)</span>买了一辆Suv，10W"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mpv</span>: <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">init</span>(owner: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"<span class="subst">\(owner)</span>买了一辆Mpv，15W"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">15</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarParts</span>: <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car: <span class="type">Car</span>?</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> car?.howMuch() ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        car?.showParts()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">decorator</span><span class="params">(<span class="number">_</span> car: Car)</span></span> -&gt; <span class="type">Car</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.car = car</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConcreteDecorators </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sofa</span>: <span class="title">CarParts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.howMuch() + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.showParts()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"选配了真皮沙发，1W"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Safety</span>: <span class="title">CarParts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.howMuch() + <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.showParts()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"选配了全套安全系统，3W"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span>: <span class="title">CarParts</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">howMuch</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.howMuch() + <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">showParts</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.showParts()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"选配了V8发动机，5W"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面我们使用一下以上代码看看：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//wcl买一辆suv</span></span><br><span class="line"><span class="keyword">var</span> suv: <span class="type">Car</span> = <span class="type">Suv</span>(owner: <span class="string">"wcl"</span>)</span><br><span class="line"><span class="comment">//装配沙发</span></span><br><span class="line">suv = <span class="type">Sofa</span>().decorator(suv)</span><br><span class="line"><span class="comment">//装配发动机</span></span><br><span class="line">suv = <span class="type">Engine</span>().decorator(suv)</span><br><span class="line"><span class="comment">//装配安全系统</span></span><br><span class="line">suv = <span class="type">Safety</span>().decorator(suv)</span><br><span class="line">suv.showParts()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"一共花了<span class="subst">\(suv.howMuch()</span>)W"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"\n"</span>)</span><br><span class="line"><span class="comment">//wcl买一辆mpv</span></span><br><span class="line"><span class="keyword">var</span> mpv: <span class="type">Car</span> = <span class="type">Mpv</span>(owner: <span class="string">"wcl"</span>)</span><br><span class="line"><span class="comment">//装配发动机</span></span><br><span class="line">mpv = <span class="type">Engine</span>().decorator(mpv)</span><br><span class="line"><span class="comment">//装配安全系统</span></span><br><span class="line">mpv = <span class="type">Safety</span>().decorator(mpv)</span><br><span class="line">mpv.showParts()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"一共花了<span class="subst">\(mpv.howMuch()</span>)W"</span>)</span><br></pre></td></tr></table></figure>
<p>以下是代码打印的结果：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wcl买了一辆<span class="type">Suv</span>，10W</span><br><span class="line">选配了真皮沙发，1W</span><br><span class="line">选配了<span class="type">V8</span>发动机，5W</span><br><span class="line">选配了全套安全系统，3W</span><br><span class="line">一共花了19W</span><br><span class="line"></span><br><span class="line">wcl买了一辆<span class="type">Mpv</span>，15W</span><br><span class="line">选配了<span class="type">V8</span>发动机，5W</span><br><span class="line">选配了全套安全系统，3W</span><br><span class="line">一共花了23W</span><br></pre></td></tr></table></figure>
<p>这样就用装饰模式简单了实现了一下这个过程，在不改变<code>Suv</code>于<code>Mpv</code>这两个类的源文件的情况下对它进行操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们先看看装饰模式的优点：</p>
<ol>
<li>可以将类中装饰功能从类中搬出移除，这样可以简化原有的类</li>
<li>有效的将核心职责和装饰功能区分开来，而且可以除去相关类中重复的装饰逻辑</li>
</ol>
<p>装饰模式的缺点：</p>
<ol>
<li>装饰模式虽然扩展性较高，类的数量略多，如何取舍可扩展性和简洁性是个问题，有所选择就要有所牺牲</li>
<li>很难搞清楚一个类究竟被装饰了多少层，可能是1层，也可能是100层</li>
</ol>
<blockquote>
<p>以上是我对于策略模式的理解，如果有不对的地方欢迎大家交流，最后谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 02月 09日</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;装饰模式&quot;&gt;&lt;a href=&quot;#装饰模式&quot; class=&quot;headerlink&quot; title=&quot;装饰模式&quot;&gt;&lt;/a&gt;装饰模式&lt;/h1&gt;&lt;p&gt;在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。&lt;/p&gt;
&lt;h2 id=&quot;装饰模式的特点&quot;&gt;&lt;a href=&quot;#装饰模式的特点&quot; class=&quot;headerlink&quot; title=&quot;装饰模式的特点&quot;&gt;&lt;/a&gt;装饰模式的特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。&lt;/li&gt;
&lt;li&gt;装饰对象包含一个真实对象的引用（reference）&lt;/li&gt;
&lt;li&gt;装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。&lt;/li&gt;
&lt;li&gt;装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。
    
    </summary>
    
      <category term="swift设计模式学习" scheme="http://imwcl.com/categories/swift%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - Photos详解基于Photos的图片选择器</title>
    <link href="http://imwcl.com/2017/01/11/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-Photos%E8%AF%A6%E8%A7%A3%E5%9F%BA%E4%BA%8EPhotos%E7%9A%84%E5%9B%BE%E7%89%87%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://imwcl.com/2017/01/11/iOS开发进阶-Photos详解基于Photos的图片选择器/</id>
    <published>2017-01-11T07:15:05.000Z</published>
    <updated>2017-01-11T07:16:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很早之前就用OC把代码写完了并用在项目中了，一直没时间整理，现在用swift重写一份，并且更加详细的来了解这个Photos框架，下面是我集合苹果官方文档和其他大神的博客写出的一篇关于Photos框架的介绍</p>
</blockquote>
<p>老规矩先上效果图和<a href="https://github.com/631106979/WCLImagePickerController" target="_blank" rel="external">Demo地址</a>：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WclImagePickerController/wcl.gif" alt="wcl"></p>
<a id="more"></a>
<h1 id="了解Photos框架"><a href="#了解Photos框架" class="headerlink" title="了解Photos框架"></a>了解Photos框架</h1><p>Photos是ios8出的一个新的图片选择框架，取代之前的AssetsLibrary框架，相比较AssetsLibrary框架Photos的用法更加灵活，发现在iOS9中AssetsLibrary已经被弃用了，并且也不支持livePhoto，iOS9上再使用AssetsLibrary框架时还有个严重的问题就是图片分辨率会变的很低，这篇文章主要讲解一下Photos的简单用法，用它做一个简单的图片选择器。</p>
<p>Photos中各个类的简单解释：</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>PHAdjustmentData</td>
<td>当用户编辑资源，照片与修改后的图像或视频数据保存在一个PHAdjustmentData对象中</td>
</tr>
<tr>
<td>PHAsset</td>
<td>代表照片库中的一个资源实体，可以理解为一张照片，在打印的时候，可以清楚的看见里面包含了照片的时间、标题等信息</td>
</tr>
<tr>
<td>PHAssetChangeRequest</td>
<td>使用PHAssetChangeRequest对象来创建、删除和修改相片库里面的PHAsset对象</td>
</tr>
<tr>
<td>PHAssetCollectionChangeRequest</td>
<td>使用PHAssetCollectionChangeRequest对象来创建、删除和修改相片库里面的PHAssetCollection对象</td>
</tr>
<tr>
<td>PHAssetCreationRequest</td>
<td>使用PHAssetCreationRequest对象构造一个新的照片或视频，并将其添加到照片库</td>
</tr>
<tr>
<td>PHAssetResource</td>
<td>一个PHAssetResource对象表示在照片库中的照片或视频资源（也就是一个PHAsset对象）相关联的基础数据资源之一，使用PHAssetResourceManager类获取它</td>
</tr>
<tr>
<td>PHAssetResourceManager</td>
<td>PHAssetResourceManager对象提供了访问与照片资源相关的资源基础数据存储方法</td>
</tr>
<tr>
<td>PHChange</td>
<td>PHChange对象来通知的照片库中的资源的一些变法，比如增加和删除</td>
</tr>
<tr>
<td>PHCollection</td>
<td>PHAssetCollection对象表示一组照片或视频资源。包括时刻和相册中可见照片应用,以及特殊的集合,如共享照片流。</td>
</tr>
<tr>
<td>PHCollectionListChangeRequest</td>
<td>使用PHCollectionListChangeRequest对象在一个照片库中创建、删除或修改PHCollectionList对象。</td>
</tr>
<tr>
<td>PHContentEditingInput</td>
<td>PHContentEditingInput对象描述资产用于编辑元数据</td>
</tr>
<tr>
<td>PHContentEditingOutput</td>
<td>PHContentEditingOutput对象表示编辑照片资产的照片或视频内容的结果</td>
</tr>
<tr>
<td>PHFetchOptions</td>
<td>获取资源时的检索参数，可以传 nil，即使用系统默认值</td>
</tr>
<tr>
<td>PHFetchResult</td>
<td>通过PHFetchResult来获取照片实体的有序列表</td>
</tr>
<tr>
<td>PHImageManager</td>
<td>PHImageManager对象提供用于加载与PHAsset对象相关联的图像或视频数据的方法。使用这些方法来获取全尺寸照片资产或缩略图，或者检索AV Foundation对象播放，导出和操纵的视频资产。</td>
</tr>
<tr>
<td>PHLivePhoto</td>
<td>用来获取LivePhoto实体</td>
</tr>
<tr>
<td>PHObject</td>
<td>照片等实体的抽象类</td>
</tr>
<tr>
<td>PHPhotoLibrary</td>
<td>PHPhotoLibrary对象表示用户的照片库整套资源和收藏的照片，包括存储在本地设备上在iCloud的照片对象。</td>
</tr>
<tr>
<td>PhotosTypes</td>
<td>与Photos框架相关的类型的枚举</td>
</tr>
</tbody>
</table>
<h1 id="获取相册列表"><a href="#获取相册列表" class="headerlink" title="获取相册列表"></a>获取相册列表</h1><p>获取相册列表可以需要用到一下类：</p>
<ul>
<li>PHFetchOptions：对象检索的对象，可以对相册列表进行筛选</li>
<li>PHAssetCollection：图片集合的对象，筛选后获得的集合</li>
</ul>
<p>下面是获取相册列表的代码片段：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//MARK: 属性列表</span></span><br><span class="line">   <span class="comment">//全部相册的数组</span></span><br><span class="line">   <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> photoAlbums    = [[<span class="type">String</span>: <span class="type">PHFetchResult</span>&lt;<span class="type">PHAsset</span>&gt;]]()</span><br><span class="line">   <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> selectPhotoArr = [<span class="type">PHAsset</span>]()</span><br><span class="line"></span><br><span class="line">   <span class="comment">//是否同步请求图片</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">var</span> isSynchronous: <span class="type">Bool</span> = <span class="literal">false</span> &#123;</span><br><span class="line">       <span class="keyword">didSet</span>&#123;</span><br><span class="line">           <span class="keyword">self</span>.photoOption.isSynchronous = isSynchronous</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK: 初始化方法</span></span><br><span class="line">   <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">       <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">       <span class="comment">//图片请求设置成快速获取</span></span><br><span class="line">       <span class="keyword">self</span>.photoOption.resizeMode   = .fast</span><br><span class="line">       <span class="keyword">self</span>.photoOption.deliveryMode = .opportunistic</span><br><span class="line">       getPhotoAlbum()</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span><br><span class="line">    开始获取获取相册列表</span><br><span class="line">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getPhotoAlbum</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="comment">//创建一个PHFetchOptions对象检索照片</span></span><br><span class="line">       <span class="keyword">let</span> options = <span class="type">PHFetchOptions</span>()</span><br><span class="line">       <span class="comment">//通过创建时间来检索</span></span><br><span class="line">       options.sortDescriptors = [<span class="type">NSSortDescriptor</span>.<span class="keyword">init</span>(key: photoCreationDate, ascending: <span class="literal">false</span>)]</span><br><span class="line">       <span class="comment">//通过数据类型来检索，这里为只检索照片</span></span><br><span class="line">       options.predicate = <span class="type">NSPredicate</span>.<span class="keyword">init</span>(format: <span class="string">"mediaType in %@"</span>, [<span class="type">PHAssetMediaType</span>.image.rawValue])</span><br><span class="line">       <span class="comment">//通过检索条件检索出符合检索条件的所有数据，也就是所有的照片</span></span><br><span class="line">       <span class="keyword">let</span> allResult = <span class="type">PHAsset</span>.fetchAssets(with: options)</span><br><span class="line">       <span class="comment">//获取用户创建的相册</span></span><br><span class="line">       <span class="keyword">let</span> userResult = <span class="type">PHAssetCollection</span>.fetchTopLevelUserCollections(with: <span class="literal">nil</span>)</span><br><span class="line">       <span class="comment">//获取智能相册</span></span><br><span class="line">       <span class="keyword">let</span> smartResult = <span class="type">PHAssetCollection</span>.fetchAssetCollections(with: .smartAlbum, subtype: .albumRegular, options: <span class="literal">nil</span>)</span><br><span class="line">       <span class="comment">//将获取的相册加入到相册的数组中</span></span><br><span class="line">       photoAlbums.append([<span class="type">WCLImagePickerBundle</span>.localizedString(key: <span class="string">"全部照片"</span>): allResult])</span><br><span class="line">       </span><br><span class="line">       userResult.enumerateObjects(options: .concurrent) &#123; (collection, index, stop) <span class="keyword">in</span></span><br><span class="line">           <span class="keyword">let</span> assetcollection = collection <span class="keyword">as</span>! <span class="type">PHAssetCollection</span></span><br><span class="line">           <span class="comment">//通过检索条件从assetcollection中检索出结果</span></span><br><span class="line">           <span class="keyword">let</span> assetResult = <span class="type">PHAsset</span>.fetchAssets(<span class="keyword">in</span>: assetcollection, options: options)</span><br><span class="line">           <span class="keyword">if</span> assetResult.<span class="built_in">count</span> != <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">self</span>.photoAlbums.append([assetcollection.localizedTitle!:assetResult])</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       smartResult.enumerateObjects(options: .concurrent) &#123; (collection, index, stop) <span class="keyword">in</span></span><br><span class="line">           <span class="comment">//通过检索条件从assetcollection中检索出结果</span></span><br><span class="line">           <span class="keyword">let</span> assetResult = <span class="type">PHAsset</span>.fetchAssets(<span class="keyword">in</span>: collection, options: options)</span><br><span class="line">           <span class="keyword">if</span> assetResult.<span class="built_in">count</span> != <span class="number">0</span> &#123;</span><br><span class="line">               <span class="keyword">self</span>.photoAlbums.append([collection.localizedTitle!:assetResult])</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="获取某个相册的所有图片列表"><a href="#获取某个相册的所有图片列表" class="headerlink" title="获取某个相册的所有图片列表"></a>获取某个相册的所有图片列表</h1><p>需要用到的类：</p>
<ul>
<li>PHFetchResult：对象检索的对象，可以对图片进行筛选</li>
<li>PHAsset：图片资源的对象，代表一个图片或者视频资源</li>
</ul>
<p>下面贴代码片段：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 通过下标返回相册的PHFetchResult</span><br><span class="line"> </span><br><span class="line"> - parameter index: 选择相册的index</span><br><span class="line"> </span><br><span class="line"> - returns: 相册的PHFetchResult</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getAblumResult</span><span class="params">(<span class="number">_</span> ablumIndex: Int)</span></span> -&gt; <span class="type">PHFetchResult</span>&lt;<span class="type">PHAsset</span>&gt;? &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> ablum = <span class="keyword">self</span>.photoAlbums[wcl_safe: ablumIndex] &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> result = ablum.values.first &#123;</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码中返回的<code>result</code>就代表选中的相册的图片列表</p>
<h1 id="获取到单张图片的数据"><a href="#获取到单张图片的数据" class="headerlink" title="获取到单张图片的数据"></a>获取到单张图片的数据</h1><p>通过上面获取到的相册的图片列表通过下标就能获得到图片对应的<code>PHAsset</code>，需要用到的类：</p>
<ul>
<li>PHCachingImageManager：获取图片数据的Manager，也可缓存数据</li>
<li>PHImageRequestOptions：获取图片的一些选项配置，比如获取方式等等</li>
<li>PHAsset：图片资源的对象，代表一个图片或者视频资源</li>
</ul>
<p>下面是代码片段：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 根据PHAsset获取photo</span><br><span class="line"> </span><br><span class="line"> - parameter ablumIndex:    相册的index</span><br><span class="line"> - parameter alasset:       相册里图片的PHAsset</span><br><span class="line"> - parameter photoSize:     图片的size</span><br><span class="line"> - parameter resultHandler: 返回照片的回调</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getPhoto</span><span class="params">(<span class="number">_</span> photoSize: CGSize, alasset: PHAsset?, resultHandler: <span class="params">(<span class="params">(UIImage?, [AnyHashable: Any]?)</span></span></span></span> -&gt; <span class="type">Void</span>)?) &#123;</span><br><span class="line">    <span class="keyword">if</span> alasset != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> scale = <span class="type">UIScreen</span>.main.scale</span><br><span class="line">        <span class="keyword">let</span> photoScaleSize = <span class="type">CGSize</span>(width: photoSize.width*scale, height: photoSize.height*scale)</span><br><span class="line">        <span class="keyword">self</span>.photoManage.requestImage(<span class="keyword">for</span>: alasset!, targetSize: photoScaleSize, contentMode: .aspectFill, options: <span class="keyword">self</span>.photoOption, resultHandler: &#123; (image, infoDic) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> image != <span class="literal">nil</span> &#123;</span><br><span class="line">                resultHandler?(image, infoDic)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//没获取到返回默认图片</span></span><br><span class="line">                <span class="keyword">let</span> image_buffer = <span class="type">WCLImagePickerBundle</span>.imageFromBundle(<span class="string">"image-buffer"</span>)</span><br><span class="line">                resultHandler?(image_buffer, infoDic)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="将图片存入相册"><a href="#将图片存入相册" class="headerlink" title="将图片存入相册"></a>将图片存入相册</h1><p>有时候我们需要将应用里的图片存到相册里面，一下是会用到的类：</p>
<ul>
<li>PHPhotoLibrary：代表我们手机中的图片库，用它来操作图片库中的图片</li>
<li>PHAssetChangeRequest：资源操作的请求类，用来对资源进行操作</li>
</ul>
<p>代码片段：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行变化</span></span><br><span class="line"><span class="type">PHPhotoLibrary</span>.shared().performChanges(&#123;</span><br><span class="line">		<span class="comment">//创建一个图片资源</span></span><br><span class="line">        <span class="type">PHAssetChangeRequest</span>.creationRequestForAsset(from: image)</span><br><span class="line">    &#125;, completionHandler: &#123; (flag, error) <span class="keyword">in</span></span><br><span class="line">        <span class="comment">//执行结果回调</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上简单的讲解了一下Photos相关知识点和使用方法，更多的可以去官方文档上去查看。用Photos自己写了一个<a href="https://github.com/631106979/WCLImagePickerController" target="_blank" rel="external">图片选择器</a>，大家有兴趣的可以去看一下，有用的话可以star一下，写不不是很好，有什么错误可以指出来~最后谢谢大家的阅读。</p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 01月 11日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很早之前就用OC把代码写完了并用在项目中了，一直没时间整理，现在用swift重写一份，并且更加详细的来了解这个Photos框架，下面是我集合苹果官方文档和其他大神的博客写出的一篇关于Photos框架的介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老规矩先上效果图和&lt;a href=&quot;https://github.com/631106979/WCLImagePickerController&quot;&gt;Demo地址&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WclImagePickerController/wcl.gif&quot; alt=&quot;wcl&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>swift学习笔记 - Range、ClosedRange、CountableClosedRange与CountableRange学习</title>
    <link href="http://imwcl.com/2017/01/05/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Range%E3%80%81ClosedRange%E3%80%81CountableClosedRange%E4%B8%8ECountableRange%E5%AD%A6%E4%B9%A0/"/>
    <id>http://imwcl.com/2017/01/05/swift学习笔记-Range、ClosedRange、CountableClosedRange与CountableRange学习/</id>
    <published>2017-01-05T14:22:31.000Z</published>
    <updated>2017-01-05T14:25:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在使用swift的过程中字符串操作的时候会用到Range，刚开始使用起来各种别扭，然后发现居然还有<code>ClosedRange、CountableClosedRange和CountableRange</code>，这下就彻底头疼了，下面简单的描述一下它们的区别</p>
</blockquote>
<h2 id="从命名来代码来理解和区分"><a href="#从命名来代码来理解和区分" class="headerlink" title="从命名来代码来理解和区分"></a>从命名来代码来理解和区分</h2><ul>
<li><code>CountableClosedRange</code>：可数的闭区间</li>
<li><code>CountableRange</code>：可数的开区间</li>
<li><code>ClosedRange</code>：不可数的闭区间</li>
<li><code>Range</code>：不可数的开居间</li>
</ul>
<a id="more"></a>
<p>下面通过代码来理解一下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化测试：</span></span><br><span class="line"><span class="comment">// CountableClosedRange: [0,2]</span></span><br><span class="line"><span class="keyword">let</span> rangea = <span class="number">0</span>...<span class="number">2</span></span><br><span class="line"><span class="comment">// CountableRange: [0,2)</span></span><br><span class="line"><span class="keyword">let</span> rangeb = <span class="number">0</span>..&lt;<span class="number">2</span></span><br><span class="line"><span class="comment">// ClosedRange: [0.1,2.1]</span></span><br><span class="line"><span class="keyword">let</span> rangec = <span class="number">0.1</span>...<span class="number">2.1</span></span><br><span class="line"><span class="comment">// Range: [0.1,2.1)</span></span><br><span class="line"><span class="keyword">let</span> ranged = <span class="number">0.1</span>..&lt;<span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环测试：可数的，可以for循环</span></span><br><span class="line"><span class="comment">// CountableClosedRange：可数的可以for循环，输出0、1、2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rangea &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CountableRange：可数的可以for循环，输出0、1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rangeb &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环测试：不可数的，不能for循环</span></span><br><span class="line"><span class="comment">// ClosedRange：不可数，不能for循环，以下写法会报错</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rangec &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Range：不可数，不能for循环，以下写法会报错</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ranged &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以用可数和不可数、闭区间和开区间来理解记忆<code>Range、ClosedRange、CountableClosedRange和CountableRange</code></p>
<p>可数：可以用于for循环</p>
<ul>
<li><code>CountableClosedRange</code></li>
<li><code>CountableRange</code></li>
</ul>
<p>不可数：不能用于for循环</p>
<ul>
<li><code>ClosedRange</code></li>
<li><code>Range</code></li>
</ul>
<p>闭区间：</p>
<ul>
<li><code>CountableClosedRange</code></li>
<li><code>ClosedRange</code></li>
</ul>
<p>开区间：</p>
<ul>
<li><code>Range</code></li>
<li><code>CountableRange</code></li>
</ul>
<blockquote>
<p>以上是我总结的<code>Range、ClosedRange、CountableClosedRange和CountableRange</code>的区别，希望对大家有帮助，如果写的有错误希望大家能指出，谢谢大家的阅读</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2017 年 01月 05日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在使用swift的过程中字符串操作的时候会用到Range，刚开始使用起来各种别扭，然后发现居然还有&lt;code&gt;ClosedRange、CountableClosedRange和CountableRange&lt;/code&gt;，这下就彻底头疼了，下面简单的描述一下它们的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;从命名来代码来理解和区分&quot;&gt;&lt;a href=&quot;#从命名来代码来理解和区分&quot; class=&quot;headerlink&quot; title=&quot;从命名来代码来理解和区分&quot;&gt;&lt;/a&gt;从命名来代码来理解和区分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CountableClosedRange&lt;/code&gt;：可数的闭区间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CountableRange&lt;/code&gt;：可数的开区间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClosedRange&lt;/code&gt;：不可数的闭区间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt;：不可数的开居间&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="swift学习笔记" scheme="http://imwcl.com/categories/swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 自定义UICollectionViewLayout实现瀑布流布局</title>
    <link href="http://imwcl.com/2016/12/21/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E8%87%AA%E5%AE%9A%E4%B9%89UICollectionViewLayout%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
    <id>http://imwcl.com/2016/12/21/iOS开发进阶-自定义UICollectionViewLayout实现瀑布流布局/</id>
    <published>2016-12-21T14:52:16.000Z</published>
    <updated>2016-12-21T14:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近项目中需要用到瀑布流的效果，但是用UICollectionViewFlowLayout又达不到效果，自己动手写了一个瀑布流的layout，下面是我的心路路程</p>
</blockquote>
<p>先先上效果图与<a href="https://github.com/631106979/WCLWaterFallLayout" target="_blank" rel="external">demo地址</a>：</p>
<p><img src="http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLWaterFallLayout/WCLWaterFallLayout.gif" alt=""></p>
<a id="more"></a>
<p>因为是用UICollectionView来实现瀑布流的，决定继承UICollectionViewLayout来自定义一个layout来实现一个简单瀑布流的布局，下面是需要重写的方法：</p>
<ul>
<li>重写这个属性得出UICollectionView的ContentSize：<code>collectionViewContentSize</code></li>
<li>重写这个方法来得到每个item的布局：<code>layoutAttributesForItem(at indexPath: IndexPath) -&gt; UICollectionViewLayoutAttributes?</code></li>
<li>重写这个方法给UICollectionView所有item的布局：<code>layoutAttributesForElements(in rect: CGRect) -&gt; [UICollectionViewLayoutAttributes]?</code></li>
<li>重写这个方法来实现UICollectionView前的操作：<code>prepare()</code></li>
</ul>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>通过代理模式获得到需要的列数和每一item的高度，用过列数与列之间的间隔和UICollectionView的宽度来得出每一列的宽度，item从左边到右布局，下一列的item放到高度最小的列下面，防止每列的高度不均匀，下面贴上代码和注释：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">WCLWaterFallLayoutDelegate</span> </span>&#123;</span><br><span class="line">    <span class="comment">//waterFall的列数</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">columnOfWaterFall</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView)</span></span> -&gt; <span class="type">Int</span></span><br><span class="line">    <span class="comment">//每个item的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">waterFall</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, layout waterFallLayout: WCLWaterFallLayout, heightForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">CGFloat</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WCLWaterFallLayout</span>: <span class="title">UICollectionViewLayout</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//代理</span></span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">WCLWaterFallLayoutDelegate</span>?</span><br><span class="line">    <span class="comment">//行间距</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> lineSpacing: <span class="type">CGFloat</span>   = <span class="number">0</span></span><br><span class="line">    <span class="comment">//列间距</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> columnSpacing: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">//section的top</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> sectionTop: <span class="type">CGFloat</span>    = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            sectionInsets.top = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//section的Bottom</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> sectionBottom: <span class="type">CGFloat</span>  = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            sectionInsets.bottom = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//section的left</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> sectionLeft: <span class="type">CGFloat</span>   = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            sectionInsets.<span class="keyword">left</span> = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//section的right</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> sectionRight: <span class="type">CGFloat</span>  = <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;</span><br><span class="line">            sectionInsets.<span class="keyword">right</span> = newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//section的Insets</span></span><br><span class="line">    <span class="meta">@IBInspectable</span> <span class="keyword">var</span> sectionInsets: <span class="type">UIEdgeInsets</span>      = <span class="type">UIEdgeInsets</span>.zero</span><br><span class="line">    <span class="comment">//每行对应的高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> columnHeights: [<span class="type">Int</span>: <span class="type">CGFloat</span>]                  = [<span class="type">Int</span>: <span class="type">CGFloat</span>]()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> attributes: [<span class="type">UICollectionViewLayoutAttributes</span>] = [<span class="type">UICollectionViewLayoutAttributes</span>]()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: Initial Methods</span></span><br><span class="line">    <span class="keyword">init</span>(lineSpacing: <span class="type">CGFloat</span>, columnSpacing: <span class="type">CGFloat</span>, sectionInsets: <span class="type">UIEdgeInsets</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.lineSpacing      = lineSpacing</span><br><span class="line">        <span class="keyword">self</span>.columnSpacing    = columnSpacing</span><br><span class="line">        <span class="keyword">self</span>.sectionInsets    = sectionInsets</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: Public Methods</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: Override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> collectionViewContentSize: <span class="type">CGSize</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> maxHeight: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> height <span class="keyword">in</span> columnHeights.values &#123;</span><br><span class="line">            <span class="keyword">if</span> height &gt; maxHeight &#123;</span><br><span class="line">                maxHeight = height</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGSize</span>.<span class="keyword">init</span>(width: collectionView?.frame.width ?? <span class="number">0</span>, height: maxHeight + sectionInsets.bottom)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">prepare</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.prepare()</span><br><span class="line">        <span class="keyword">guard</span> collectionView != <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> columnCount = delegate?.columnOfWaterFall(collectionView!) &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;columnCount &#123;</span><br><span class="line">                columnHeights[i] = sectionInsets.top</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> itemCount = collectionView!.numberOfItems(inSection: <span class="number">0</span>)</span><br><span class="line">        attributes.removeAll()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;itemCount &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> att = layoutAttributesForItem(at: <span class="type">IndexPath</span>.<span class="keyword">init</span>(row: i, section: <span class="number">0</span>)) &#123;</span><br><span class="line">                attributes.append(att)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForItem</span><span class="params">(at indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewLayoutAttributes</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> collectionView = collectionView &#123;</span><br><span class="line">            <span class="comment">//根据indexPath获取item的attributes</span></span><br><span class="line">            <span class="keyword">let</span> att = <span class="type">UICollectionViewLayoutAttributes</span>.<span class="keyword">init</span>(forCellWith: indexPath)</span><br><span class="line">            <span class="comment">//获取collectionView的宽度</span></span><br><span class="line">            <span class="keyword">let</span> width = collectionView.frame.width</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> columnCount = delegate?.columnOfWaterFall(collectionView) &#123;</span><br><span class="line">                <span class="keyword">guard</span> columnCount &gt; <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//item的宽度 = (collectionView的宽度 - 内边距与列间距) / 列数</span></span><br><span class="line">                <span class="keyword">let</span> totalWidth  = (width - sectionInsets.<span class="keyword">left</span> - sectionInsets.<span class="keyword">right</span> - (<span class="type">CGFloat</span>(columnCount) - <span class="number">1</span>) * columnSpacing)</span><br><span class="line">                <span class="keyword">let</span> itemWidth   = totalWidth / <span class="type">CGFloat</span>(columnCount)</span><br><span class="line">                <span class="comment">//获取item的高度，由外界计算得到</span></span><br><span class="line">                <span class="keyword">let</span> itemHeight  = delegate?.waterFall(collectionView, layout: <span class="keyword">self</span>, heightForItemAt: indexPath) ?? <span class="number">0</span></span><br><span class="line">                <span class="comment">//找出最短的那一列</span></span><br><span class="line">                <span class="keyword">var</span> minIndex = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> column <span class="keyword">in</span> columnHeights &#123;</span><br><span class="line">                    <span class="keyword">if</span> column.value &lt; columnHeights[minIndex] ?? <span class="number">0</span> &#123;</span><br><span class="line">                        minIndex = column.key</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据最短列的列数计算item的x值</span></span><br><span class="line">                <span class="keyword">let</span> itemX  = sectionInsets.<span class="keyword">left</span> + (columnSpacing + itemWidth) * <span class="type">CGFloat</span>(minIndex)</span><br><span class="line">                <span class="comment">//item的y值 = 最短列的最大y值 + 行间距</span></span><br><span class="line">                <span class="keyword">let</span> itemY  = (columnHeights[minIndex] ?? <span class="number">0</span>) + lineSpacing</span><br><span class="line">                <span class="comment">//设置attributes的frame</span></span><br><span class="line">                att.frame  = <span class="type">CGRect</span>.<span class="keyword">init</span>(x: itemX, y: itemY, width: itemWidth, height: itemHeight)</span><br><span class="line">                <span class="comment">//更新字典中的最大y值</span></span><br><span class="line">                columnHeights[minIndex] = att.frame.maxY</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> att</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">layoutAttributesForElements</span><span class="params">(<span class="keyword">in</span> rect: CGRect)</span></span> -&gt; [<span class="type">UICollectionViewLayoutAttributes</span>]? &#123;</span><br><span class="line">        <span class="keyword">return</span> attributes</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后附带<a href="https://github.com/631106979/WCLWaterFallLayout" target="_blank" rel="external">demo地址</a>，大家喜欢的话可以star一下</p>
<blockquote>
<p>上面是简单的瀑布流的实现过程，希望大家能学到东西，有很多地方考虑的不足，欢迎大家交流学习，谢谢大家的阅读~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 12月 21日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近项目中需要用到瀑布流的效果，但是用UICollectionViewFlowLayout又达不到效果，自己动手写了一个瀑布流的layout，下面是我的心路路程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先先上效果图与&lt;a href=&quot;https://github.com/631106979/WCLWaterFallLayout&quot;&gt;demo地址&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://imwcl.oss-cn-shanghai.aliyuncs.com/github/WCLWaterFallLayout/WCLWaterFallLayout.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 富文本正则替换表情</title>
    <link href="http://imwcl.com/2016/11/28/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E5%AF%8C%E6%96%87%E6%9C%AC%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2%E8%A1%A8%E6%83%85/"/>
    <id>http://imwcl.com/2016/11/28/iOS开发进阶-富文本正则替换表情/</id>
    <published>2016-11-28T09:13:17.000Z</published>
    <updated>2016-11-28T09:17:24.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近写项目需要用到富文本解析字符串显示表情，下面是我使用正则替换实现富文本的方式，希望能帮助到大家</p>
</blockquote>
<p>先上效果图和<a href="https://github.com/631106979/WCLEmojiParse" target="_blank" rel="external">demo地址</a></p>
<p><img src="http://img.blog.csdn.net/20161128171539733" alt="这里写图片描述"></p>
<a id="more"></a>
<p>实现过程中需要用到的知识点</p>
<ul>
<li>NSRegularExpression（正则表达式）</li>
<li>NSMutableAttributedString（用来显示富文本的string）</li>
</ul>
<p>废话不多说，直接贴代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WCLEmojiParse</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//所有表情对应的字符串</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> emotions = [<span class="string">"[angry]"</span>, <span class="string">"[beers]"</span>, <span class="string">"[blush]"</span>, <span class="string">"[bomb]"</span>, <span class="string">"[cool]"</span>, <span class="string">"[flushed]"</span>, <span class="string">"[grin]"</span>, <span class="string">"[gun]"</span>, <span class="string">"[heart]"</span>, <span class="string">"[heartseyes]"</span>, <span class="string">"[imp]"</span>, <span class="string">"[Joy]"</span>, <span class="string">"[kiss]"</span>, <span class="string">"[ok]"</span>, <span class="string">"[persevere]"</span>, <span class="string">"[pray]"</span>, <span class="string">"[punch]"</span>, <span class="string">"[scream]"</span>, <span class="string">"[shit]"</span>, <span class="string">"[skull]"</span>, <span class="string">"[sleeping]"</span>, <span class="string">"[smiley]"</span>, <span class="string">"[smirk]"</span>, <span class="string">"[sob]"</span>,<span class="string">"[sweat]"</span>, <span class="string">"[thumbsup]"</span>, <span class="string">"[tongue]"</span>, <span class="string">"[unamused]"</span>, <span class="string">"[v]"</span>, <span class="string">"[weary]"</span>, <span class="string">"[wink]"</span>, <span class="string">"[yum]"</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//String的格式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> textAttributes = [<span class="type">NSFontAttributeName</span>: <span class="type">UIFont</span>.systemFont(ofSize: <span class="number">16</span>), <span class="type">NSForegroundColorAttributeName</span>: <span class="type">UIColor</span>.black]</span><br><span class="line">    <span class="comment">//正则表达式的格式</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> pattern = <span class="string">"\\[+[a-z]+\\]"</span></span><br><span class="line">    <span class="comment">//表情的bounds</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> attachmentBounds = <span class="type">CGRect</span>.<span class="keyword">init</span>(origin: <span class="type">CGPoint</span>.<span class="keyword">init</span>(x: <span class="number">0</span>, y: -<span class="number">5</span>), size: <span class="type">CGSize</span>.<span class="keyword">init</span>(width: <span class="number">24</span>, height: <span class="number">24</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//MARK: Public Methods</span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">replaceEmoji</span><span class="params">(<span class="number">_</span> str: String)</span></span> -&gt; <span class="type">NSAttributedString</span> &#123;</span><br><span class="line">        <span class="comment">//转成NSString</span></span><br><span class="line">        <span class="keyword">let</span> originalNSString = str <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">        <span class="comment">//通过str获得NSMutableAttributedString</span></span><br><span class="line">        <span class="keyword">let</span> attStr = <span class="type">NSMutableAttributedString</span>.<span class="keyword">init</span>(string: str, attributes: textAttributes)</span><br><span class="line">        <span class="keyword">var</span> regex: <span class="type">NSRegularExpression</span>?</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            regex = <span class="keyword">try</span> <span class="type">NSRegularExpression</span>.<span class="keyword">init</span>(pattern: pattern, options: .caseInsensitive)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到匹配正则的数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> matches = regex?.matches(<span class="keyword">in</span>: str, options: .withoutAnchoringBounds, range: <span class="type">NSMakeRange</span>(<span class="number">0</span>,attStr.string.characters.<span class="built_in">count</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> matches.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">//遍历符合的数据进行解析</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;matches.<span class="built_in">count</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> result = matches[matches.<span class="built_in">count</span>-i-<span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">let</span> range = result.range</span><br><span class="line">                    <span class="keyword">let</span> emojiStr = originalNSString.substring(with: range)</span><br><span class="line">                    <span class="comment">//符合的数据是否为表情</span></span><br><span class="line">                    <span class="keyword">if</span> emotions.<span class="built_in">contains</span>(emojiStr) &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> image = <span class="type">UIImage</span>.<span class="keyword">init</span>(named: emojiStr) &#123;</span><br><span class="line">                            <span class="comment">//创建一个NSTextAttachment</span></span><br><span class="line">                            <span class="keyword">let</span> attachment    = <span class="type">NSTextAttachment</span>()</span><br><span class="line">                            attachment.image  = image</span><br><span class="line">                            attachment.bounds = attachmentBounds</span><br><span class="line">                            <span class="comment">//通过NSTextAttachment生成一个NSAttributedString</span></span><br><span class="line">                            <span class="keyword">let</span> rep = <span class="type">NSAttributedString</span>(attachment: attachment)</span><br><span class="line">                            <span class="comment">//把表情于之前的字符串替换</span></span><br><span class="line">                            attStr.replaceCharacters(<span class="keyword">in</span>: range, with: rep)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> attStr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/631106979/WCLEmojiParse" target="_blank" rel="external">demo地址</a></p>
<blockquote>
<p>以上是简单的富文本显示表情的方式，抛砖引玉，大家见笑了，希望大家能学到东西，谢谢大家的阅读</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 11月 28日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近写项目需要用到富文本解析字符串显示表情，下面是我使用正则替换实现富文本的方式，希望能帮助到大家&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先上效果图和&lt;a href=&quot;https://github.com/631106979/WCLEmojiParse&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161128171539733&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 项目的本地化处理(多语言开发)</title>
    <link href="http://imwcl.com/2016/11/21/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%8C%96%E5%A4%84%E7%90%86-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91/"/>
    <id>http://imwcl.com/2016/11/21/iOS开发进阶-项目的本地化处理-多语言开发/</id>
    <published>2016-11-21T05:35:04.000Z</published>
    <updated>2016-11-21T05:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近项目本地化，需要支持11国语言，下面将本地化的步骤记录下来，方便查找使用，步骤很简单，有些地方也有坑，希望大家看后少走弯路~~</p>
</blockquote>
<h2 id="什么是本地化"><a href="#什么是本地化" class="headerlink" title="什么是本地化"></a>什么是本地化</h2><p>本地化说直白点就是多语言开发，通过系统语言来判断应用使用的哪种语言，实现应用的本地化开发</p>
<a id="more"></a>
<h2 id="本地化处理需要处理的文件"><a href="#本地化处理需要处理的文件" class="headerlink" title="本地化处理需要处理的文件"></a>本地化处理需要处理的文件</h2><ul>
<li>本地化应用程序的<code>info.plist</code></li>
<li>本地化字符串处理（项目中所涉及的字符串）</li>
<li>本地化图片</li>
<li>XIB和storyboard的本地化处理</li>
<li>其他文件，比如<code>csv</code>等等</li>
</ul>
<h2 id="让我们的项目支持本地化"><a href="#让我们的项目支持本地化" class="headerlink" title="让我们的项目支持本地化"></a>让我们的项目支持本地化</h2><p>首先我们只有设置成支持多语言了，我们才能在展示项目名称和项目中的字符串等将语言进行切换，具体操作如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20161121115944742" alt="这里写图片描述"></p>
<p>在如上图所示的地方添加你需要支持的语言就行了，我这里是添加了简体汉语和英语</p>
<h2 id="如何判断当前系统使用的语言"><a href="#如何判断当前系统使用的语言" class="headerlink" title="如何判断当前系统使用的语言"></a>如何判断当前系统使用的语言</h2><p>我们使用<code>Locale</code>这个类来判断当前的系统语言，方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前的locale</span></span><br><span class="line"><span class="keyword">let</span> locale = <span class="type">Locale</span>.current</span><br><span class="line"><span class="comment">//返回本地语言环境的语言代码,或者如果没有零</span></span><br><span class="line"><span class="comment">//例如,对于地区“zh-Hant-HK”,返回“zh”</span></span><br><span class="line"><span class="keyword">let</span> languageCode = locale.languageCode</span><br><span class="line"><span class="comment">//返回该地区代码的语言环境,或者如果没有零</span></span><br><span class="line"><span class="comment">//例如,对于地区“zh-Hant-HK”,返回“HK”</span></span><br><span class="line"><span class="keyword">let</span> regionCode = locale.regionCode</span><br></pre></td></tr></table></figure>
<p>同过以上的代码基本上能清楚的知道当前系统的使用的语言</p>
<h2 id="获取系统支持的所有语言"><a href="#获取系统支持的所有语言" class="headerlink" title="获取系统支持的所有语言"></a>获取系统支持的所有语言</h2><p> 同样我们也是通过<code>Locale</code>来获取系统支持的所有语言</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回可用“语言环境”标识符的列表</span></span><br><span class="line"><span class="keyword">let</span> availableList = <span class="type">Locale</span>.availableIdentifiers</span><br><span class="line"><span class="comment">//返回一个可用“语言环境”语言代码的列表</span></span><br><span class="line"><span class="keyword">let</span> languageCodeList = <span class="type">Locale</span>.isoLanguageCodes</span><br><span class="line"><span class="comment">//返回一个可用“语言环境”地区代码的列表</span></span><br><span class="line"><span class="keyword">let</span> languageCodeList = <span class="type">Locale</span>.isoRegionCodes</span><br></pre></td></tr></table></figure>
<h2 id="如何本地化info-plist"><a href="#如何本地化info-plist" class="headerlink" title="如何本地化info.plist"></a>如何本地化info.plist</h2><p>1.首先我们建一个名称叫<code>InfoPlist.strings</code>的本地化文件，记住名称必须叫<code>InfoPlist.strings</code></p>
<p><img src="http://img.blog.csdn.net/20161121120522219" alt="这里写图片描述"></p>
<p>2.选择让<code>InfoPlist.strings</code>支持的语言，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20161121120318894" alt="这里写图片描述"></p>
<p>3.在<code>InfoPlist.strings</code>分别写入你想本地化的值，如下图所示 （格式如下所示，以分号结尾）：</p>
<p><img src="http://img.blog.csdn.net/20161121120905709" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161121120915115" alt="这里写图片描述"></p>
<h3 id="如何获得info-plist中对应的Key"><a href="#如何获得info-plist中对应的Key" class="headerlink" title="如何获得info.plist中对应的Key"></a>如何获得info.plist中对应的Key</h3><p>我们可以通过打开<code>info.plist</code>的源码来获取到对于的Key值，如下图所示 ：</p>
<p><img src="http://img.blog.csdn.net/20161121121603665" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20161121121535774" alt="这里写图片描述"></p>
<h2 id="本地化字符串处理"><a href="#本地化字符串处理" class="headerlink" title="本地化字符串处理"></a>本地化字符串处理</h2><p>本地化字符串处理原理上跟infoPlist的处理差不多，只是我们需用配合一个方法来使用它：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="type">NSLocalizedString</span>(<span class="string">"需要本地化的字符串"</span>, comment: <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/814163-938f659e31926e3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>默认使用<code>NSLocalizedString</code>这个方法时我们是获取<code>mainBundle</code>中一个名字叫<code>Localizable.strings</code>的本地化文件，所以我们一般只需要建一个名字叫<code>Localizable.strings</code>的文件即可，方法步骤跟建立<code>infoPlist.strings</code>类似（<a href="#如何本地化info.plist">传送门</a>）</p>
<h3 id="使用自定义的本地化文件"><a href="#使用自定义的本地化文件" class="headerlink" title="使用自定义的本地化文件"></a>使用自定义的本地化文件</h3><p>使用自定义的本地化文件也很容易，也是之前的方法，我们只需要多填一些参数就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个本地化的字符串，默认使用main bundle，如果没有指定一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">NSLocalizedString</span><span class="params">(<span class="number">_</span> key: String, tableName: String? = <span class="keyword">default</span>, bundle: Bundle = <span class="keyword">default</span>, value: String = <span class="keyword">default</span>, comment: String)</span></span> -&gt; <span class="type">String</span></span><br></pre></td></tr></table></figure>
<p>以上就是<code>NSLocalizedString</code>这个方法的所有参数，其中的tableName就是本地化文件的名称，默认就是<code>Localizable.strings</code>，自定义的话只需要建立一个新的，然后名称填你自己建立的本地化文件即可.</p>
<h2 id="XIB和storyboard的本地化处理"><a href="#XIB和storyboard的本地化处理" class="headerlink" title="XIB和storyboard的本地化处理"></a>XIB和storyboard的本地化处理</h2><p><code>XIB</code>和<code>storyboard</code>的方法也很简单，跟本地放字符串类似，不过是本地化的<code>XIB</code>文件，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20161121132009631" alt="这里写图片描述"></p>
<p><code>XIB</code>和<code>storyboard</code>的本地化又两种方式，如上图所示，一种是以本地化文件的方式实现，就是以<code>.strings</code>的本地化文件；另外一种是以<code>XIB</code>或<code>storyboard</code>的方式展示，具体如下图所示 ：</p>
<p><img src="http://img.blog.csdn.net/20161121132509732" alt="这里写图片描述"></p>
<h2 id="本地化图片和其他文件"><a href="#本地化图片和其他文件" class="headerlink" title="本地化图片和其他文件"></a>本地化图片和其他文件</h2><p>对于本地化图片和其他文件就比较费劲一点了，因为Xcode中图片并没有支持本地化，我们只有通过代码判断来决定使用相对于的本地化图片和文件了，<a href="#如何判断当前系统使用的语言">判断方法的传送门</a></p>
<h2 id="本地化中所遇到的问题"><a href="#本地化中所遇到的问题" class="headerlink" title="本地化中所遇到的问题"></a>本地化中所遇到的问题</h2><p>在本地化中必须谨记一个问题，就是必须按本地化文件的格式来写入文件，因为本地化文件并不能检查出你分号后面是否多多余的字符串，造成的后果就是本地化文件失效！！</p>
<blockquote>
<p>借鉴了许多大神的博客，总结了一篇比较全的，希望大家能学到东西，又什么疑问可以留言，谢谢大家的阅读~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 11月 21日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近项目本地化，需要支持11国语言，下面将本地化的步骤记录下来，方便查找使用，步骤很简单，有些地方也有坑，希望大家看后少走弯路~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是本地化&quot;&gt;&lt;a href=&quot;#什么是本地化&quot; class=&quot;headerlink&quot; title=&quot;什么是本地化&quot;&gt;&lt;/a&gt;什么是本地化&lt;/h2&gt;&lt;p&gt;本地化说直白点就是多语言开发，通过系统语言来判断应用使用的哪种语言，实现应用的本地化开发&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Shell学习小结 - 深入认识变量</title>
    <link href="http://imwcl.com/2016/10/23/Shell%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93-%E6%B7%B1%E5%85%A5%E8%AE%A4%E8%AF%86%E5%8F%98%E9%87%8F/"/>
    <id>http://imwcl.com/2016/10/23/Shell学习小结-深入认识变量/</id>
    <published>2016-10-23T15:17:33.000Z</published>
    <updated>2016-10-23T15:34:01.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161023225816555" alt="这里写图片描述"></p>
<h2 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h2><p>对于初学者来说，可以简单的理解为，变量就是保存在计算机内存中的一系列的键值对。</p>
<a id="more"></a>
<p>列如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;hello&quot;</span><br></pre></td></tr></table></figure>
<p>这里的<code>str</code>就是变量名，而<code>hello</code>就是变量的值</p>
<blockquote>
<p>注意在<code>shell</code>中变量名的大小是敏感的，因此大小写不同的两个变量名并不代表同一个变量</p>
</blockquote>
<h2 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h2><p>根据变量的类型确实，可以将程序设计语言分为两类，分别是<strong>静态类型语言</strong>和<strong>动态类型语言</strong></p>
<ul>
<li><strong>静态类型语言：</strong> 是在编译期间就确定变量类型的语言，例如<code>JAVA</code>、<code>C++</code>、<code>PASCAL</code>，在这些语言中使用变量时，必须首先声明其类型。</li>
<li><strong>动态设计语言：</strong> 实在程序执行过程中才确定变量的数据类型的语言。常见的有<code>VBScript</code>、<code>PHP</code>及<code>Python</code>。在这些语言中，变量的数据类型根据第一次赋给该变量的值的数据类型来确定。</li>
</ul>
<p>根据变量是否强制要求类型定义，可以将程序设计语言分为<strong>强类型语言</strong>和<strong>弱类型语言</strong></p>
<ul>
<li><strong>强类型语言：</strong> 要求用户在定义变量的时候必须明确指定其数据类型，例如<code>JAVA</code>和<code>C++</code>。在强类型语言中，数据类型之间的转换非常重要。</li>
<li><strong>弱类型语言：</strong> 不要求用户明确指定变量的数据类型，例如<code>VBScript</code>。用户可以将任意类型的数值赋给该变量。并且，变量的数据类型之间的转换也无需明确进行。</li>
</ul>
<blockquote>
<p><code>Shell</code>是一种动态类型语言和弱类型语言</p>
</blockquote>
<h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><p>在<code>Shell</code>中。通常情况下用户可以直接使用变量，无需先进行定义，当用户第一次使用某个变量名时，实际上就同时定义了这个变量，在变量的作用域内，用户都可以使用该变量。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#定义变量a</span><br><span class="line">a=1</span><br><span class="line">#定义变量b</span><br><span class="line">b=&quot;hello&quot;</span><br><span class="line">#定义变量c</span><br><span class="line">c=&quot;hello world&quot;</span><br></pre></td></tr></table></figure>
<p>还可以通过<code>declare</code>关键字来定义变量，它可以对变量的读写属性和变量类型进行设置，改命令的基本语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">declare attribute variable</span><br></pre></td></tr></table></figure>
<p>其中，<code>attribute</code>表示变量的属性，常用的属性如下所诉：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>显示所有变量的值</td>
</tr>
<tr>
<td>-i</td>
<td>将变量定义为整数。在之后就可以直接对表达式求值，结果只能是整数。如果求值失败或者不是整数，就设置为0</td>
</tr>
<tr>
<td>-r</td>
<td>将变量声明为只读变量。只读变量不允许修改，也不允许删除</td>
</tr>
<tr>
<td>-a</td>
<td>变量声明为数组变量。但这没必要。所有变量都不必显式定义就可以用做数组，事实上，在某种意义上，所有变量都是数组，而且赋值给没有下标的变量与赋值给下标为0的数组元素相同。</td>
</tr>
<tr>
<td>-f</td>
<td>显示所有自定义函数，包括名称和函数体</td>
</tr>
<tr>
<td>-x</td>
<td>将变量设置成环境变量，这样在随后的脚本和程序中可以使用</td>
</tr>
</tbody>
</table>
<h2 id="变量与引号"><a href="#变量与引号" class="headerlink" title="变量与引号"></a>变量与引号</h2><p>在<code>Shell</code>语言中一共有3种引号，分别为<strong>单引号（’ ‘）、双引号（” “）和反引号（``）</strong>，它们的作用是不同。</p>
<ul>
<li><strong>单引号：</strong> 括起来的字符都做为普通字符出现</li>
<li><strong>双引号：</strong> 除”$”、”\”、” <code>&quot;和&quot; &quot; &quot;这几个字符仍是特殊符并保留其特殊功能外，其余字符仍然做为普通字符对待</code> </li>
<li><strong>反引号：</strong> 括起来的字符串被<code>Shell</code>解释为命令，在执行时，<code>Shell</code> 首先执行改命令，并以它的标准输出结果取代整个反引号（包括两个反引号）部分</li>
</ul>
<p><strong>反引号</strong>的用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#输出当前目录</span><br><span class="line">echo &quot;current directory is `pwd`&quot;</span><br></pre></td></tr></table></figure>
<h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p><code>Shell</code>跟其他语言一样，作用域分为<strong>全局变量</strong>和局部变量。</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>通常认为，全局变量是使用范围较大的变量，不局限某个局部使用。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#定义函数</span><br><span class="line">func()</span><br><span class="line">&#123;</span><br><span class="line">  #输出变量的值</span><br><span class="line">  echo &quot;$v1&quot;</span><br><span class="line">  #修改变量的值</span><br><span class="line">  v1=200</span><br><span class="line">&#125;</span><br><span class="line">#在脚本中定义变量</span><br><span class="line">v1=100</span><br><span class="line">#调用函数</span><br><span class="line">func</span><br><span class="line">#输出变量的值</span><br><span class="line">echo &quot;$v1&quot;</span><br></pre></td></tr></table></figure>
<p>该执行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">200</span><br></pre></td></tr></table></figure>
<p>在函数内部定义变量，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#定义函数</span><br><span class="line">func() </span><br><span class="line">&#123;</span><br><span class="line">  #在函数内部定义变量</span><br><span class="line">  v2=200</span><br><span class="line">&#125;</span><br><span class="line">#调用函数</span><br><span class="line">func</span><br><span class="line">#输出变量的值</span><br><span class="line">echo &quot;$v2&quot;</span><br></pre></td></tr></table></figure>
<p>该执行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>与全局变量想比，局部变量的使用范围较小，通常仅限定某个程序段访问，例如函数内部。需要使用<code>local</code>关键字进行定义，另外，函数的参数也是局部变量。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#定义函数</span><br><span class="line">func()</span><br><span class="line">&#123;</span><br><span class="line">  #使用local关键字定义局部变量</span><br><span class="line">  local v2=200</span><br><span class="line">&#125;</span><br><span class="line">#调用函数</span><br><span class="line">func</span><br><span class="line">#输出变量</span><br><span class="line">echo &quot;$v2&quot;</span><br></pre></td></tr></table></figure>
<p>该执行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#并没有输出任何结果，因为v2是局部变量</span><br></pre></td></tr></table></figure>
<p>从以下代码来比例两种局部变量和全局变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#定义函数</span><br><span class="line">func()</span><br><span class="line">&#123;</span><br><span class="line">  #输出全局变量v1</span><br><span class="line">  echo &quot;global variable v1 is $v1&quot;</span><br><span class="line">  #定义局部变量v1</span><br><span class="line">  local v1=2</span><br><span class="line">  #输出局部变量v1</span><br><span class="line">  echo &quot;local variable v1 is $v1&quot;</span><br><span class="line">&#125;</span><br><span class="line">#定义全局变量v1</span><br><span class="line">v1=1</span><br><span class="line">#调用函数</span><br><span class="line">func</span><br><span class="line">#输出全局变量v1</span><br><span class="line">echo &quot;global variable v1 is $v1&quot;</span><br></pre></td></tr></table></figure>
<p>该执行的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">global variable v1 is 1</span><br><span class="line">local variable v1 is 2</span><br><span class="line">global variable v1 is 1</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意Shell变量中的符号”$”表示取变量的值。只有在取值的时候才使用，定义和赋值是无需使用符号”$”，另外，实际上Shell中变量的原型为${var}，$var为简写，在某些情况下，简写会导致程序执行错误。</p>
</blockquote>
<h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><p>Shell语言的系统变量主要在对参数判断和命令返回值判断时使用，包括脚本和函数参数，已经脚本和函数的返回值。Shell语言中的系统变量并不多，但是十分有用，特别是在做一些参数检测的时候。一些常用的系统变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>n是第一个整数，从1开始，表示参数的位置，例如$1表示第1个参数，$2表示第2个参数</td>
</tr>
<tr>
<td>$#</td>
<td>命令行参数的个数</td>
</tr>
<tr>
<td>$0</td>
<td>当前Shell脚本的名称</td>
</tr>
<tr>
<td>$?</td>
<td>前一个命令或者函数的返回状态码</td>
</tr>
<tr>
<td>$*</td>
<td>以”参数1””参数2”……的形式将所有参数通过一个字符串返回</td>
</tr>
<tr>
<td>$@</td>
<td>以”参数1””参数2”……的形式返回每个参数</td>
</tr>
<tr>
<td>$$</td>
<td>返回本程序的进程ID（PID）</td>
</tr>
</tbody>
</table>
<p>下面是常用的系统变量的使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#输出脚本的参数个数</span><br><span class="line">echo &quot;the number of parameters is $#&quot;</span><br><span class="line">#输出上一个命令的退出状态码</span><br><span class="line">echo &quot;the return code of last command is $?&quot;</span><br><span class="line">#输出当前脚本的名称</span><br><span class="line">echo &quot;the script name is $0&quot;</span><br><span class="line">#输出所有的参数</span><br><span class="line">echo &quot;the parameters are $*&quot;</span><br><span class="line">#输出其中的几个参数</span><br><span class="line">echo &quot;\$1=$1;\$2=$2;\$11=$&#123;11&#125;&quot;</span><br></pre></td></tr></table></figure>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>Shell的环境变量是所有Shell程序都可以使用的变量。Shell程序在运行时，都会接收一组变量，这组变量就是环境变量。环境变量会影响到所有脚本的执行结果。如下是一些常用的环境变量：</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>PATH</td>
<td>命令搜索路径，以冒号为分隔符。注意Windows下不同的是，当前目录不在系统路径里</td>
</tr>
<tr>
<td>HOME</td>
<td>用户主目录的路径名，是cd命令的默认参数</td>
</tr>
<tr>
<td>COLUMNS</td>
<td>定义了命令编辑模式下可使用命令行的长度</td>
</tr>
<tr>
<td>HISTFILE</td>
<td>命令历史文件</td>
</tr>
<tr>
<td>HISFILESIZE</td>
<td>命令历史文件中最多可包含的命令条数</td>
</tr>
<tr>
<td>IFS</td>
<td>定义Shell使用的分隔符</td>
</tr>
<tr>
<td>LOGNAME</td>
<td>当前的登录名</td>
</tr>
<tr>
<td>SHELL</td>
<td>Shell的全路径名</td>
</tr>
<tr>
<td>TERM</td>
<td>终端类型</td>
</tr>
<tr>
<td>TMOUT</td>
<td>Shell自动退出的时刻，单位为秒，若设置为0则禁止Shell自动退出</td>
</tr>
<tr>
<td>PWD</td>
<td>当前工作目录</td>
</tr>
</tbody>
</table>
<p>可以使用<code>set</code>命令列出系统所有的环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set | more</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;!&apos;=0</span><br><span class="line">&apos;#&apos;=0</span><br><span class="line">&apos;$&apos;=6491</span><br><span class="line">&apos;*&apos;=(  )</span><br><span class="line">-=569JNRXghikls</span><br><span class="line">0=-zsh</span><br><span class="line">&apos;?&apos;=0</span><br><span class="line">@=(  )</span><br><span class="line">ARGC=0</span><br><span class="line">Apple_PubSub_Socket_Render=/private/tmp/com.apple.launchd.A6yPyflyoi/Render</span><br><span class="line">BG</span><br><span class="line">CDPATH=&apos;&apos;</span><br><span class="line">COLORFGBG=&apos;12;8&apos;</span><br><span class="line">COLUMNS=80</span><br><span class="line">CPUTYPE=x86_64</span><br><span class="line">CURRENT_BG=NONE</span><br><span class="line">EGID=20</span><br><span class="line">EUID=501</span><br><span class="line">FG</span><br><span class="line">FIGNORE=&apos;&apos;</span><br><span class="line">FPATH=/Users/wangchonglei/.oh-my-zsh/plugins/git:/Users/wangchonglei/.oh-my-zsh/functions:/Users/wangchonglei/.oh-my-zsh/completions:/usr/local/share/zsh/site-functions:/usr/share/zsh/site-functions:/usr/share/zsh/5.2/functions</span><br><span class="line">FX</span><br></pre></td></tr></table></figure>
<p>使用范例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#输出命令搜索路径</span><br><span class="line">echo &quot;commands path is $PATH&quot;</span><br><span class="line">#输出当前的登录名</span><br><span class="line">echo &quot;current login name is $LOGName&quot;</span><br><span class="line">#输出当前用户的主目录</span><br><span class="line">echo &quot;current user&apos;s home is $HOME&quot;</span><br><span class="line">#输出当前的Shell</span><br><span class="line">echo &quot;current shell is $SHELL&quot;</span><br><span class="line">#输出当前的工作目录</span><br><span class="line">echo &quot;current path is $PWD&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最近在学习<code>Shell</code>，把学习中的一些知识点记录下来，供以后自己复习使用。谢谢大家的阅读，有什么问题欢迎指出~~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 20日</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161023225816555&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;变量的命名&quot;&gt;&lt;a href=&quot;#变量的命名&quot; class=&quot;headerlink&quot; title=&quot;变量的命名&quot;&gt;&lt;/a&gt;变量的命名&lt;/h2&gt;&lt;p&gt;对于初学者来说，可以简单的理解为，变量就是保存在计算机内存中的一系列的键值对。&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://imwcl.com/categories/Shell/"/>
    
    
      <category term="Shell学习小结" scheme="http://imwcl.com/tags/Shell%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 使用Carthage管理iOS第三方库</title>
    <link href="http://imwcl.com/2016/09/20/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8Carthage%E7%AE%A1%E7%90%86iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    <id>http://imwcl.com/2016/09/20/iOS开发进阶-使用Carthage管理iOS第三方库/</id>
    <published>2016-09-20T14:56:41.000Z</published>
    <updated>2016-09-20T15:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160920225432049" alt=""></p>
<blockquote>
<p>最近在研究<strong>Swift</strong>，一不小心发现一个好的的管理iOS第三方库<strong>Carthage</strong>，就跟第一次使用<strong>CocoaPods</strong>时一样兴奋不已，在研究了大半天后终于能用了，使用起来还是很方便的，比起<strong>CocoaPods</strong>有不足也有优点，两个配合起来用也是很爽的^ - ^</p>
</blockquote>
<a id="more"></a>
<h1 id="初识Carthage"><a href="#初识Carthage" class="headerlink" title="初识Carthage"></a>初识<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a></h1><p>最近在用<strong>Swift3.0</strong>做项目，想导入一些支持<strong>Swift3.0</strong>的第三方库来使用，就想到<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>，看<strong>README</strong>时发现了一个新的名词<strong>Carthage</strong>，What？，这是个什么东西，居然也可以用它来管理第三方库，之前都没见到过，赶紧百度了一下补充了下知识：</p>
<p><strong>Carthage</strong>：迦太基（地中海地区古城），好吧这是百度百科的解释，至于为什么用这个单词，我也不太清楚，可能比较屌吧，看下图你就知道它是用来干什么的了：</p>
<p><img src="http://img.blog.csdn.net/20160920212737795" alt="这里写图片描述"></p>
<blockquote>
<p>Carthage的目标是用最简单的方式来管理Cocoa第三方框架</p>
</blockquote>
<p>是的，你没看错，它可以用来管理第三方库<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>，然后查了一下，还有很多第三方库都可以用它来管理，跟<strong>CocoaPods</strong>一样可以用来管理第三方库，看了一下它的崛起时间大概是iOS8之后<strong>Swift</strong>出来的时候，与现在流行的 <strong>CocoaPods</strong> 不同，它是一个去中心化的解决方案。<strong>CocoaPods</strong>的方法更易于使用，但<strong>Carthage</strong>更灵活并且是非侵入性的。</p>
<p> 大家都知道<strong>Swift</strong>是支持动态库的，所以<strong>Carthage</strong>应势而生，它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题）。不过，这样也有一些缺点，就是想修改第三方库源码的话很费劲，还需要重新编译打包。</p>
<h2 id="安装和使用Carthage"><a href="#安装和使用Carthage" class="headerlink" title="安装和使用Carthage"></a>安装和使用Carthage</h2><p>首先到<strong>github</strong>上Download或者Clone Git 或者使用<strong>HomeBrew</strong>（没有安装的可以自行百度去装一个）安装~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update #先更新</span><br><span class="line">brew install carthage #安装Carthage</span><br></pre></td></tr></table></figure>
<p>当你安装好Carthage后，在终端执行来判断是否安装成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage version</span><br></pre></td></tr></table></figure>
<p>即可看到当前的<strong>Carthage</strong>版本, 当我写这篇文章的时候，<strong>Carthage</strong>的版本为0.18（还是很年轻的嘛） 。</p>
<p>现在，你已经安装好了<strong>Carthage</strong>，接下来就是在你的项目中使用carthage了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Cartfile #创建一个叫Cartfile的文件</span><br></pre></td></tr></table></figure>
<p>输入你想要编译成Framework的<strong>Swift</strong>第三方库，比如说<strong>SnapKit</strong>和<strong>Alamofire</strong>，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">github &quot;Alamofire/Alamofire&quot; ~&gt; 4.0  #支持Swift3.0</span><br><span class="line">github &quot;SnapKit/SnapKit&quot; ~&gt; 3.0 #支持Swift3.0</span><br></pre></td></tr></table></figure>
<p>github代表源，而后面的就是用户名和版本库的名字，而”~&gt;” 后面是版本号哈！</p>
<p>保存退出，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage update --platform iOS #因为是打包iOS的所以后面加iOS，有的库支持mac、watch的话会打几个包</span><br></pre></td></tr></table></figure>
<p>之后会发现在跟目录下多出了<strong>Carthage</strong>文件夹和<strong>Cartfile.resolved</strong>文件。进入<strong>Carthage/Checkouts</strong>下可以看到刚刚得到的<strong>Alamofire</strong>和<strong>SnapKit</strong>，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160920220309400" alt="这里写图片描述">现在打开你的项目，点击<strong>project</strong>，选择<strong>target</strong>, 再选择上方的<strong>General</strong>，将需要的<strong>framework</strong>文件拖到 <strong>Linked frameworks and Binaries</strong>内：</p>
<p><img src="http://img.blog.csdn.net/20160920220544981" alt="这里写图片描述"></p>
<p>然后这是很重要的一步，点击<strong>Build Phrase tab</strong>选项，添加相应的<strong>run script</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/carthage copy-frameworks</span><br><span class="line">$(SRCROOT)/Carthage/Build/iOS/你的framework</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160920220906190" alt="这里写图片描述"></p>
<p>然后就可以去项目里面<code>import</code>你得第三方库了~~可以愉快的使用了，不过有一点要吐槽一下<code>`build</code>的速度真是有点慢- . -</p>
<h1 id="CocoaPods的优势与劣势"><a href="#CocoaPods的优势与劣势" class="headerlink" title="CocoaPods的优势与劣势"></a>CocoaPods的优势与劣势</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>使用方便，除编写 Podfile 以外其他几乎都是自动完成；</li>
<li>软件包数量多，主流支持；</li>
<li>支持 iOS 8 Framework，当然也支持旧的静态编译；</li>
<li>开发者使用比较简单，但是如果创建兼容 CocoaPods  的库，就会相对繁琐一些（尽管有了命令行）~</li>
</ul>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>每次clean后都得重新编译，编译比较耗时，Archive也会变慢；</li>
<li>每次更新环境都需要连接到中心仓库，比较耗时~</li>
</ul>
<h1 id="Carthage的优势与劣势"><a href="#Carthage的优势与劣势" class="headerlink" title="Carthage的优势与劣势"></a>Carthage的优势与劣势</h1><h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><ul>
<li>build一次后就能在项目里面使用，增加编译速度；</li>
<li>可以与<strong>CocoaPods</strong>无缝集成；</li>
<li>它是去中心化的，没有中心服务器，这意味着每次配置和更新环境，只会去更新具体的库，而不会有一个向中心服务器获取最新库的索引这么个过程，如此一来，又省了很多时间；</li>
<li>不会影响你的项目配置的，相对<strong>CocoaPods</strong>而言更加独立，Carthage 使用的是一种非侵入性的哲学；</li>
</ul>
<h2 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>库依然不如 CocoaPods 丰富：尽管很多库不需要声明并改造就直接可以被 Carthage 用，但依然有大量 CocoaPods 能用的库不支持，我相信时间能解决这个问题；</li>
<li>只支持 Framework，所以是 iOS 8 Only 了，随着时间推移，这个也不会是问题；</li>
<li>无法在 Xcode 里定位到源码：如果你在写代码过程中，想跳转到一个第三方库去看具体的实现，这是无法办到的，Carthage 的配置只能让你看到一个库的头文件~</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我觉得不管怎样，好不好用，做为iOS程序员我们都应该去尝试的了解一下它，通过它去学到更多的东西，至于什么第三方库用<strong>CocoaPods</strong>，什么去用<strong>Carthage</strong>，我觉得一些比较稳定大的库可以用<strong>Carthage</strong>，而一些变动比较大，自己还有可能去修改的库我们肯定首选<strong>CocoaPods</strong>。最后希望大家看到这篇博客能学到东西，大家有问题可以提出来，谢谢大家的阅读~~</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.jianshu.com/p/5ccde5f22a17" target="_blank" rel="external">http://www.jianshu.com/p/5ccde5f22a17</a></p>
<p><a href="https://imtx.me/archives/1939.html" target="_blank" rel="external">https://imtx.me/archives/1939.html</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 20日</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160920225432049&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在研究&lt;strong&gt;Swift&lt;/strong&gt;，一不小心发现一个好的的管理iOS第三方库&lt;strong&gt;Carthage&lt;/strong&gt;，就跟第一次使用&lt;strong&gt;CocoaPods&lt;/strong&gt;时一样兴奋不已，在研究了大半天后终于能用了，使用起来还是很方便的，比起&lt;strong&gt;CocoaPods&lt;/strong&gt;有不足也有优点，两个配合起来用也是很爽的^ - ^&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS基于XMPP实现即时通讯之一、环境的搭建</title>
    <link href="http://imwcl.com/2016/09/16/iOS%E5%9F%BA%E4%BA%8EXMPP%E5%AE%9E%E7%8E%B0%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8B%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://imwcl.com/2016/09/16/iOS基于XMPP实现即时通讯之一、环境的搭建/</id>
    <published>2016-09-16T05:27:59.000Z</published>
    <updated>2016-09-17T11:21:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>使用XMPP已经有一段时间了，但是一直都没深入研究过，只是使用SDK做一些简单的操作，看了许多大神的博客，自己总结一下，准备写一系列关于XMPP的使用博客，以便于自己更加深入学习~</p>
</blockquote>
<h1 id="IM协议及服务器选型"><a href="#IM协议及服务器选型" class="headerlink" title="IM协议及服务器选型"></a>IM协议及服务器选型</h1><p><a href="http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/" target="_blank" rel="external">http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/</a><br>协议选型：<strong>XMPP</strong>已经成为标准的IM协议。<strong>XMPP</strong>官网：<a href="http://XMPP.org/" target="_blank" rel="external">http://XMPP.org/</a><br>服务器型：使用广泛的是ejabberd，jabberd 2.x， Openfire，Tigase。从编程语言角度来看主要是JAVA和Erlang。JAVA语言的优势是类库完备，容易招人。Erlang的优势是hot code swap，live console， 高并发。而且ejabberd是对XMPP协议支持最好、实现最为全面的server。因此企业在不考虑独立开发服务器的情况下，初期选型基本建议采用ejabberd。</p>
<p>本文我们主要实践iOS端流程，不考虑太多服务器实现，因为Openfire易安装，插件功能丰富，我们使用<strong>Openfire</strong></p>
<a id="more"></a>
<h1 id="MAC上搭建MySQL"><a href="#MAC上搭建MySQL" class="headerlink" title="MAC上搭建MySQL"></a>MAC上搭建MySQL</h1><p>因为服务器需要数据库支撑，所以我们在搭建Openfire前要先搭建数据库。</p>
<h2 id="下载MySQL安装包"><a href="#下载MySQL安装包" class="headerlink" title="下载MySQL安装包"></a>下载MySQL安装包</h2><p>我们先去<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external"><strong>MySQL官网</strong></a>去下载<strong>MySQL</strong>的安装包，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160916132616906" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160916132635422" alt="这里写图片描述"></p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>下载完后，开始安装<strong>MySQL</strong>如下图：</p>
<p><img src="http://img.blog.csdn.net/20160916140022624" alt="这里写图片描述"></p>
<p><strong>注意事项：</strong>因为安装完<strong>MySQL</strong>后它会自动给你生成一个密码，所以你要保存好这个密码，后面修改密码的时候会用到，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160916140241828" alt="这里写图片描述"></p>
<h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><p>首先在设置里面找到MySQL的启动按钮，启动MySQL服务，如下图：</p>
<p><img src="http://img.blog.csdn.net/20160916141553080" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160916141613117" alt="这里写图片描述"></p>
<h3 id="定义MySQL别名"><a href="#定义MySQL别名" class="headerlink" title="定义MySQL别名"></a>定义MySQL别名</h3><p>然后需要将<strong>MySQL</strong>的指令重新定义一下，因为<strong>MySQL</strong>的指令集在<code>/usr/local/mysql/bin/mysql</code>路径下，需要执行一下命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定义mysql别名</span><br><span class="line">alias mysql=/usr/local/mysql/bin/mysql</span><br><span class="line"># mysqladmin</span><br><span class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladmin</span><br></pre></td></tr></table></figure>
<h3 id="修改MySQL账户密码"><a href="#修改MySQL账户密码" class="headerlink" title="修改MySQL账户密码"></a>修改MySQL账户密码</h3><p>之前安装完成后系统给我们了一个默认的密码，因为那个密码很繁琐不容易记住，所以我们需要重新设置一个密码，我们先输入如下指令设置新密码，”newpassword”为你要设置的新密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p password &quot;newpassword&quot;</span><br><span class="line">#然后 Enter password: 【输入原来的密码】</span><br></pre></td></tr></table></figure>
<p>如下图所示表示密码修改成功：</p>
<p><img src="http://img.blog.csdn.net/20160916143123858" alt="这里写图片描述"></p>
<p>完成后以后root账户需要密码就用你新设置的密码就行了~</p>
<h3 id="连接数据库，创建Openfire数据库"><a href="#连接数据库，创建Openfire数据库" class="headerlink" title="连接数据库，创建Openfire数据库"></a>连接数据库，创建Openfire数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"># 创建Openfire数据库</span><br><span class="line">create database openfire;</span><br></pre></td></tr></table></figure>
<h2 id="完全卸载MySQL"><a href="#完全卸载MySQL" class="headerlink" title="完全卸载MySQL"></a>完全卸载MySQL</h2><p>在系统内存不够时有时候我们会需要删除掉<strong>MySQL</strong>，一下就是删除<strong>MySQL</strong>的方法：</p>
<p>从 <strong>Yosemite</strong> 系统开始，<code>/etc/hostconfig</code> 这个文件已经移除，所以 <strong>Yosemite</strong> 后的系统可以忽略下面的命令</p>
<p><code>sudo nano /etc/hostconfig</code>  </p>
<p>然后以下是终端执行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/local/mysql  </span><br><span class="line">sudo rm -rf /usr/local/mysql*  </span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM  </span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*  </span><br><span class="line">sudo nano /etc/hostconfig     (复制前面部分回车，然后删掉这一行: MYSQLCOM=-YES-，control+O回车保存，control+X退出编辑界面)  </span><br><span class="line">sudo rm -rf ~/Library/PreferencePanes/My*  </span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*  </span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*  </span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br></pre></td></tr></table></figure>
<h1 id="MAC上搭建Openfire"><a href="#MAC上搭建Openfire" class="headerlink" title="MAC上搭建Openfire"></a>MAC上搭建Openfire</h1><h2 id="下载并安装openfire"><a href="#下载并安装openfire" class="headerlink" title="下载并安装openfire"></a>下载并安装openfire</h2><p>去<a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external"><strong>openfire</strong>官网</a>上去下载相应的包：</p>
<p><img src="http://img.blog.csdn.net/20160916160948387" alt="这里写图片描述"></p>
<p>双击进行傻瓜式的安装就好了，安装完毕后会在系统偏好设置里面找到<strong>openfire</strong>的启动器</p>
<p><img src="http://img.blog.csdn.net/20160916193304787" alt=""></p>
<p>点击<strong>Openfire</strong>会进入启动页面</p>
<p><img src="http://img.blog.csdn.net/20160916193312553" alt=""></p>
<p>点击<strong>Open Admin Console</strong>进入浏览器设置页面，语言选择简体中文</p>
<p><img src="http://img.blog.csdn.net/20160916193322506" alt=""></p>
<p>接着设置服务器的名字</p>
<p><img src="http://img.blog.csdn.net/20160916193331803" alt=""></p>
<p>链接数据库</p>
<blockquote>
<p>注意里面的用户名和密码是你数据库的用户名和密码，用户名一般是root，密码是你之前重新设置的密码~~~</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193340006" alt=""></p>
<p>然后一直继续就OK了，最后需要我们登录到<strong>openfire</strong></p>
<blockquote>
<p>密码就是之前设置的密码</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193348913" alt=""></p>
<h2 id="openfire启动失败解决办法"><a href="#openfire启动失败解决办法" class="headerlink" title="openfire启动失败解决办法"></a>openfire启动失败解决办法</h2><blockquote>
<p>当你发现你的电脑上的<strong>openfire</strong>无论你是重新安装还是重启都无法启动的情况下你可以按照我下面写的那些终端指令来启动你的<strong>openfire</strong>不用再去重新做你的系统了.</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193404522" alt=""></p>
<p>一般你发现你的<strong>openfire</strong>打开出现这样的窗口后你就可以想到你的<strong>openfire</strong>出问题了,极个别的时候你可以通过重新安装来解决.</p>
<p>如果大家的问题重新安装后没有解决那就试下我下面的方法.</p>
<p>先打开自己电脑上的终端然后输入以下指令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取权限</span><br><span class="line">sudo chmod -R 777 /usr/local/openfire/bin</span><br><span class="line">cd /usr/local/openfire/bin</span><br><span class="line">export JAVA_HOME=`/usr/libexec/java_home` # 记住这里不是单引号而是英文下数字1左边的按键.</span><br><span class="line">echo $JAVA_HOME</span><br><span class="line"># 终端上打印的内容 /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home</span><br><span class="line">cd /usr/local/openfire/bin</span><br><span class="line">./openfire.sh</span><br><span class="line"># 终端上打印的内容</span><br><span class="line"># Openfire 4.0.3 [Sep 16, 2016 4:19:21 PM]</span><br><span class="line"># Admin console listening at http://wangchongleidemacbook-air.local:9090</span><br></pre></td></tr></table></figure>
<p>一般你输入完成这些指令后你再打开你的openfire就会发现这样的情况.</p>
<p><img src="http://img.blog.csdn.net/20160916193412210" alt=""></p>
<h2 id="安装openfire后admin无法登录管理控制平台"><a href="#安装openfire后admin无法登录管理控制平台" class="headerlink" title="安装openfire后admin无法登录管理控制平台"></a>安装openfire后admin无法登录管理控制平台</h2><p><img src="http://img.blog.csdn.net/20160916193422991" alt=""></p>
<p>解决方案如下：</p>
<ul>
<li>使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行SQL 语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES (&apos;admin&apos;, &apos;admin&apos;, &apos;Administrator&apos;, &apos;admin@example.com&apos;, &apos;0&apos;, &apos;0&apos;);</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可.</li>
</ul>
<h2 id="彻底删除openfire服务器的"><a href="#彻底删除openfire服务器的" class="headerlink" title="彻底删除openfire服务器的"></a>彻底删除openfire服务器的</h2><p>首先,确保你已经关掉了openfire<br>打开终端 (在应用程序–&gt;实用工具–&gt;)<br>输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/PreferencePanes/Openfire.prefPane</span><br><span class="line">sudo rm -rf /usr/local/openfire</span><br><span class="line">sudo rm -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</span><br></pre></td></tr></table></figure>
<p>第一条会让你输入管理员密码,尽管你输入的时候,终端不会显示,不必担心,正确输入后按回车,它就执行了。<br>三条命令以后，<strong>openfire</strong>就彻底消失了.但是需要重启一下系统偏设置。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置过程还是比较繁琐的，一共需要好几个步骤，需要装的有<strong>MySQL</strong>、<strong>JAVA环境</strong>和<strong>openfire</strong>，里面有一步没做好都没法使用，自己完整配置下来也花了很长时间，大家如果有什么问题可以留言问我，谢谢大家的阅读~~</p>
<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p><a href="http://www.cnblogs.com/xiaodao/archive/2013/04/04/2999426.html" target="_blank" rel="external">http://www.cnblogs.com/xiaodao/archive/2013/04/04/2999426.html</a></p>
<p><a href="http://www.cnblogs.com/xiaodao/archive/2013/04/05/3000554.html" target="_blank" rel="external">http://www.cnblogs.com/xiaodao/archive/2013/04/05/3000554.html</a></p>
<p><a href="http://www.jianshu.com/p/5d88fe201c71" target="_blank" rel="external">http://www.jianshu.com/p/5d88fe201c71</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 16日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用XMPP已经有一段时间了，但是一直都没深入研究过，只是使用SDK做一些简单的操作，看了许多大神的博客，自己总结一下，准备写一系列关于XMPP的使用博客，以便于自己更加深入学习~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;IM协议及服务器选型&quot;&gt;&lt;a href=&quot;#IM协议及服务器选型&quot; class=&quot;headerlink&quot; title=&quot;IM协议及服务器选型&quot;&gt;&lt;/a&gt;IM协议及服务器选型&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/&quot;&gt;http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/&lt;/a&gt;&lt;br&gt;协议选型：&lt;strong&gt;XMPP&lt;/strong&gt;已经成为标准的IM协议。&lt;strong&gt;XMPP&lt;/strong&gt;官网：&lt;a href=&quot;http://XMPP.org/&quot;&gt;http://XMPP.org/&lt;/a&gt;&lt;br&gt;服务器型：使用广泛的是ejabberd，jabberd 2.x， Openfire，Tigase。从编程语言角度来看主要是JAVA和Erlang。JAVA语言的优势是类库完备，容易招人。Erlang的优势是hot code swap，live console， 高并发。而且ejabberd是对XMPP协议支持最好、实现最为全面的server。因此企业在不考虑独立开发服务器的情况下，初期选型基本建议采用ejabberd。&lt;/p&gt;
&lt;p&gt;本文我们主要实践iOS端流程，不考虑太多服务器实现，因为Openfire易安装，插件功能丰富，我们使用&lt;strong&gt;Openfire&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="XMPP学习" scheme="http://imwcl.com/categories/XMPP%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS动画进阶 - 手摸手教你写 Slack 的 Loading 动画</title>
    <link href="http://imwcl.com/2016/09/08/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%86%99-Slack-%E7%9A%84-Loading-%E5%8A%A8%E7%94%BB/"/>
    <id>http://imwcl.com/2016/09/08/iOS开发进阶-手摸手教你写-Slack-的-Loading-动画/</id>
    <published>2016-09-08T10:08:43.000Z</published>
    <updated>2016-09-17T11:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前几天看了一篇关于动画的博客叫<a href="http://www.diycode.cc/topics/240" target="_blank" rel="external">手摸手教你写 Slack 的 Loading 动画</a>，看着挺炫，但是是安卓版的，寻思的着仿造着写一篇iOS版的，下面是我写这个动画的分解~</p>
</blockquote>
<p>老规矩先上图和<a href="https://github.com/631106979/WCLLoadingView" target="_blank" rel="external">demo地址</a>：</p>
<p><img src="http://img.blog.csdn.net/20160908162326530" alt="这里写图片描述"></p>
<p>刚看到这个动画的时候，脑海里出现了两个方案，一种是通过<code>drawRect</code>画出来，然后配合<code>CADisplayLink</code>不停的绘制线的样式；第二种是通过<code>CAShapeLayer</code>配合<code>CAAnimation</code>来实现动画效果。再三考虑觉得使用后者，因为前者需要计算很多，比较复杂，而且经过测试前者相比于后者消耗更多的CPU，下面将我的思路写下来：</p>
<a id="more"></a>
<h1 id="相关配置和初始化方法"><a href="#相关配置和初始化方法" class="headerlink" title="相关配置和初始化方法"></a>相关配置和初始化方法</h1><p>在写这个动画之前，我们把先需要的属性写好，比如线条的粗细，动画的时间等等，下面是相关的配置和初识化方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线的宽度</span></span><br><span class="line"><span class="keyword">var</span> lineWidth:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//线的长度</span></span><br><span class="line"><span class="keyword">var</span> lineLength:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//边距</span></span><br><span class="line"><span class="keyword">var</span> margin:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//动画时间</span></span><br><span class="line"><span class="keyword">var</span> duration:<span class="type">Double</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">//动画的间隔时间</span></span><br><span class="line"><span class="keyword">var</span> interval:<span class="type">Double</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//四条线的颜色</span></span><br><span class="line"><span class="keyword">var</span> colors:[<span class="type">UIColor</span>] = [<span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#9DD4E9"</span>) , <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#F5BD58"</span>),  <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#FF317E"</span>) , <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#6FC9B5"</span>)]</span><br><span class="line"><span class="comment">//动画的状态</span></span><br><span class="line"><span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> status:<span class="type">AnimationStatus</span> = .<span class="type">Normal</span></span><br><span class="line"><span class="comment">//四条线</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> lines:[<span class="type">CAShapeLayer</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AnimationStatus</span> </span>&#123;</span><br><span class="line">    <span class="comment">//普通状态</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Normal</span></span><br><span class="line">    <span class="comment">//动画中</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Animating</span></span><br><span class="line">    <span class="comment">//暂停</span></span><br><span class="line">    <span class="keyword">case</span> pause</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//MARK: Initial Methods</span></span><br><span class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(fram: <span class="type">CGRect</span> , colors: [<span class="type">UIColor</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">self</span>.frame = frame</span><br><span class="line">    <span class="keyword">self</span>.colors = colors</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">config</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lineLength = <span class="built_in">max</span>(frame.width, frame.height)</span><br><span class="line">    lineWidth  = lineLength/<span class="number">6.0</span></span><br><span class="line">    margin     = lineLength/<span class="number">4.5</span> + lineWidth/<span class="number">2</span></span><br><span class="line">    drawLineShapeLayer()</span><br><span class="line">    transform = <span class="type">CGAffineTransformRotate</span>(<span class="type">CGAffineTransformIdentity</span>, angle(-<span class="number">30</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过CAShapeLayer绘制线条"><a href="#通过CAShapeLayer绘制线条" class="headerlink" title="通过CAShapeLayer绘制线条"></a>通过CAShapeLayer绘制线条</h1><p>看到这个线条我就想到了用<code>CAShapeLayer</code>来处理，因为<code>CAShapeLayer</code>完全可以实现这种效果，而且它的<code>strokeEnd</code>的属性可以用来实现线条的长度变化的动画，下面上绘制四根线条的代码：</p>
<p><img src="http://img.blog.csdn.net/20160908172029899" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 绘制线</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     绘制四条线</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">drawLineShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//开始点</span></span><br><span class="line">        <span class="keyword">let</span> startPoint = [point(lineWidth/<span class="number">2</span>, y: margin),</span><br><span class="line">                          point(lineLength - margin, y: lineWidth/<span class="number">2</span>),</span><br><span class="line">                          point(lineLength - lineWidth/<span class="number">2</span>, y: lineLength - margin),</span><br><span class="line">                          point(margin, y: lineLength - lineWidth/<span class="number">2</span>)]</span><br><span class="line">        <span class="comment">//结束点</span></span><br><span class="line">        <span class="keyword">let</span> endPoint   = [point(lineLength - lineWidth/<span class="number">2</span>, y: margin) ,</span><br><span class="line">                         point(lineLength - margin, y: lineLength - lineWidth/<span class="number">2</span>) ,</span><br><span class="line">                         point(lineWidth/<span class="number">2</span>, y: lineLength - margin) ,</span><br><span class="line">                         point(margin, y: lineWidth/<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> line:<span class="type">CAShapeLayer</span> = <span class="type">CAShapeLayer</span>()</span><br><span class="line">            line.lineWidth   = lineWidth</span><br><span class="line">            line.lineCap     = kCALineCapRound</span><br><span class="line">            line.opacity     = <span class="number">0.8</span></span><br><span class="line">            line.strokeColor = colors[i].<span class="type">CGColor</span></span><br><span class="line">            line.path        = getLinePath(startPoint[i], endPoint: endPoint[i]).<span class="type">CGPath</span></span><br><span class="line">            layer.addSublayer(line)</span><br><span class="line">            lines.append(line)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     获取线的路径</span><br><span class="line">     </span><br><span class="line">     - parameter startPoint: 开始点</span><br><span class="line">     - parameter endPoint:   结束点</span><br><span class="line">     </span><br><span class="line">     - returns: 线的路径</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getLinePath</span><span class="params">(startPoint: CGPoint, endPoint: CGPoint)</span></span> -&gt; <span class="type">UIBezierPath</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line">        path.moveToPoint(startPoint)</span><br><span class="line">        path.addLineToPoint(endPoint)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">(x:CGFloat , y:CGFloat)</span></span> -&gt; <span class="type">CGPoint</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGPointMake</span>(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">angle</span><span class="params">(angle: Double)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGFloat</span>(angle *  (<span class="type">M_PI</span>/<span class="number">180</span>))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行完后就跟上图一样的效果了~~~</p>
<h1 id="动画分解"><a href="#动画分解" class="headerlink" title="动画分解"></a>动画分解</h1><p>经过分析，可以将动画分为四个步骤：</p>
<ul>
<li>画布的旋转动画，旋转两圈</li>
<li>线条由长变短的动画，更画布选择的动画一起执行，旋转一圈的时候结束</li>
<li>线条的位移动画，线条逐渐向中间靠拢，再画笔旋转完一圈的时候执行，两圈的时候结束</li>
<li>线条由短变长的动画，画布旋转完两圈的时候执行</li>
</ul>
<h2 id="第一步画布旋转动画"><a href="#第一步画布旋转动画" class="headerlink" title="第一步画布旋转动画"></a>第一步画布旋转动画</h2><p>这里我们使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于画布的<code>transform.rotation.z</code>，以z轴为目标进行旋转，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908173322904" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 动画步骤</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     旋转的动画，旋转两圈</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">angleAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> angleAnimation                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"transform.rotation.z"</span>)</span><br><span class="line">        angleAnimation.fromValue           = angle(-<span class="number">30</span>)</span><br><span class="line">        angleAnimation.toValue             = angle(<span class="number">690</span>)</span><br><span class="line">        angleAnimation.fillMode            = kCAFillModeForwards</span><br><span class="line">        angleAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        angleAnimation.duration            = duration</span><br><span class="line">        angleAnimation.delegate            = <span class="keyword">self</span></span><br><span class="line">        layer.addAnimation(angleAnimation, forKey: <span class="string">"angleAnimation"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二步线条由长变短的动画"><a href="#第二步线条由长变短的动画" class="headerlink" title="第二步线条由长变短的动画"></a>第二步线条由长变短的动画</h2><p>这里我们还是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>strokeEnd</code>属性，让<code>strokeEnd</code>从1到0来实现线条长短的动画，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908173750890" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第一步动画，线长从长变短</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lineAnimationOne                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"strokeEnd"</span>)</span><br><span class="line">        lineAnimationOne.duration            = duration/<span class="number">2</span></span><br><span class="line">        lineAnimationOne.fillMode            = kCAFillModeForwards</span><br><span class="line">        lineAnimationOne.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        lineAnimationOne.fromValue           = <span class="number">1</span></span><br><span class="line">        lineAnimationOne.toValue             = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationOne, forKey: <span class="string">"lineAnimationOne"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三步线条的位移动画"><a href="#第三步线条的位移动画" class="headerlink" title="第三步线条的位移动画"></a>第三步线条的位移动画</h2><p>这里我们也是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>transform.translation.x</code>和<code>transform.translation.y</code>属性，来实现向中间聚拢的效果，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908174341119" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第二步动画，线向中间平移</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationTwo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> keypath = <span class="string">"transform.translation.x"</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">                keypath = <span class="string">"transform.translation.y"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineAnimationTwo = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: keypath)</span><br><span class="line">            lineAnimationTwo.beginTime = <span class="type">CACurrentMediaTime</span>() + duration/<span class="number">2</span></span><br><span class="line">            lineAnimationTwo.duration = duration/<span class="number">4</span></span><br><span class="line">            lineAnimationTwo.fillMode = kCAFillModeForwards</span><br><span class="line">            lineAnimationTwo.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">            lineAnimationTwo.autoreverses = <span class="literal">true</span></span><br><span class="line">            lineAnimationTwo.fromValue = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">2</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = lineLength/<span class="number">4</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = -lineLength/<span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationTwo, forKey: <span class="string">"lineAnimationTwo"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//三角形两边的比例</span></span><br><span class="line">        <span class="keyword">let</span> scale = (lineLength - <span class="number">2</span>*margin)/(lineLength - lineWidth)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> keypath = <span class="string">"transform.translation.y"</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">                keypath = <span class="string">"transform.translation.x"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineAnimationTwo = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: keypath)</span><br><span class="line">            lineAnimationTwo.beginTime = <span class="type">CACurrentMediaTime</span>() + duration/<span class="number">2</span></span><br><span class="line">            lineAnimationTwo.duration = duration/<span class="number">4</span></span><br><span class="line">            lineAnimationTwo.fillMode = kCAFillModeForwards</span><br><span class="line">            lineAnimationTwo.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">            lineAnimationTwo.autoreverses = <span class="literal">true</span></span><br><span class="line">            lineAnimationTwo.fromValue = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> || i == <span class="number">3</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = lineLength/<span class="number">4</span> * scale</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = -lineLength/<span class="number">4</span> * scale</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationTwo, forKey: <span class="string">"lineAnimationThree"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四步线条恢复的原来长度的动画"><a href="#第四步线条恢复的原来长度的动画" class="headerlink" title="第四步线条恢复的原来长度的动画"></a>第四步线条恢复的原来长度的动画</h2><p>这里我们还是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>strokeEnd</code>属性，让<code>strokeEnd</code>从0到1来实现线条长短的动画，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908174810436" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第三步动画，线由短变长</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationThree</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//线移动的动画</span></span><br><span class="line">        <span class="keyword">let</span> lineAnimationFour                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"strokeEnd"</span>)</span><br><span class="line">        lineAnimationFour.beginTime            = <span class="type">CACurrentMediaTime</span>() + duration</span><br><span class="line">        lineAnimationFour.duration            = duration/<span class="number">4</span></span><br><span class="line">        lineAnimationFour.fillMode            = kCAFillModeForwards</span><br><span class="line">        lineAnimationFour.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        lineAnimationFour.fromValue           = <span class="number">0</span></span><br><span class="line">        lineAnimationFour.toValue             = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">                lineAnimationFour.delegate = <span class="keyword">self</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationFour, forKey: <span class="string">"lineAnimationFour"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="最后一步需要将动画组合起来"><a href="#最后一步需要将动画组合起来" class="headerlink" title="最后一步需要将动画组合起来"></a>最后一步需要将动画组合起来</h2><p>关于动画组合我没用到<code>CAAnimationGroup</code>，因为这些动画并不是加到同一个layer上，再加上动画类型有点多加起来也比较麻烦，我就通过动画的<code>beginTime</code>属性来控制动画的执行顺序，还加了动画暂停喝继续的功能，效果和代码见下图：</p>
<p><img src="http://img.blog.csdn.net/20160908175802790" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: Public Methods</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     开始动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        angleAnimation()</span><br><span class="line">        lineAnimationOne()</span><br><span class="line">        lineAnimationTwo()</span><br><span class="line">        lineAnimationThree()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      暂停动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        layer.pauseAnimation()</span><br><span class="line">        <span class="keyword">for</span> lineLayer <span class="keyword">in</span> lines &#123;</span><br><span class="line">            lineLayer.pauseAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">        status = .pause</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     继续动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resumeAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        layer.resumeAnimation()</span><br><span class="line">        <span class="keyword">for</span> lineLayer <span class="keyword">in</span> lines &#123;</span><br><span class="line">            lineLayer.resumeAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">        status = .<span class="type">Animating</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">extension</span> <span class="title">CALayer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//暂停动画</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 将当前时间CACurrentMediaTime转换为layer上的时间, 即将parent time转换为localtime</span></span><br><span class="line">        <span class="keyword">let</span> pauseTime = convertTime(<span class="type">CACurrentMediaTime</span>(), fromLayer: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 设置layer的timeOffset, 在继续操作也会使用到</span></span><br><span class="line">        timeOffset    = pauseTime</span><br><span class="line">        <span class="comment">// localtime与parenttime的比例为0, 意味着localtime暂停了</span></span><br><span class="line">        speed         = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//继续动画</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resumeAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pausedTime = timeOffset</span><br><span class="line">        speed          = <span class="number">1</span></span><br><span class="line">        timeOffset     = <span class="number">0</span>;</span><br><span class="line">        beginTime      = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 计算暂停时间</span></span><br><span class="line">        <span class="keyword">let</span> sincePause = convertTime(<span class="type">CACurrentMediaTime</span>(), fromLayer: <span class="literal">nil</span>) - pausedTime</span><br><span class="line">        <span class="comment">// local time相对于parent time时间的beginTime</span></span><br><span class="line">        beginTime      = sincePause</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK: Animation Delegate</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStart</span><span class="params">(anim: CAAnimation)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> animation = anim <span class="keyword">as</span>? <span class="type">CABasicAnimation</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> animation.keyPath == <span class="string">"transform.rotation.z"</span> &#123;</span><br><span class="line">                status = .<span class="type">Animating</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStop</span><span class="params">(anim: CAAnimation, finished flag: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> animation = anim <span class="keyword">as</span>? <span class="type">CABasicAnimation</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> animation.keyPath == <span class="string">"strokeEnd"</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> flag &#123;</span><br><span class="line">                    status = .<span class="type">Normal</span></span><br><span class="line">                    dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(interval) * <span class="type">Int64</span>(<span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">self</span>.status != .<span class="type">Animating</span> &#123;</span><br><span class="line">                            <span class="keyword">self</span>.startAnimation()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//MARK: Override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesEnded</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Animating</span>:</span><br><span class="line">            pauseAnimation()</span><br><span class="line">        <span class="keyword">case</span> .pause:</span><br><span class="line">            resumeAnimation()</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Normal</span>:</span><br><span class="line">            startAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>动画看起来挺复杂，但是细细划分出来也就那么回事，在写动画之前要先想好动画的步骤，这个很关键，希望大家通过这篇博客可以学到东西，有什么好的建议可以随时提出来，谢谢大家阅读~~<a href="https://github.com/631106979/WCLLoadingView" target="_blank" rel="external">demo地址</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 08日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前几天看了一篇关于动画的博客叫&lt;a href=&quot;http://www.diycode.cc/topics/240&quot;&gt;手摸手教你写 Slack 的 Loading 动画&lt;/a&gt;，看着挺炫，但是是安卓版的，寻思的着仿造着写一篇iOS版的，下面是我写这个动画的分解~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;老规矩先上图和&lt;a href=&quot;https://github.com/631106979/WCLLoadingView&quot;&gt;demo地址&lt;/a&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160908162326530&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;刚看到这个动画的时候，脑海里出现了两个方案，一种是通过&lt;code&gt;drawRect&lt;/code&gt;画出来，然后配合&lt;code&gt;CADisplayLink&lt;/code&gt;不停的绘制线的样式；第二种是通过&lt;code&gt;CAShapeLayer&lt;/code&gt;配合&lt;code&gt;CAAnimation&lt;/code&gt;来实现动画效果。再三考虑觉得使用后者，因为前者需要计算很多，比较复杂，而且经过测试前者相比于后者消耗更多的CPU，下面将我的思路写下来：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS动画进阶" scheme="http://imwcl.com/categories/iOS%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS动画进阶进阶" scheme="http://imwcl.com/tags/iOS%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title> iOS开发进阶 - 使用shell脚本自动打包上传到fir上</title>
    <link href="http://imwcl.com/2016/08/24/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0fir%E4%B8%8A/"/>
    <id>http://imwcl.com/2016/08/24/iOS开发进阶-使用shell脚本自动打包上传到fir上/</id>
    <published>2016-08-24T04:07:06.000Z</published>
    <updated>2016-09-17T11:57:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用fir.im测试已经好长时间了，感觉每次打包上传都很麻烦，想着是不是可以用脚本自动打包，在网上搜了一下确实有，下面总结一下如何使用脚本自动打包上传到fir.im，以及打包过程中遇到的问题和解决办法</p>
</blockquote>
<h2 id="相关资料和下载"><a href="#相关资料和下载" class="headerlink" title="相关资料和下载"></a>相关资料和下载</h2><p>首先是打包脚本的下载地址，这个是我找到的比较全的一个，里面有很多不同功能的shell脚本，亲测好用，<a href="https://github.com/heyuan110/BashShell?spm=5176.100239.blogcont5028.4.kFcLtR" target="_blank" rel="external">传送门</a></p>
<p>还有关于fir指令的一些介绍可以去这里查看，<a href="https://github.com/FIRHQ/fir-cli" target="_blank" rel="external">传送门</a></p>
<a id="more"></a>
<p><span id="APA"></span></p>
<h2 id="第一步安装fir-cil"><a href="#第一步安装fir-cil" class="headerlink" title="第一步安装fir-cil"></a>第一步安装fir-cil</h2><p>fir-cli 使用 Ruby 构建, 无需编译, 只要安装相应 gem 即可.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v <span class="comment"># &gt; 1.9.3</span></span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
<h3 id="常见的安装问题"><a href="#常见的安装问题" class="headerlink" title="常见的安装问题"></a>常见的安装问题</h3><ul>
<li><p>使用系统自带的 Ruby 安装, 需确保 ruby-dev 已被正确的安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install        <span class="comment"># OS X 系统</span></span><br><span class="line">$ sudo apt-get install ruby-dev <span class="comment"># Linux 系统</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>出现 <code>Permission denied</code> 相关错误:</p>
<p>在命令前加上 <code>sudo</code></p>
</li>
<li><p>出现 <code>Gem::RemoteFetcher::FetchError</code> 相关错误:</p>
<p>更换 Ruby 的淘宝源(由于国内网络原因, 你懂的), 并升级下系统自带的 gem</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources <span class="_">-a</span> https://ruby.taobao.org/</span><br><span class="line">$ gem sources <span class="_">-l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br><span class="line"><span class="comment"># 请确保只有 ruby.taobao.org, 如果有其他的源, 请 remove 掉</span></span><br><span class="line"></span><br><span class="line">gem update --system</span><br><span class="line">gem install fir-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mac OS X 10.11 以后的版本, 由于10.11引入了 <code>rootless</code>, 无法直接安装 fir-cli, 有以下三种解决办法:</p>
<p>1. 使用 <a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a> 及 <a href="https://rvm.io/" target="_blank" rel="external">RVM</a> 安装 Ruby, 再安装 fir-cli(推荐)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Homebrew:</span></span><br><span class="line">$ ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install RVM:</span></span><br><span class="line">$ \curl <span class="_">-s</span>SL https://get.rvm.io | bash <span class="_">-s</span> stable --ruby</span><br><span class="line"></span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
<p>2. 指定 fir-cli 中 bin 文件的 PATH</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span>;gem install -n /usr/<span class="built_in">local</span>/bin fir-cli</span><br></pre></td></tr></table></figure>
<p>3. 重写 Ruby Gem 的 bindir</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'gem: --bindir /usr/local/bin'</span> &gt;&gt; ~/.gemrc</span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="login"></span></p>
<h2 id="第二步登录fir-im"><a href="#第二步登录fir-im" class="headerlink" title="第二步登录fir.im"></a>第二步登录fir.im</h2><p>登录指令非常简单，只需要<code>fir login API Token</code>，这里面的API Token就是你fir帐号下的API Token，然后通过<code>fir me</code>查看你是否登录成功.</p>
<h3 id="首先获取API-Token"><a href="#首先获取API-Token" class="headerlink" title="首先获取API Token"></a>首先获取API Token</h3><p><img src="http://img.blog.csdn.net/20160824112123496" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160824112210549" alt="这里写图片描述"></p>
<h3 id="在终端里登录你的fir"><a href="#在终端里登录你的fir" class="headerlink" title="在终端里登录你的fir"></a>在终端里登录你的fir</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fir login API Token</span><br><span class="line">fir me</span><br></pre></td></tr></table></figure>
<p>如果出现一下类似的情况说明登录成功了.<br><img src="http://img.blog.csdn.net/20160824112506519" alt="这里写图片描述"></p>
<h3 id="获取需要上传应用的appID"><a href="#获取需要上传应用的appID" class="headerlink" title="获取需要上传应用的appID"></a>获取需要上传应用的appID</h3><p><img src="http://img.blog.csdn.net/20160824113027211" alt="这里写图片描述"></p>
<h2 id="第三步使用下载下来的shell脚本进行打包上传"><a href="#第三步使用下载下来的shell脚本进行打包上传" class="headerlink" title="第三步使用下载下来的shell脚本进行打包上传"></a>第三步使用下载下来的shell脚本进行打包上传</h2><p>先看一下脚本代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! bin/bash</span></span><br><span class="line"><span class="comment">#Author:Bruce http://www.heyuan110.com</span></span><br><span class="line"><span class="comment">#Update Date:2015.06.23</span></span><br><span class="line"><span class="comment">#Use:命令行进入目录直接执行sh Build+DeployToFir.sh即可完成打包发布到fir.im</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.GB2312;</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.GB2312</span><br><span class="line"></span><br><span class="line"><span class="comment">###############设置需编译的项目配置名称</span></span><br><span class="line">buildConfig=<span class="string">"Release"</span> <span class="comment">#编译的方式,有Release,Debug，自定义的AdHoc等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################################</span></span><br><span class="line"><span class="comment">##############################以下部分为自动生产部分，不需要手动修改############################</span></span><br><span class="line"><span class="comment">##########################################################################################</span></span><br><span class="line">projectName=`find . -name *.xcodeproj | awk -F <span class="string">"[/.]"</span> <span class="string">'&#123;print $(NF-1)&#125;'</span>` <span class="comment">#项目名称</span></span><br><span class="line">projectDir=`<span class="built_in">pwd</span>` <span class="comment">#项目所在目录的绝对路径</span></span><br><span class="line">wwwIPADir=~/Desktop/<span class="variable">$projectName</span>-IPA <span class="comment">#ipa，icon最后所在的目录绝对路径</span></span><br><span class="line">isWorkSpace=<span class="literal">true</span>  <span class="comment">#判断是用的workspace还是直接project，workspace设置为true，否则设置为false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~开始编译~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$wwwIPADir</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$wwwIPADir</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"文件目录存在"</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"文件目录不存在"</span> </span><br><span class="line">    mkdir -pv <span class="variable">$wwwIPADir</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"创建<span class="variable">$&#123;wwwIPADir&#125;</span>目录成功"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$projectDir</span></span><br><span class="line">rm -rf ./build</span><br><span class="line">buildAppToDir=<span class="variable">$projectDir</span>/build <span class="comment">#编译打包完成后.app文件存放的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############获取版本号,bundleID</span></span><br><span class="line">infoPlist=<span class="string">"<span class="variable">$projectName</span>/Info.plist"</span></span><br><span class="line">bundleVersion=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleShortVersionString"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line">bundleIdentifier=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleIdentifier"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line">bundleBuildVersion=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始编译app</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$isWorkSpace</span> ; <span class="keyword">then</span>  <span class="comment">#判断编译方式</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"开始编译workspace...."</span> </span><br><span class="line">    xcodebuild  -workspace <span class="variable">$projectName</span>.xcworkspace -scheme <span class="variable">$projectName</span>  -configuration <span class="variable">$buildConfig</span> clean build SYMROOT=<span class="variable">$buildAppToDir</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"开始编译target...."</span></span><br><span class="line">    xcodebuild  -target  <span class="variable">$projectName</span>  -configuration <span class="variable">$buildConfig</span> clean build SYMROOT=<span class="variable">$buildAppToDir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#判断编译结果</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? <span class="_">-eq</span> 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~编译成功~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~编译失败~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始打包成.ipa</span></span><br><span class="line">ipaName=`<span class="built_in">echo</span> <span class="variable">$projectName</span> | tr <span class="string">"[:upper:]"</span> <span class="string">"[:lower:]"</span>` <span class="comment">#将项目名转小写</span></span><br><span class="line">findFolderName=`find . -name <span class="string">"<span class="variable">$buildConfig</span>-*"</span> -type d |xargs basename` <span class="comment">#查找目录</span></span><br><span class="line">appDir=<span class="variable">$buildAppToDir</span>/<span class="variable">$findFolderName</span>/  <span class="comment">#app所在路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始打包<span class="variable">$projectName</span>.app成<span class="variable">$projectName</span>.ipa....."</span></span><br><span class="line">xcrun -sdk iphoneos PackageApplication -v <span class="variable">$appDir</span>/<span class="variable">$projectName</span>.app -o <span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa <span class="comment">#将app打包成ipa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始拷贝到目标下载目录</span></span><br><span class="line"><span class="comment">#检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"打包<span class="variable">$ipaName</span>.ipa成功."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"打包<span class="variable">$ipaName</span>.ipa失败."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">path=<span class="variable">$wwwIPADir</span>/<span class="variable">$projectName</span>$(date +%Y%m%d%H%M%S).ipa</span><br><span class="line">cp <span class="_">-f</span> -p <span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa <span class="variable">$path</span>   <span class="comment">#拷贝ipa文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"复制<span class="variable">$ipaName</span>.ipa到<span class="variable">$&#123;wwwIPADir&#125;</span>成功"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~结束编译，处理成功~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="comment">#open $wwwIPADir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####开始上传，如果只需要打ipa包出来不需要上传，可以删除下面的代码</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在上传到fir.im...."</span></span><br><span class="line"><span class="comment">#####http://fir.im/api/v2/app/appID?token=APIToken，里面的appID是你要上传应用的appID，APIToken是你fir上的APIToken</span></span><br><span class="line">fir p <span class="variable">$path</span></span><br><span class="line">changelog=`cat <span class="variable">$projectDir</span>/README`</span><br><span class="line">curl -X PUT --data <span class="string">"changelog=<span class="variable">$changelog</span>"</span> http://fir.im/api/v2/app/appID?token=APIToken</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n打包上传更新成功！"</span></span><br><span class="line">rm -rf <span class="variable">$buildAppToDir</span></span><br><span class="line">rm -rf <span class="variable">$projectDir</span>/tmp</span><br></pre></td></tr></table></figure></p>
<p>上面对关键代码都做了详细解释，下面只需要执行shell脚本就能打包上传了。</p>
<h3 id="执行shell脚本，打包上传"><a href="#执行shell脚本，打包上传" class="headerlink" title="执行shell脚本，打包上传"></a>执行shell脚本，打包上传</h3><ul>
<li><p>首先把这个脚本文件放到你的项目工程目录下</p>
</li>
<li><p>然后打开终端，cd到脚本文件在的目录下，执行命名<code>sh build_deployto_fir.sh</code></p>
</li>
</ul>
<p>然后看到一下类似的画面说明上传成功：</p>
<p><img src="http://img.blog.csdn.net/20160824113740683" alt="这里写图片描述"></p>
<h2 id="执行脚本过程中遇到的问题和解决方案"><a href="#执行脚本过程中遇到的问题和解决方案" class="headerlink" title="执行脚本过程中遇到的问题和解决方案"></a>执行脚本过程中遇到的问题和解决方案</h2><h3 id="fir-command-not-found"><a href="#fir-command-not-found" class="headerlink" title="fir: command not found"></a>fir: command not found</h3><p>这个是因为没有安装fir-cil，导致找不到相应的命令行，只需要安装一下就行了，详情见上文写的<a href="#APA">如何安装fir-cil</a>。</p>
<h3 id="README-No-such-file-or-directory"><a href="#README-No-such-file-or-directory" class="headerlink" title="README: No such file or directory"></a>README: No such file or directory</h3><p>那是因为你的脚本目录下没有README的文件，只需要建一个README的文件就行了，打开终端，cd到当前位置，然后执行下面的命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch README</span><br></pre></td></tr></table></figure></p>
<h3 id="ERROR-–-Token-can-not-be-blank"><a href="#ERROR-–-Token-can-not-be-blank" class="headerlink" title="ERROR – : Token can not be blank"></a>ERROR – : Token can not be blank</h3><p>这个原因是因为你没有登录fir导致的，你执行这个脚本之前应该先登录一下fir，详情请看上文写的<a href="#login">登录fir.im</a>。</p>
<blockquote>
<p>以上就是我对于打包上传到fir上的脚本使用的总结，如果大家有问题可以随时问我，谢谢大家的阅读。</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 08月 24日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用fir.im测试已经好长时间了，感觉每次打包上传都很麻烦，想着是不是可以用脚本自动打包，在网上搜了一下确实有，下面总结一下如何使用脚本自动打包上传到fir.im，以及打包过程中遇到的问题和解决办法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关资料和下载&quot;&gt;&lt;a href=&quot;#相关资料和下载&quot; class=&quot;headerlink&quot; title=&quot;相关资料和下载&quot;&gt;&lt;/a&gt;相关资料和下载&lt;/h2&gt;&lt;p&gt;首先是打包脚本的下载地址，这个是我找到的比较全的一个，里面有很多不同功能的shell脚本，亲测好用，&lt;a href=&quot;https://github.com/heyuan110/BashShell?spm=5176.100239.blogcont5028.4.kFcLtR&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还有关于fir指令的一些介绍可以去这里查看，&lt;a href=&quot;https://github.com/FIRHQ/fir-cli&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS开发进阶 shell脚本" scheme="http://imwcl.com/tags/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 实现类似美颜相机的相机启动动画</title>
    <link href="http://imwcl.com/2016/08/16/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E7%BE%8E%E9%A2%9C%E7%9B%B8%E6%9C%BA%E7%9A%84%E7%9B%B8%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB/"/>
    <id>http://imwcl.com/2016/08/16/iOS开发进阶-实现类似美颜相机的相机启动动画/</id>
    <published>2016-08-16T07:59:59.000Z</published>
    <updated>2016-09-17T11:57:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最近在写一个相册的demo，偶尔看到了美拍的相机过载动画觉得很有意思，就想在我的相册demo中加入一个这种特效，下面把我的想法和实现过程给大家分享一下</p>
</blockquote>
<p>先上效果图：（<a href="https://github.com/631106979/WCLLaunchView" target="_blank" rel="external">demo地址</a>）</p>
<p><img src="http://img.blog.csdn.net/20160816151650272" alt="效果图"></p>
<a id="more"></a>
<h2 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h2><p>这个动效看起来很有特色但是实现起来是非常简单的，只需要用到<code>CALayer</code>和<code>CAShapeLayer</code>做为展示层，然后通过<code>CABasicAnimation</code>实现动画就行了~</p>
<ul>
<li>用两个<code>CALayer</code>来呈现启动的image</li>
<li>通过<code>UIBezierPath</code>和<code>CAShapeLayer</code>来画出具有曲线的CAShapeLayer</li>
<li>然后将曲线的<code>CAShapeLayer</code>做为<code>CALayer</code>的mask</li>
<li>最后通过<code>CABasicAnimation</code>做一个简单的位移动画</li>
</ul>
<h2 id="先绘制上半部分的layer"><a href="#先绘制上半部分的layer" class="headerlink" title="先绘制上半部分的layer"></a>先绘制上半部分的layer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     绘制上半部分的layer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configTopShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绘制贝斯尔曲线</span></span><br><span class="line">        <span class="keyword">let</span> topBezier:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        topBezier.moveToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width+<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.addCurveToPoint(<span class="type">CGPointMake</span>(bounds.width/<span class="number">2.0</span>+<span class="number">1</span>, bounds.height/<span class="number">2.0</span>+<span class="number">1</span>), controlPoint1: <span class="type">CGPointMake</span>(bounds.width+<span class="number">1</span>, <span class="number">0</span>+<span class="number">1</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">343.5</span>+<span class="number">1</span>, <span class="number">242.5</span>+<span class="number">1</span>))</span><br><span class="line">        topBezier.addCurveToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, bounds.height+<span class="number">2</span>), controlPoint1: <span class="type">CGPointMake</span>(<span class="number">31.5</span>+<span class="number">2</span>, <span class="number">424.5</span>+<span class="number">2</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">0</span>+<span class="number">2</span>, bounds.height+<span class="number">2</span>))</span><br><span class="line">        topBezier.addLineToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.closePath()</span><br><span class="line">        <span class="comment">//创建一个CAShapeLayer，将绘制的贝斯尔曲线的path给CAShapeLayer</span></span><br><span class="line">        <span class="keyword">let</span> topShape = <span class="type">CAShapeLayer</span>()</span><br><span class="line">        topShape.path = topBezier.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//给topLayer设置contents为启动图</span></span><br><span class="line">        topLayer.contents = launchImage?.<span class="type">CGImage</span></span><br><span class="line">        topLayer.frame = bounds</span><br><span class="line">        layer.addSublayer(topLayer)</span><br><span class="line">        <span class="comment">//将绘制后的CAShapeLayer做为topLayer的mask</span></span><br><span class="line">        topLayer.mask = topShape</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>绘制后的结果是这样的：</p>
<p><img src="http://img.blog.csdn.net/20160816153408858" alt="绘制后的结果"></p>
<h2 id="然后以同样的原理绘制下半部分的layer"><a href="#然后以同样的原理绘制下半部分的layer" class="headerlink" title="然后以同样的原理绘制下半部分的layer"></a>然后以同样的原理绘制下半部分的layer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     绘制下半部分的layer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configBottomShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绘制贝斯尔曲线</span></span><br><span class="line">        <span class="keyword">let</span> bottomBezier:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        bottomBezier.moveToPoint(<span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>))</span><br><span class="line">        bottomBezier.addCurveToPoint(<span class="type">CGPointMake</span>(bounds.width/<span class="number">2.0</span>, bounds.height/<span class="number">2.0</span>), controlPoint1: <span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">343.5</span>, <span class="number">242.5</span>))</span><br><span class="line">        bottomBezier.addCurveToPoint(<span class="type">CGPointMake</span>(<span class="number">0</span>, bounds.height), controlPoint1: <span class="type">CGPointMake</span>(<span class="number">31.5</span>, <span class="number">424.5</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">0</span>, bounds.height))</span><br><span class="line">        bottomBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width, bounds.height))</span><br><span class="line">        bottomBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>))</span><br><span class="line">        bottomBezier.closePath()</span><br><span class="line">        <span class="comment">//创建一个CAShapeLayer，将绘制的贝斯尔曲线的path给CAShapeLayer</span></span><br><span class="line">        <span class="keyword">let</span> bottomShape = <span class="type">CAShapeLayer</span>()</span><br><span class="line">        bottomShape.path = bottomBezier.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//给bottomLayer设置contents为启动图</span></span><br><span class="line">        bottomLayer.contents = launchImage?.<span class="type">CGImage</span></span><br><span class="line">        bottomLayer.frame = bounds</span><br><span class="line">        layer.addSublayer(bottomLayer)</span><br><span class="line">        <span class="comment">//将绘制后的CAShapeLayer做为bottomLayer的mask</span></span><br><span class="line">        bottomLayer.mask = bottomShape</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里注意的是画的贝斯尔曲线上半部分的要整体向下平移1到2个像素，为了防止贝斯尔曲线画曲线导致的锯齿效果，下面是下半部分完成后的效果图：</p>
<p><img src="http://img.blog.csdn.net/20160816154025336" alt="这里写图片描述"></p>
<h2 id="最后给两个layer一个位移动画"><a href="#最后给两个layer一个位移动画" class="headerlink" title="最后给两个layer一个位移动画"></a>最后给两个layer一个位移动画</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     展开的动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">starAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//创建一个CABasicAnimation作用于CALayer的anchorPoint</span></span><br><span class="line">        <span class="keyword">let</span> topAnimation = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"anchorPoint"</span>)</span><br><span class="line">        <span class="comment">//设置移动路径</span></span><br><span class="line">        topAnimation.toValue = <span class="type">NSValue</span>.<span class="keyword">init</span>(<span class="type">CGPoint</span>: <span class="type">CGPointMake</span>(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">//动画时间</span></span><br><span class="line">        topAnimation.duration = <span class="number">0.6</span></span><br><span class="line">        <span class="comment">//设置代理，方便完成动画后移除当前view</span></span><br><span class="line">        topAnimation.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="comment">//设置动画速度为匀速</span></span><br><span class="line">        topAnimation.timingFunction = <span class="type">CAMediaTimingFunction</span>.<span class="keyword">init</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">        <span class="comment">//设置动画结束后不移除点，保持移动后的位置</span></span><br><span class="line">        topAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        topAnimation.fillMode = kCAFillModeForwards</span><br><span class="line">        topLayer.addAnimation(topAnimation, forKey: <span class="string">"topAnimation"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个CABasicAnimation作用于CALayer的anchorPoint</span></span><br><span class="line">        <span class="keyword">let</span> bottomAnimation = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"anchorPoint"</span>)</span><br><span class="line">        <span class="comment">//设置移动路径</span></span><br><span class="line">        bottomAnimation.toValue = <span class="type">NSValue</span>.<span class="keyword">init</span>(<span class="type">CGPoint</span>: <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment">//动画时间</span></span><br><span class="line">        bottomAnimation.duration = <span class="number">0.6</span></span><br><span class="line">        <span class="comment">//设置动画速度为匀速</span></span><br><span class="line">        bottomAnimation.timingFunction = <span class="type">CAMediaTimingFunction</span>.<span class="keyword">init</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">        <span class="comment">//设置动画结束后不移除点，保持移动后的位置</span></span><br><span class="line">        bottomAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        bottomAnimation.fillMode = kCAFillModeForwards</span><br><span class="line">        bottomLayer.addAnimation(bottomAnimation, forKey: <span class="string">"topAnimation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span><br><span class="line">     动画完成后移除当前view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStop</span><span class="params">(anim: CAAnimation, finished flag: Bool)</span></span>           </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里为了方便观察，我将动画时间变长了，下面是完成后的效果图：</p>
<p><img src="http://img.blog.csdn.net/20160816154817167" alt="这里写图片描述"></p>
<blockquote>
<p>到这里这个动效就完成的差不多了，希望大家能学到东西，如果大家有更好的实现办法也可以给我提意见，我学习学习，谢谢大家观看，另外附加<a href="https://github.com/631106979/WCLLaunchView" target="_blank" rel="external">demo地址</a>，喜欢的可以关注一下</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 08月 16日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在写一个相册的demo，偶尔看到了美拍的相机过载动画觉得很有意思，就想在我的相册demo中加入一个这种特效，下面把我的想法和实现过程给大家分享一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先上效果图：（&lt;a href=&quot;https://github.com/631106979/WCLLaunchView&quot;&gt;demo地址&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160816151650272&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS动画" scheme="http://imwcl.com/tags/iOS%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发进阶 - 隐藏UINavigationBar的小技巧</title>
    <link href="http://imwcl.com/2016/07/28/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E9%9A%90%E8%97%8FUINavigationBar%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://imwcl.com/2016/07/28/iOS开发进阶-隐藏UINavigationBar的小技巧/</id>
    <published>2016-07-28T15:45:24.000Z</published>
    <updated>2016-09-17T11:57:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在开发过程中，为让屏幕显示更多的内容，有时候设计师会让我们隐藏UINavigationBar，通过浏览大神们写的文章和工作上用到的，总结了一下隐藏UINavigationBar的三种效果，用swift写了一份，供学习使用~~~</p>
</blockquote>
<p><a href="https://github.com/631106979/WCLHideNavBar" target="_blank" rel="external">demo地址</a></p>
<h3 id="第一种让UINavigationBar透明渐变消失"><a href="#第一种让UINavigationBar透明渐变消失" class="headerlink" title="第一种让UINavigationBar透明渐变消失"></a>第一种让UINavigationBar透明渐变消失</h3><p><img src="http://img.blog.csdn.net/20160728230823825" alt="第一种渐变"></p>
<p>思路是写一个扩展，先给UINavigationBar的backGroudImage设置为空，然后在UINavigationBar上通过runtime插入一个UIView，然后监听滚动事件，调整这个UIView的透明度来达到这个效果，下面贴代码：<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line"> 给UINavigationBar添加背景色，用runtime插入一个backView</span><br><span class="line"> </span><br><span class="line"> - parameter color: backView的背景颜色</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclBackGroundColor</span><span class="params">(color:UIColor)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wclBackGroundColorView = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView) <span class="keyword">as</span>? <span class="type">UIView</span></span><br><span class="line">    <span class="keyword">if</span> wclBackGroundColorView == <span class="literal">nil</span> &#123;</span><br><span class="line">        setBackgroundImage(<span class="type">UIImage</span>.<span class="keyword">init</span>(), forBarMetrics: .<span class="type">Default</span>)</span><br><span class="line">        shadowImage = <span class="type">UIImage</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">let</span> backView = <span class="type">UIView</span>.<span class="keyword">init</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, -<span class="number">20</span>, bounds.width, bounds.height+<span class="number">20</span>))</span><br><span class="line">        backView.backgroundColor = color</span><br><span class="line">        backView.userInteractionEnabled = <span class="literal">false</span></span><br><span class="line">        backView.autoresizingMask = [.<span class="type">FlexibleHeight</span>, .<span class="type">FlexibleWidth</span>]</span><br><span class="line">        insertSubview(backView, atIndex: <span class="number">0</span>)</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView, backView, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wclBackGroundColorView!.backgroundColor = color</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 设置backView的透明度</span><br><span class="line"> </span><br><span class="line"> - parameter alpha: backView的透明度</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclBackViewAlpha</span><span class="params">(alpha:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wclBackGroundColorView = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView) <span class="keyword">as</span>? <span class="type">UIView</span></span><br><span class="line">    wclBackGroundColorView?.alpha = alpha</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变"><a href="#第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变" class="headerlink" title="第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变"></a>第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变</h3><p><img src="http://img.blog.csdn.net/20160728231529840" alt="第二种效果"></p>
<p>主要思路也是通过扩展实现，通过改变UINavigationBar的transform来达到位移的效果，然后通过KVC来获取到UINavigationBar上的subViews来达到它的子view的透明渐变效果，下面上代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 向上隐藏NavigationBar</span><br><span class="line"> </span><br><span class="line"> - parameter progress: 隐藏的进度，默认是0，范围0~1</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclNavBarHide</span><span class="params">(progress:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(progress)</span><br><span class="line">    <span class="keyword">if</span> progress &gt; <span class="number">0</span> &#123;</span><br><span class="line">        transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -bounds.height*progress)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> leftViews = valueForKey(<span class="string">"_leftViews"</span>) <span class="keyword">as</span>? [<span class="type">UIView</span>] &#123;</span><br><span class="line">        <span class="keyword">for</span> leftView <span class="keyword">in</span> leftViews &#123;</span><br><span class="line">            leftView.alpha = <span class="number">1</span> - progress</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> rightViews = valueForKey(<span class="string">"_rightViews"</span>) <span class="keyword">as</span>? [<span class="type">UIView</span>] &#123;</span><br><span class="line">        <span class="keyword">for</span> rightView <span class="keyword">in</span> rightViews &#123;</span><br><span class="line">            rightView.alpha = <span class="number">1</span> - progress</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> titleView = valueForKey(<span class="string">"_titleView"</span>) <span class="keyword">as</span>? <span class="type">UIView</span> &#123;</span><br><span class="line">        titleView.alpha = <span class="number">1</span> - progress</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三种UINavigationBar和window的状态栏一起向上位移"><a href="#第三种UINavigationBar和window的状态栏一起向上位移" class="headerlink" title="第三种UINavigationBar和window的状态栏一起向上位移"></a>第三种UINavigationBar和window的状态栏一起向上位移</h3><p><img src="http://img.blog.csdn.net/20160728232320140" alt="第三种"></p>
<p>主要思路也是通过扩展实现，通过改变UINavigationBar的transform来达到位移的效果，然后通过KVC来获取window的状态栏一起进行偏移，下面上代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 向上隐藏NavigationBar和StateView</span><br><span class="line"> </span><br><span class="line"> - parameter progress: 隐藏的进度，默认是0，范围0~1</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclNavBarAndStateHide</span><span class="params">(progress:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> stateView = <span class="type">UIApplication</span>.sharedApplication().valueForKey(<span class="string">"statusBarWindow"</span>) <span class="keyword">as</span>? <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> progress &gt; <span class="number">0</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -(bounds.height+<span class="number">20</span>)*progress)</span><br><span class="line">            stateView.transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -(bounds.height+<span class="number">20</span>)*progress)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            stateView.transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/631106979/WCLHideNavBar" target="_blank" rel="external">demo地址</a></p>
<p><a href="https://github.com/ltebean/LTNavigationBar" target="_blank" rel="external">参考文档</a></p>
<blockquote>
<p>以上就是我总结的关于三种隐藏UINavigationBar的三种发送，欢迎大家一起交流，如果有更好的可以一起学习</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 07月 28日</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在开发过程中，为让屏幕显示更多的内容，有时候设计师会让我们隐藏UINavigationBar，通过浏览大神们写的文章和工作上用到的，总结了一下隐藏UINavigationBar的三种效果，用swift写了一份，供学习使用~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/631106979/WCLHideNavBar&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;第一种让UINavigationBar透明渐变消失&quot;&gt;&lt;a href=&quot;#第一种让UINavigationBar透明渐变消失&quot; class=&quot;headerlink&quot; title=&quot;第一种让UINavigationBar透明渐变消失&quot;&gt;&lt;/a&gt;第一种让UINavigationBar透明渐变消失&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160728230823825&quot; alt=&quot;第一种渐变&quot;&gt;&lt;/p&gt;
&lt;p&gt;思路是写一个扩展，先给UINavigationBar的backGroudImage设置为空，然后在UINavigationBar上通过runtime插入一个UIView，然后监听滚动事件，调整这个UIView的透明度来达到这个效果，下面贴代码：&lt;br&gt;
    
    </summary>
    
      <category term="iOS开发进阶" scheme="http://imwcl.com/categories/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://imwcl.com/tags/iOS/"/>
    
  </entry>
  
</feed>
