<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 使用Carthage管理iOS第三方库]]></title>
      <url>http://imwcl.com/2016/09/20/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8Carthage%E7%AE%A1%E7%90%86iOS%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160920225432049" alt=""></p>
<blockquote>
<p>最近在研究<strong>Swift</strong>，一不小心发现一个好的的管理iOS第三方库<strong>Carthage</strong>，就跟第一次使用<strong>CocoaPods</strong>时一样兴奋不已，在研究了大半天后终于能用了，使用起来还是很方便的，比起<strong>CocoaPods</strong>有不足也有优点，两个配合起来用也是很爽的^ - ^</p>
</blockquote>
<a id="more"></a>
<h1 id="初识Carthage"><a href="#初识Carthage" class="headerlink" title="初识Carthage"></a>初识<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a></h1><p>最近在用<strong>Swift3.0</strong>做项目，想导入一些支持<strong>Swift3.0</strong>的第三方库来使用，就想到<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>，看<strong>README</strong>时发现了一个新的名词<strong>Carthage</strong>，What？，这是个什么东西，居然也可以用它来管理第三方库，之前都没见到过，赶紧百度了一下补充了下知识：</p>
<p><strong>Carthage</strong>：迦太基（地中海地区古城），好吧这是百度百科的解释，至于为什么用这个单词，我也不太清楚，可能比较屌吧，看下图你就知道它是用来干什么的了：</p>
<p><img src="http://img.blog.csdn.net/20160920212737795" alt="这里写图片描述"></p>
<blockquote>
<p>Carthage的目标是用最简单的方式来管理Cocoa第三方框架</p>
</blockquote>
<p>是的，你没看错，它可以用来管理第三方库<strong><a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a></strong>，然后查了一下，还有很多第三方库都可以用它来管理，跟<strong>CocoaPods</strong>一样可以用来管理第三方库，看了一下它的崛起时间大概是iOS8之后<strong>Swift</strong>出来的时候，与现在流行的 <strong>CocoaPods</strong> 不同，它是一个去中心化的解决方案。<strong>CocoaPods</strong>的方法更易于使用，但<strong>Carthage</strong>更灵活并且是非侵入性的。</p>
<p> 大家都知道<strong>Swift</strong>是支持动态库的，所以<strong>Carthage</strong>应势而生，它没有总项目的列表，这能够减少维护工作并且避免任何中心化带来的问题）。不过，这样也有一些缺点，就是想修改第三方库源码的话很费劲，还需要重新编译打包。</p>
<h2 id="安装和使用Carthage"><a href="#安装和使用Carthage" class="headerlink" title="安装和使用Carthage"></a>安装和使用Carthage</h2><p>首先到<strong>github</strong>上Download或者Clone Git 或者使用<strong>HomeBrew</strong>（没有安装的可以自行百度去装一个）安装~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update #先更新</span><br><span class="line">brew install carthage #安装Carthage</span><br></pre></td></tr></table></figure>
<p>当你安装好Carthage后，在终端执行来判断是否安装成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage version</span><br></pre></td></tr></table></figure>
<p>即可看到当前的<strong>Carthage</strong>版本, 当我写这篇文章的时候，<strong>Carthage</strong>的版本为0.18（还是很年轻的嘛） 。</p>
<p>现在，你已经安装好了<strong>Carthage</strong>，接下来就是在你的项目中使用carthage了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Cartfile #创建一个叫Cartfile的文件</span><br></pre></td></tr></table></figure>
<p>输入你想要编译成Framework的<strong>Swift</strong>第三方库，比如说<strong>SnapKit</strong>和<strong>Alamofire</strong>，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">github &quot;Alamofire/Alamofire&quot; ~&gt; 4.0  #支持Swift3.0</span><br><span class="line">github &quot;SnapKit/SnapKit&quot; ~&gt; 3.0 #支持Swift3.0</span><br></pre></td></tr></table></figure>
<p>github代表源，而后面的就是用户名和版本库的名字，而”~&gt;” 后面是版本号哈！</p>
<p>保存退出，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage update --platform iOS #因为是打包iOS的所以后面加iOS，有的库支持mac、watch的话会打几个包</span><br></pre></td></tr></table></figure>
<p>之后会发现在跟目录下多出了<strong>Carthage</strong>文件夹和<strong>Cartfile.resolved</strong>文件。进入<strong>Carthage/Checkouts</strong>下可以看到刚刚得到的<strong>Alamofire</strong>和<strong>SnapKit</strong>，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160920220309400" alt="这里写图片描述">现在打开你的项目，点击<strong>project</strong>，选择<strong>target</strong>, 再选择上方的<strong>General</strong>，将需要的<strong>framework</strong>文件拖到 <strong>Linked frameworks and Binaries</strong>内：</p>
<p><img src="http://img.blog.csdn.net/20160920220544981" alt="这里写图片描述"></p>
<p>然后这是很重要的一步，点击<strong>Build Phrase tab</strong>选项，添加相应的<strong>run script</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/carthage copy-frameworks</span><br><span class="line">$(SRCROOT)/Carthage/Build/iOS/你的framework</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20160920220906190" alt="这里写图片描述"></p>
<p>然后就可以去项目里面<code>import</code>你得第三方库了~~可以愉快的使用了，不过有一点要吐槽一下<code>`build</code>的速度真是有点慢- . -</p>
<h1 id="CocoaPods的优势与劣势"><a href="#CocoaPods的优势与劣势" class="headerlink" title="CocoaPods的优势与劣势"></a>CocoaPods的优势与劣势</h1><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>使用方便，除编写 Podfile 以外其他几乎都是自动完成；</li>
<li>软件包数量多，主流支持；</li>
<li>支持 iOS 8 Framework，当然也支持旧的静态编译；</li>
<li>开发者使用比较简单，但是如果创建兼容 CocoaPods  的库，就会相对繁琐一些（尽管有了命令行）~</li>
</ul>
<h2 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>每次clean后都得重新编译，编译比较耗时，Archive也会变慢；</li>
<li>每次更新环境都需要连接到中心仓库，比较耗时~</li>
</ul>
<h1 id="Carthage的优势与劣势"><a href="#Carthage的优势与劣势" class="headerlink" title="Carthage的优势与劣势"></a>Carthage的优势与劣势</h1><h2 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h2><ul>
<li>build一次后就能在项目里面使用，增加编译速度；</li>
<li>可以与<strong>CocoaPods</strong>无缝集成；</li>
<li>它是去中心化的，没有中心服务器，这意味着每次配置和更新环境，只会去更新具体的库，而不会有一个向中心服务器获取最新库的索引这么个过程，如此一来，又省了很多时间；</li>
<li>不会影响你的项目配置的，相对<strong>CocoaPods</strong>而言更加独立，Carthage 使用的是一种非侵入性的哲学；</li>
</ul>
<h2 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h2><ul>
<li>库依然不如 CocoaPods 丰富：尽管很多库不需要声明并改造就直接可以被 Carthage 用，但依然有大量 CocoaPods 能用的库不支持，我相信时间能解决这个问题；</li>
<li>只支持 Framework，所以是 iOS 8 Only 了，随着时间推移，这个也不会是问题；</li>
<li>无法在 Xcode 里定位到源码：如果你在写代码过程中，想跳转到一个第三方库去看具体的实现，这是无法办到的，Carthage 的配置只能让你看到一个库的头文件~</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我觉得不管怎样，好不好用，做为iOS程序员我们都应该去尝试的了解一下它，通过它去学到更多的东西，至于什么第三方库用<strong>CocoaPods</strong>，什么去用<strong>Carthage</strong>，我觉得一些比较稳定大的库可以用<strong>Carthage</strong>，而一些变动比较大，自己还有可能去修改的库我们肯定首选<strong>CocoaPods</strong>。最后希望大家看到这篇博客能学到东西，大家有问题可以提出来，谢谢大家的阅读~~</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.jianshu.com/p/5ccde5f22a17" target="_blank" rel="external">http://www.jianshu.com/p/5ccde5f22a17</a></p>
<p><a href="https://imtx.me/archives/1939.html" target="_blank" rel="external">https://imtx.me/archives/1939.html</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 20日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS基于XMPP实现即时通讯之一、环境的搭建]]></title>
      <url>http://imwcl.com/2016/09/16/iOS%E5%9F%BA%E4%BA%8EXMPP%E5%AE%9E%E7%8E%B0%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E4%B9%8B%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用XMPP已经有一段时间了，但是一直都没深入研究过，只是使用SDK做一些简单的操作，看了许多大神的博客，自己总结一下，准备写一系列关于XMPP的使用博客，以便于自己更加深入学习~</p>
</blockquote>
<h1 id="IM协议及服务器选型"><a href="#IM协议及服务器选型" class="headerlink" title="IM协议及服务器选型"></a>IM协议及服务器选型</h1><p><a href="http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/" target="_blank" rel="external">http://liudanking.me/arch/xmpp%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%89%E5%9E%8B/</a><br>协议选型：<strong>XMPP</strong>已经成为标准的IM协议。<strong>XMPP</strong>官网：<a href="http://XMPP.org/" target="_blank" rel="external">http://XMPP.org/</a><br>服务器型：使用广泛的是ejabberd，jabberd 2.x， Openfire，Tigase。从编程语言角度来看主要是JAVA和Erlang。JAVA语言的优势是类库完备，容易招人。Erlang的优势是hot code swap，live console， 高并发。而且ejabberd是对XMPP协议支持最好、实现最为全面的server。因此企业在不考虑独立开发服务器的情况下，初期选型基本建议采用ejabberd。</p>
<p>本文我们主要实践iOS端流程，不考虑太多服务器实现，因为Openfire易安装，插件功能丰富，我们使用<strong>Openfire</strong></p>
<a id="more"></a>
<h1 id="MAC上搭建MySQL"><a href="#MAC上搭建MySQL" class="headerlink" title="MAC上搭建MySQL"></a>MAC上搭建MySQL</h1><p>因为服务器需要数据库支撑，所以我们在搭建Openfire前要先搭建数据库。</p>
<h2 id="下载MySQL安装包"><a href="#下载MySQL安装包" class="headerlink" title="下载MySQL安装包"></a>下载MySQL安装包</h2><p>我们先去<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external"><strong>MySQL官网</strong></a>去下载<strong>MySQL</strong>的安装包，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160916132616906" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160916132635422" alt="这里写图片描述"></p>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>下载完后，开始安装<strong>MySQL</strong>如下图：</p>
<p><img src="http://img.blog.csdn.net/20160916140022624" alt="这里写图片描述"></p>
<p><strong>注意事项：</strong>因为安装完<strong>MySQL</strong>后它会自动给你生成一个密码，所以你要保存好这个密码，后面修改密码的时候会用到，如下图所示：</p>
<p><img src="http://img.blog.csdn.net/20160916140241828" alt="这里写图片描述"></p>
<h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><p>首先在设置里面找到MySQL的启动按钮，启动MySQL服务，如下图：</p>
<p><img src="http://img.blog.csdn.net/20160916141553080" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160916141613117" alt="这里写图片描述"></p>
<h3 id="定义MySQL别名"><a href="#定义MySQL别名" class="headerlink" title="定义MySQL别名"></a>定义MySQL别名</h3><p>然后需要将<strong>MySQL</strong>的指令重新定义一下，因为<strong>MySQL</strong>的指令集在<code>/usr/local/mysql/bin/mysql</code>路径下，需要执行一下命令行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 定义mysql别名</span><br><span class="line">alias mysql=/usr/local/mysql/bin/mysql</span><br><span class="line"># mysqladmin</span><br><span class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladmin</span><br></pre></td></tr></table></figure>
<h3 id="修改MySQL账户密码"><a href="#修改MySQL账户密码" class="headerlink" title="修改MySQL账户密码"></a>修改MySQL账户密码</h3><p>之前安装完成后系统给我们了一个默认的密码，因为那个密码很繁琐不容易记住，所以我们需要重新设置一个密码，我们先输入如下指令设置新密码，”newpassword”为你要设置的新密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root -p password &quot;newpassword&quot;</span><br><span class="line">#然后 Enter password: 【输入原来的密码】</span><br></pre></td></tr></table></figure>
<p>如下图所示表示密码修改成功：</p>
<p><img src="http://img.blog.csdn.net/20160916143123858" alt="这里写图片描述"></p>
<p>完成后以后root账户需要密码就用你新设置的密码就行了~</p>
<h3 id="连接数据库，创建Openfire数据库"><a href="#连接数据库，创建Openfire数据库" class="headerlink" title="连接数据库，创建Openfire数据库"></a>连接数据库，创建Openfire数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"># 创建Openfire数据库</span><br><span class="line">create database openfire;</span><br></pre></td></tr></table></figure>
<h2 id="完全卸载MySQL"><a href="#完全卸载MySQL" class="headerlink" title="完全卸载MySQL"></a>完全卸载MySQL</h2><p>在系统内存不够时有时候我们会需要删除掉<strong>MySQL</strong>，一下就是删除<strong>MySQL</strong>的方法：</p>
<p>从 <strong>Yosemite</strong> 系统开始，<code>/etc/hostconfig</code> 这个文件已经移除，所以 <strong>Yosemite</strong> 后的系统可以忽略下面的命令</p>
<p><code>sudo nano /etc/hostconfig</code>  </p>
<p>然后以下是终端执行代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/local/mysql  </span><br><span class="line">sudo rm -rf /usr/local/mysql*  </span><br><span class="line">sudo rm -rf /Library/StartupItems/MySQLCOM  </span><br><span class="line">sudo rm -rf /Library/PreferencePanes/My*  </span><br><span class="line">sudo nano /etc/hostconfig     (复制前面部分回车，然后删掉这一行: MYSQLCOM=-YES-，control+O回车保存，control+X退出编辑界面)  </span><br><span class="line">sudo rm -rf ~/Library/PreferencePanes/My*  </span><br><span class="line">sudo rm -rf /Library/Receipts/mysql*  </span><br><span class="line">sudo rm -rf /Library/Receipts/MySQL*  </span><br><span class="line">sudo rm -rf /var/db/receipts/com.mysql.*</span><br></pre></td></tr></table></figure>
<h1 id="MAC上搭建Openfire"><a href="#MAC上搭建Openfire" class="headerlink" title="MAC上搭建Openfire"></a>MAC上搭建Openfire</h1><h2 id="下载并安装openfire"><a href="#下载并安装openfire" class="headerlink" title="下载并安装openfire"></a>下载并安装openfire</h2><p>去<a href="http://www.igniterealtime.org/downloads/index.jsp" target="_blank" rel="external"><strong>openfire</strong>官网</a>上去下载相应的包：</p>
<p><img src="http://img.blog.csdn.net/20160916160948387" alt="这里写图片描述"></p>
<p>双击进行傻瓜式的安装就好了，安装完毕后会在系统偏好设置里面找到<strong>openfire</strong>的启动器</p>
<p><img src="http://img.blog.csdn.net/20160916193304787" alt=""></p>
<p>点击<strong>Openfire</strong>会进入启动页面</p>
<p><img src="http://img.blog.csdn.net/20160916193312553" alt=""></p>
<p>点击<strong>Open Admin Console</strong>进入浏览器设置页面，语言选择简体中文</p>
<p><img src="http://img.blog.csdn.net/20160916193322506" alt=""></p>
<p>接着设置服务器的名字</p>
<p><img src="http://img.blog.csdn.net/20160916193331803" alt=""></p>
<p>链接数据库</p>
<blockquote>
<p>注意里面的用户名和密码是你数据库的用户名和密码，用户名一般是root，密码是你之前重新设置的密码~~~</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193340006" alt=""></p>
<p>然后一直继续就OK了，最后需要我们登录到<strong>openfire</strong></p>
<blockquote>
<p>密码就是之前设置的密码</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193348913" alt=""></p>
<h2 id="openfire启动失败解决办法"><a href="#openfire启动失败解决办法" class="headerlink" title="openfire启动失败解决办法"></a>openfire启动失败解决办法</h2><blockquote>
<p>当你发现你的电脑上的<strong>openfire</strong>无论你是重新安装还是重启都无法启动的情况下你可以按照我下面写的那些终端指令来启动你的<strong>openfire</strong>不用再去重新做你的系统了.</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160916193404522" alt=""></p>
<p>一般你发现你的<strong>openfire</strong>打开出现这样的窗口后你就可以想到你的<strong>openfire</strong>出问题了,极个别的时候你可以通过重新安装来解决.</p>
<p>如果大家的问题重新安装后没有解决那就试下我下面的方法.</p>
<p>先打开自己电脑上的终端然后输入以下指令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取权限</span><br><span class="line">sudo chmod -R 777 /usr/local/openfire/bin</span><br><span class="line">cd /usr/local/openfire/bin</span><br><span class="line">export JAVA_HOME=`/usr/libexec/java_home` # 记住这里不是单引号而是英文下数字1左边的按键.</span><br><span class="line">echo $JAVA_HOME</span><br><span class="line"># 终端上打印的内容 /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home</span><br><span class="line">cd /usr/local/openfire/bin</span><br><span class="line">./openfire.sh</span><br><span class="line"># 终端上打印的内容</span><br><span class="line"># Openfire 4.0.3 [Sep 16, 2016 4:19:21 PM]</span><br><span class="line"># Admin console listening at http://wangchongleidemacbook-air.local:9090</span><br></pre></td></tr></table></figure>
<p>一般你输入完成这些指令后你再打开你的openfire就会发现这样的情况.</p>
<p><img src="http://img.blog.csdn.net/20160916193412210" alt=""></p>
<h2 id="安装openfire后admin无法登录管理控制平台"><a href="#安装openfire后admin无法登录管理控制平台" class="headerlink" title="安装openfire后admin无法登录管理控制平台"></a>安装openfire后admin无法登录管理控制平台</h2><p><img src="http://img.blog.csdn.net/20160916193422991" alt=""></p>
<p>解决方案如下：</p>
<ul>
<li>使用Mysql查看工具进入数据库，进入表“ofuser”，将该表清空，然后执行SQL 语句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO ofUser (username, plainPassword, name, email, creationDate, modificationDate) VALUES (&apos;admin&apos;, &apos;admin&apos;, &apos;Administrator&apos;, &apos;admin@example.com&apos;, &apos;0&apos;, &apos;0&apos;);</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭openfire服务，就是从其控制台stop然后再start，再用用户名：admin,密码：admin登录即可.</li>
</ul>
<h2 id="彻底删除openfire服务器的"><a href="#彻底删除openfire服务器的" class="headerlink" title="彻底删除openfire服务器的"></a>彻底删除openfire服务器的</h2><p>首先,确保你已经关掉了openfire<br>打开终端 (在应用程序–&gt;实用工具–&gt;)<br>输入以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /Library/PreferencePanes/Openfire.prefPane</span><br><span class="line">sudo rm -rf /usr/local/openfire</span><br><span class="line">sudo rm -rf /Library/LaunchDaemons/org.jivesoftware.openfire.plist</span><br></pre></td></tr></table></figure>
<p>第一条会让你输入管理员密码,尽管你输入的时候,终端不会显示,不必担心,正确输入后按回车,它就执行了。<br>三条命令以后，<strong>openfire</strong>就彻底消失了.但是需要重启一下系统偏设置。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置过程还是比较繁琐的，一共需要好几个步骤，需要装的有<strong>MySQL</strong>、<strong>JAVA环境</strong>和<strong>openfire</strong>，里面有一步没做好都没法使用，自己完整配置下来也花了很长时间，大家如果有什么问题可以留言问我，谢谢大家的阅读~~</p>
<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p><a href="http://www.cnblogs.com/xiaodao/archive/2013/04/04/2999426.html" target="_blank" rel="external">http://www.cnblogs.com/xiaodao/archive/2013/04/04/2999426.html</a></p>
<p><a href="http://www.cnblogs.com/xiaodao/archive/2013/04/05/3000554.html" target="_blank" rel="external">http://www.cnblogs.com/xiaodao/archive/2013/04/05/3000554.html</a></p>
<p><a href="http://www.jianshu.com/p/5d88fe201c71" target="_blank" rel="external">http://www.jianshu.com/p/5d88fe201c71</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 16日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS动画进阶 - 手摸手教你写 Slack 的 Loading 动画]]></title>
      <url>http://imwcl.com/2016/09/08/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E6%89%8B%E6%91%B8%E6%89%8B%E6%95%99%E4%BD%A0%E5%86%99-Slack-%E7%9A%84-Loading-%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>前几天看了一篇关于动画的博客叫<a href="http://www.diycode.cc/topics/240" target="_blank" rel="external">手摸手教你写 Slack 的 Loading 动画</a>，看着挺炫，但是是安卓版的，寻思的着仿造着写一篇iOS版的，下面是我写这个动画的分解~</p>
</blockquote>
<p>老规矩先上图和<a href="https://github.com/631106979/WCLLoadingView" target="_blank" rel="external">demo地址</a>：</p>
<p><img src="http://img.blog.csdn.net/20160908162326530" alt="这里写图片描述"></p>
<p>刚看到这个动画的时候，脑海里出现了两个方案，一种是通过<code>drawRect</code>画出来，然后配合<code>CADisplayLink</code>不停的绘制线的样式；第二种是通过<code>CAShapeLayer</code>配合<code>CAAnimation</code>来实现动画效果。再三考虑觉得使用后者，因为前者需要计算很多，比较复杂，而且经过测试前者相比于后者消耗更多的CPU，下面将我的思路写下来：</p>
<a id="more"></a>
<h1 id="相关配置和初始化方法"><a href="#相关配置和初始化方法" class="headerlink" title="相关配置和初始化方法"></a>相关配置和初始化方法</h1><p>在写这个动画之前，我们把先需要的属性写好，比如线条的粗细，动画的时间等等，下面是相关的配置和初识化方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线的宽度</span></span><br><span class="line"><span class="keyword">var</span> lineWidth:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//线的长度</span></span><br><span class="line"><span class="keyword">var</span> lineLength:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//边距</span></span><br><span class="line"><span class="keyword">var</span> margin:<span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line"><span class="comment">//动画时间</span></span><br><span class="line"><span class="keyword">var</span> duration:<span class="type">Double</span> = <span class="number">2</span></span><br><span class="line"><span class="comment">//动画的间隔时间</span></span><br><span class="line"><span class="keyword">var</span> interval:<span class="type">Double</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//四条线的颜色</span></span><br><span class="line"><span class="keyword">var</span> colors:[<span class="type">UIColor</span>] = [<span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#9DD4E9"</span>) , <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#F5BD58"</span>),  <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#FF317E"</span>) , <span class="type">UIColor</span>.<span class="keyword">init</span>(rgba: <span class="string">"#6FC9B5"</span>)]</span><br><span class="line"><span class="comment">//动画的状态</span></span><br><span class="line"><span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> status:<span class="type">AnimationStatus</span> = .<span class="type">Normal</span></span><br><span class="line"><span class="comment">//四条线</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> lines:[<span class="type">CAShapeLayer</span>] = []</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AnimationStatus</span> </span>&#123;</span><br><span class="line">    <span class="comment">//普通状态</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Normal</span></span><br><span class="line">    <span class="comment">//动画中</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Animating</span></span><br><span class="line">    <span class="comment">//暂停</span></span><br><span class="line">    <span class="keyword">case</span> pause</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//MARK: Initial Methods</span></span><br><span class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(fram: <span class="type">CGRect</span> , colors: [<span class="type">UIColor</span>]) &#123;</span><br><span class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">    <span class="keyword">self</span>.frame = frame</span><br><span class="line">    <span class="keyword">self</span>.colors = colors</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">    config()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">config</span><span class="params">()</span></span> &#123;</span><br><span class="line">    lineLength = <span class="built_in">max</span>(frame.width, frame.height)</span><br><span class="line">    lineWidth  = lineLength/<span class="number">6.0</span></span><br><span class="line">    margin     = lineLength/<span class="number">4.5</span> + lineWidth/<span class="number">2</span></span><br><span class="line">    drawLineShapeLayer()</span><br><span class="line">    transform = <span class="type">CGAffineTransformRotate</span>(<span class="type">CGAffineTransformIdentity</span>, angle(-<span class="number">30</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="通过CAShapeLayer绘制线条"><a href="#通过CAShapeLayer绘制线条" class="headerlink" title="通过CAShapeLayer绘制线条"></a>通过CAShapeLayer绘制线条</h1><p>看到这个线条我就想到了用<code>CAShapeLayer</code>来处理，因为<code>CAShapeLayer</code>完全可以实现这种效果，而且它的<code>strokeEnd</code>的属性可以用来实现线条的长度变化的动画，下面上绘制四根线条的代码：</p>
<p><img src="http://img.blog.csdn.net/20160908172029899" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 绘制线</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     绘制四条线</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">drawLineShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//开始点</span></span><br><span class="line">        <span class="keyword">let</span> startPoint = [point(lineWidth/<span class="number">2</span>, y: margin),</span><br><span class="line">                          point(lineLength - margin, y: lineWidth/<span class="number">2</span>),</span><br><span class="line">                          point(lineLength - lineWidth/<span class="number">2</span>, y: lineLength - margin),</span><br><span class="line">                          point(margin, y: lineLength - lineWidth/<span class="number">2</span>)]</span><br><span class="line">        <span class="comment">//结束点</span></span><br><span class="line">        <span class="keyword">let</span> endPoint   = [point(lineLength - lineWidth/<span class="number">2</span>, y: margin) ,</span><br><span class="line">                         point(lineLength - margin, y: lineLength - lineWidth/<span class="number">2</span>) ,</span><br><span class="line">                         point(lineWidth/<span class="number">2</span>, y: lineLength - margin) ,</span><br><span class="line">                         point(margin, y: lineWidth/<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> line:<span class="type">CAShapeLayer</span> = <span class="type">CAShapeLayer</span>()</span><br><span class="line">            line.lineWidth   = lineWidth</span><br><span class="line">            line.lineCap     = kCALineCapRound</span><br><span class="line">            line.opacity     = <span class="number">0.8</span></span><br><span class="line">            line.strokeColor = colors[i].<span class="type">CGColor</span></span><br><span class="line">            line.path        = getLinePath(startPoint[i], endPoint: endPoint[i]).<span class="type">CGPath</span></span><br><span class="line">            layer.addSublayer(line)</span><br><span class="line">            lines.append(line)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     获取线的路径</span><br><span class="line">     </span><br><span class="line">     - parameter startPoint: 开始点</span><br><span class="line">     - parameter endPoint:   结束点</span><br><span class="line">     </span><br><span class="line">     - returns: 线的路径</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getLinePath</span><span class="params">(startPoint: CGPoint, endPoint: CGPoint)</span></span> -&gt; <span class="type">UIBezierPath</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line">        path.moveToPoint(startPoint)</span><br><span class="line">        path.addLineToPoint(endPoint)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">(x:CGFloat , y:CGFloat)</span></span> -&gt; <span class="type">CGPoint</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGPointMake</span>(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">angle</span><span class="params">(angle: Double)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGFloat</span>(angle *  (<span class="type">M_PI</span>/<span class="number">180</span>))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行完后就跟上图一样的效果了~~~</p>
<h1 id="动画分解"><a href="#动画分解" class="headerlink" title="动画分解"></a>动画分解</h1><p>经过分析，可以将动画分为四个步骤：</p>
<ul>
<li>画布的旋转动画，旋转两圈</li>
<li>线条由长变短的动画，更画布选择的动画一起执行，旋转一圈的时候结束</li>
<li>线条的位移动画，线条逐渐向中间靠拢，再画笔旋转完一圈的时候执行，两圈的时候结束</li>
<li>线条由短变长的动画，画布旋转完两圈的时候执行</li>
</ul>
<h2 id="第一步画布旋转动画"><a href="#第一步画布旋转动画" class="headerlink" title="第一步画布旋转动画"></a>第一步画布旋转动画</h2><p>这里我们使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于画布的<code>transform.rotation.z</code>，以z轴为目标进行旋转，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908173322904" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: 动画步骤</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     旋转的动画，旋转两圈</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">angleAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> angleAnimation                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"transform.rotation.z"</span>)</span><br><span class="line">        angleAnimation.fromValue           = angle(-<span class="number">30</span>)</span><br><span class="line">        angleAnimation.toValue             = angle(<span class="number">690</span>)</span><br><span class="line">        angleAnimation.fillMode            = kCAFillModeForwards</span><br><span class="line">        angleAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        angleAnimation.duration            = duration</span><br><span class="line">        angleAnimation.delegate            = <span class="keyword">self</span></span><br><span class="line">        layer.addAnimation(angleAnimation, forKey: <span class="string">"angleAnimation"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二步线条由长变短的动画"><a href="#第二步线条由长变短的动画" class="headerlink" title="第二步线条由长变短的动画"></a>第二步线条由长变短的动画</h2><p>这里我们还是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>strokeEnd</code>属性，让<code>strokeEnd</code>从1到0来实现线条长短的动画，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908173750890" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第一步动画，线长从长变短</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationOne</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lineAnimationOne                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"strokeEnd"</span>)</span><br><span class="line">        lineAnimationOne.duration            = duration/<span class="number">2</span></span><br><span class="line">        lineAnimationOne.fillMode            = kCAFillModeForwards</span><br><span class="line">        lineAnimationOne.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        lineAnimationOne.fromValue           = <span class="number">1</span></span><br><span class="line">        lineAnimationOne.toValue             = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationOne, forKey: <span class="string">"lineAnimationOne"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第三步线条的位移动画"><a href="#第三步线条的位移动画" class="headerlink" title="第三步线条的位移动画"></a>第三步线条的位移动画</h2><p>这里我们也是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>transform.translation.x</code>和<code>transform.translation.y</code>属性，来实现向中间聚拢的效果，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908174341119" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第二步动画，线向中间平移</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationTwo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> keypath = <span class="string">"transform.translation.x"</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">                keypath = <span class="string">"transform.translation.y"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineAnimationTwo = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: keypath)</span><br><span class="line">            lineAnimationTwo.beginTime = <span class="type">CACurrentMediaTime</span>() + duration/<span class="number">2</span></span><br><span class="line">            lineAnimationTwo.duration = duration/<span class="number">4</span></span><br><span class="line">            lineAnimationTwo.fillMode = kCAFillModeForwards</span><br><span class="line">            lineAnimationTwo.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">            lineAnimationTwo.autoreverses = <span class="literal">true</span></span><br><span class="line">            lineAnimationTwo.fromValue = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">2</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = lineLength/<span class="number">4</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = -lineLength/<span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationTwo, forKey: <span class="string">"lineAnimationTwo"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//三角形两边的比例</span></span><br><span class="line">        <span class="keyword">let</span> scale = (lineLength - <span class="number">2</span>*margin)/(lineLength - lineWidth)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> keypath = <span class="string">"transform.translation.y"</span></span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">                keypath = <span class="string">"transform.translation.x"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineAnimationTwo = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: keypath)</span><br><span class="line">            lineAnimationTwo.beginTime = <span class="type">CACurrentMediaTime</span>() + duration/<span class="number">2</span></span><br><span class="line">            lineAnimationTwo.duration = duration/<span class="number">4</span></span><br><span class="line">            lineAnimationTwo.fillMode = kCAFillModeForwards</span><br><span class="line">            lineAnimationTwo.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">            lineAnimationTwo.autoreverses = <span class="literal">true</span></span><br><span class="line">            lineAnimationTwo.fromValue = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> || i == <span class="number">3</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = lineLength/<span class="number">4</span> * scale</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                lineAnimationTwo.toValue = -lineLength/<span class="number">4</span> * scale</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationTwo, forKey: <span class="string">"lineAnimationThree"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="第四步线条恢复的原来长度的动画"><a href="#第四步线条恢复的原来长度的动画" class="headerlink" title="第四步线条恢复的原来长度的动画"></a>第四步线条恢复的原来长度的动画</h2><p>这里我们还是使用<code>CABasicAnimation</code>基础动画，<code>keyPath</code>作用于线条的<code>strokeEnd</code>属性，让<code>strokeEnd</code>从0到1来实现线条长短的动画，下面是效果图和代码：</p>
<p><img src="http://img.blog.csdn.net/20160908174810436" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     线的第三步动画，线由短变长</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">lineAnimationThree</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//线移动的动画</span></span><br><span class="line">        <span class="keyword">let</span> lineAnimationFour                 = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"strokeEnd"</span>)</span><br><span class="line">        lineAnimationFour.beginTime            = <span class="type">CACurrentMediaTime</span>() + duration</span><br><span class="line">        lineAnimationFour.duration            = duration/<span class="number">4</span></span><br><span class="line">        lineAnimationFour.fillMode            = kCAFillModeForwards</span><br><span class="line">        lineAnimationFour.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        lineAnimationFour.fromValue           = <span class="number">0</span></span><br><span class="line">        lineAnimationFour.toValue             = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">3</span> &#123;</span><br><span class="line">                lineAnimationFour.delegate = <span class="keyword">self</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> lineLayer = lines[i]</span><br><span class="line">            lineLayer.addAnimation(lineAnimationFour, forKey: <span class="string">"lineAnimationFour"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="最后一步需要将动画组合起来"><a href="#最后一步需要将动画组合起来" class="headerlink" title="最后一步需要将动画组合起来"></a>最后一步需要将动画组合起来</h2><p>关于动画组合我没用到<code>CAAnimationGroup</code>，因为这些动画并不是加到同一个layer上，再加上动画类型有点多加起来也比较麻烦，我就通过动画的<code>beginTime</code>属性来控制动画的执行顺序，还加了动画暂停喝继续的功能，效果和代码见下图：</p>
<p><img src="http://img.blog.csdn.net/20160908175802790" alt="这里写图片描述"></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MARK: Public Methods</span></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     开始动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        angleAnimation()</span><br><span class="line">        lineAnimationOne()</span><br><span class="line">        lineAnimationTwo()</span><br><span class="line">        lineAnimationThree()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">      暂停动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        layer.pauseAnimation()</span><br><span class="line">        <span class="keyword">for</span> lineLayer <span class="keyword">in</span> lines &#123;</span><br><span class="line">            lineLayer.pauseAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">        status = .pause</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     继续动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resumeAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        layer.resumeAnimation()</span><br><span class="line">        <span class="keyword">for</span> lineLayer <span class="keyword">in</span> lines &#123;</span><br><span class="line">            lineLayer.resumeAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">        status = .<span class="type">Animating</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">extension</span> <span class="title">CALayer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//暂停动画</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pauseAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 将当前时间CACurrentMediaTime转换为layer上的时间, 即将parent time转换为localtime</span></span><br><span class="line">        <span class="keyword">let</span> pauseTime = convertTime(<span class="type">CACurrentMediaTime</span>(), fromLayer: <span class="literal">nil</span>)</span><br><span class="line">        <span class="comment">// 设置layer的timeOffset, 在继续操作也会使用到</span></span><br><span class="line">        timeOffset    = pauseTime</span><br><span class="line">        <span class="comment">// localtime与parenttime的比例为0, 意味着localtime暂停了</span></span><br><span class="line">        speed         = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//继续动画</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">resumeAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pausedTime = timeOffset</span><br><span class="line">        speed          = <span class="number">1</span></span><br><span class="line">        timeOffset     = <span class="number">0</span>;</span><br><span class="line">        beginTime      = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 计算暂停时间</span></span><br><span class="line">        <span class="keyword">let</span> sincePause = convertTime(<span class="type">CACurrentMediaTime</span>(), fromLayer: <span class="literal">nil</span>) - pausedTime</span><br><span class="line">        <span class="comment">// local time相对于parent time时间的beginTime</span></span><br><span class="line">        beginTime      = sincePause</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//MARK: Animation Delegate</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStart</span><span class="params">(anim: CAAnimation)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> animation = anim <span class="keyword">as</span>? <span class="type">CABasicAnimation</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> animation.keyPath == <span class="string">"transform.rotation.z"</span> &#123;</span><br><span class="line">                status = .<span class="type">Animating</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStop</span><span class="params">(anim: CAAnimation, finished flag: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> animation = anim <span class="keyword">as</span>? <span class="type">CABasicAnimation</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> animation.keyPath == <span class="string">"strokeEnd"</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> flag &#123;</span><br><span class="line">                    status = .<span class="type">Normal</span></span><br><span class="line">                    dispatch_after(dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="type">Int64</span>(interval) * <span class="type">Int64</span>(<span class="type">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">self</span>.status != .<span class="type">Animating</span> &#123;</span><br><span class="line">                            <span class="keyword">self</span>.startAnimation()</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//MARK: Override</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">touchesEnded</span><span class="params">(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> status &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Animating</span>:</span><br><span class="line">            pauseAnimation()</span><br><span class="line">        <span class="keyword">case</span> .pause:</span><br><span class="line">            resumeAnimation()</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Normal</span>:</span><br><span class="line">            startAnimation()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>动画看起来挺复杂，但是细细划分出来也就那么回事，在写动画之前要先想好动画的步骤，这个很关键，希望大家通过这篇博客可以学到东西，有什么好的建议可以随时提出来，谢谢大家阅读~~<a href="https://github.com/631106979/WCLLoadingView" target="_blank" rel="external">demo地址</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 09月 08日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ iOS开发进阶 - 使用shell脚本自动打包上传到fir上]]></title>
      <url>http://imwcl.com/2016/08/24/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0%E5%88%B0fir%E4%B8%8A/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用fir.im测试已经好长时间了，感觉每次打包上传都很麻烦，想着是不是可以用脚本自动打包，在网上搜了一下确实有，下面总结一下如何使用脚本自动打包上传到fir.im，以及打包过程中遇到的问题和解决办法</p>
</blockquote>
<h2 id="相关资料和下载"><a href="#相关资料和下载" class="headerlink" title="相关资料和下载"></a>相关资料和下载</h2><p>首先是打包脚本的下载地址，这个是我找到的比较全的一个，里面有很多不同功能的shell脚本，亲测好用，<a href="https://github.com/heyuan110/BashShell?spm=5176.100239.blogcont5028.4.kFcLtR" target="_blank" rel="external">传送门</a></p>
<p>还有关于fir指令的一些介绍可以去这里查看，<a href="https://github.com/FIRHQ/fir-cli" target="_blank" rel="external">传送门</a></p>
<a id="more"></a>
<p><span id="APA"></span></p>
<h2 id="第一步安装fir-cil"><a href="#第一步安装fir-cil" class="headerlink" title="第一步安装fir-cil"></a>第一步安装fir-cil</h2><p>fir-cli 使用 Ruby 构建, 无需编译, 只要安装相应 gem 即可.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v <span class="comment"># &gt; 1.9.3</span></span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
<h3 id="常见的安装问题"><a href="#常见的安装问题" class="headerlink" title="常见的安装问题"></a>常见的安装问题</h3><ul>
<li><p>使用系统自带的 Ruby 安装, 需确保 ruby-dev 已被正确的安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install        <span class="comment"># OS X 系统</span></span><br><span class="line">$ sudo apt-get install ruby-dev <span class="comment"># Linux 系统</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>出现 <code>Permission denied</code> 相关错误:</p>
<p>在命令前加上 <code>sudo</code></p>
</li>
<li><p>出现 <code>Gem::RemoteFetcher::FetchError</code> 相关错误:</p>
<p>更换 Ruby 的淘宝源(由于国内网络原因, 你懂的), 并升级下系统自带的 gem</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources <span class="_">-a</span> https://ruby.taobao.org/</span><br><span class="line">$ gem sources <span class="_">-l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://ruby.taobao.org</span><br><span class="line"><span class="comment"># 请确保只有 ruby.taobao.org, 如果有其他的源, 请 remove 掉</span></span><br><span class="line"></span><br><span class="line">gem update --system</span><br><span class="line">gem install fir-cli</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mac OS X 10.11 以后的版本, 由于10.11引入了 <code>rootless</code>, 无法直接安装 fir-cli, 有以下三种解决办法:</p>
<p>1. 使用 <a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a> 及 <a href="https://rvm.io/" target="_blank" rel="external">RVM</a> 安装 Ruby, 再安装 fir-cli(推荐)</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install Homebrew:</span></span><br><span class="line">$ ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install RVM:</span></span><br><span class="line">$ \curl <span class="_">-s</span>SL https://get.rvm.io | bash <span class="_">-s</span> stable --ruby</span><br><span class="line"></span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
<p>2. 指定 fir-cli 中 bin 文件的 PATH</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span>;gem install -n /usr/<span class="built_in">local</span>/bin fir-cli</span><br></pre></td></tr></table></figure>
<p>3. 重写 Ruby Gem 的 bindir</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'gem: --bindir /usr/local/bin'</span> &gt;&gt; ~/.gemrc</span><br><span class="line">$ gem install fir-cli</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="login"></span></p>
<h2 id="第二步登录fir-im"><a href="#第二步登录fir-im" class="headerlink" title="第二步登录fir.im"></a>第二步登录fir.im</h2><p>登录指令非常简单，只需要<code>fir login API Token</code>，这里面的API Token就是你fir帐号下的API Token，然后通过<code>fir me</code>查看你是否登录成功.</p>
<h3 id="首先获取API-Token"><a href="#首先获取API-Token" class="headerlink" title="首先获取API Token"></a>首先获取API Token</h3><p><img src="http://img.blog.csdn.net/20160824112123496" alt="这里写图片描述"></p>
<p><img src="http://img.blog.csdn.net/20160824112210549" alt="这里写图片描述"></p>
<h3 id="在终端里登录你的fir"><a href="#在终端里登录你的fir" class="headerlink" title="在终端里登录你的fir"></a>在终端里登录你的fir</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fir login API Token</span><br><span class="line">fir me</span><br></pre></td></tr></table></figure>
<p>如果出现一下类似的情况说明登录成功了.<br><img src="http://img.blog.csdn.net/20160824112506519" alt="这里写图片描述"></p>
<h3 id="获取需要上传应用的appID"><a href="#获取需要上传应用的appID" class="headerlink" title="获取需要上传应用的appID"></a>获取需要上传应用的appID</h3><p><img src="http://img.blog.csdn.net/20160824113027211" alt="这里写图片描述"></p>
<h2 id="第三步使用下载下来的shell脚本进行打包上传"><a href="#第三步使用下载下来的shell脚本进行打包上传" class="headerlink" title="第三步使用下载下来的shell脚本进行打包上传"></a>第三步使用下载下来的shell脚本进行打包上传</h2><p>先看一下脚本代码：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! bin/bash</span></span><br><span class="line"><span class="comment">#Author:Bruce http://www.heyuan110.com</span></span><br><span class="line"><span class="comment">#Update Date:2015.06.23</span></span><br><span class="line"><span class="comment">#Use:命令行进入目录直接执行sh Build+DeployToFir.sh即可完成打包发布到fir.im</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.GB2312;</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.GB2312</span><br><span class="line"></span><br><span class="line"><span class="comment">###############设置需编译的项目配置名称</span></span><br><span class="line">buildConfig=<span class="string">"Release"</span> <span class="comment">#编译的方式,有Release,Debug，自定义的AdHoc等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################################################################################</span></span><br><span class="line"><span class="comment">##############################以下部分为自动生产部分，不需要手动修改############################</span></span><br><span class="line"><span class="comment">##########################################################################################</span></span><br><span class="line">projectName=`find . -name *.xcodeproj | awk -F <span class="string">"[/.]"</span> <span class="string">'&#123;print $(NF-1)&#125;'</span>` <span class="comment">#项目名称</span></span><br><span class="line">projectDir=`<span class="built_in">pwd</span>` <span class="comment">#项目所在目录的绝对路径</span></span><br><span class="line">wwwIPADir=~/Desktop/<span class="variable">$projectName</span>-IPA <span class="comment">#ipa，icon最后所在的目录绝对路径</span></span><br><span class="line">isWorkSpace=<span class="literal">true</span>  <span class="comment">#判断是用的workspace还是直接project，workspace设置为true，否则设置为false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~开始编译~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-d</span> <span class="string">"<span class="variable">$wwwIPADir</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$wwwIPADir</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"文件目录存在"</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"文件目录不存在"</span> </span><br><span class="line">    mkdir -pv <span class="variable">$wwwIPADir</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"创建<span class="variable">$&#123;wwwIPADir&#125;</span>目录成功"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$projectDir</span></span><br><span class="line">rm -rf ./build</span><br><span class="line">buildAppToDir=<span class="variable">$projectDir</span>/build <span class="comment">#编译打包完成后.app文件存放的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############获取版本号,bundleID</span></span><br><span class="line">infoPlist=<span class="string">"<span class="variable">$projectName</span>/Info.plist"</span></span><br><span class="line">bundleVersion=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleShortVersionString"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line">bundleIdentifier=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleIdentifier"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line">bundleBuildVersion=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="variable">$infoPlist</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始编译app</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$isWorkSpace</span> ; <span class="keyword">then</span>  <span class="comment">#判断编译方式</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"开始编译workspace...."</span> </span><br><span class="line">    xcodebuild  -workspace <span class="variable">$projectName</span>.xcworkspace -scheme <span class="variable">$projectName</span>  -configuration <span class="variable">$buildConfig</span> clean build SYMROOT=<span class="variable">$buildAppToDir</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span>  <span class="string">"开始编译target...."</span></span><br><span class="line">    xcodebuild  -target  <span class="variable">$projectName</span>  -configuration <span class="variable">$buildConfig</span> clean build SYMROOT=<span class="variable">$buildAppToDir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#判断编译结果</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $? <span class="_">-eq</span> 0</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~编译成功~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~编译失败~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始打包成.ipa</span></span><br><span class="line">ipaName=`<span class="built_in">echo</span> <span class="variable">$projectName</span> | tr <span class="string">"[:upper:]"</span> <span class="string">"[:lower:]"</span>` <span class="comment">#将项目名转小写</span></span><br><span class="line">findFolderName=`find . -name <span class="string">"<span class="variable">$buildConfig</span>-*"</span> -type d |xargs basename` <span class="comment">#查找目录</span></span><br><span class="line">appDir=<span class="variable">$buildAppToDir</span>/<span class="variable">$findFolderName</span>/  <span class="comment">#app所在路径</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始打包<span class="variable">$projectName</span>.app成<span class="variable">$projectName</span>.ipa....."</span></span><br><span class="line">xcrun -sdk iphoneos PackageApplication -v <span class="variable">$appDir</span>/<span class="variable">$projectName</span>.app -o <span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa <span class="comment">#将app打包成ipa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############开始拷贝到目标下载目录</span></span><br><span class="line"><span class="comment">#检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="_">-f</span> <span class="string">"<span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"打包<span class="variable">$ipaName</span>.ipa成功."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"打包<span class="variable">$ipaName</span>.ipa失败."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">path=<span class="variable">$wwwIPADir</span>/<span class="variable">$projectName</span>$(date +%Y%m%d%H%M%S).ipa</span><br><span class="line">cp <span class="_">-f</span> -p <span class="variable">$appDir</span>/<span class="variable">$ipaName</span>.ipa <span class="variable">$path</span>   <span class="comment">#拷贝ipa文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"复制<span class="variable">$ipaName</span>.ipa到<span class="variable">$&#123;wwwIPADir&#125;</span>成功"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"~~~~~~~~~~~~~~~~~~~结束编译，处理成功~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="comment">#open $wwwIPADir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####开始上传，如果只需要打ipa包出来不需要上传，可以删除下面的代码</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"正在上传到fir.im...."</span></span><br><span class="line"><span class="comment">#####http://fir.im/api/v2/app/appID?token=APIToken，里面的appID是你要上传应用的appID，APIToken是你fir上的APIToken</span></span><br><span class="line">fir p <span class="variable">$path</span></span><br><span class="line">changelog=`cat <span class="variable">$projectDir</span>/README`</span><br><span class="line">curl -X PUT --data <span class="string">"changelog=<span class="variable">$changelog</span>"</span> http://fir.im/api/v2/app/appID?token=APIToken</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\n打包上传更新成功！"</span></span><br><span class="line">rm -rf <span class="variable">$buildAppToDir</span></span><br><span class="line">rm -rf <span class="variable">$projectDir</span>/tmp</span><br></pre></td></tr></table></figure></p>
<p>上面对关键代码都做了详细解释，下面只需要执行shell脚本就能打包上传了。</p>
<h3 id="执行shell脚本，打包上传"><a href="#执行shell脚本，打包上传" class="headerlink" title="执行shell脚本，打包上传"></a>执行shell脚本，打包上传</h3><ul>
<li><p>首先把这个脚本文件放到你的项目工程目录下</p>
</li>
<li><p>然后打开终端，cd到脚本文件在的目录下，执行命名<code>sh build_deployto_fir.sh</code></p>
</li>
</ul>
<p>然后看到一下类似的画面说明上传成功：</p>
<p><img src="http://img.blog.csdn.net/20160824113740683" alt="这里写图片描述"></p>
<h2 id="执行脚本过程中遇到的问题和解决方案"><a href="#执行脚本过程中遇到的问题和解决方案" class="headerlink" title="执行脚本过程中遇到的问题和解决方案"></a>执行脚本过程中遇到的问题和解决方案</h2><h3 id="fir-command-not-found"><a href="#fir-command-not-found" class="headerlink" title="fir: command not found"></a>fir: command not found</h3><p>这个是因为没有安装fir-cil，导致找不到相应的命令行，只需要安装一下就行了，详情见上文写的<a href="#APA">如何安装fir-cil</a>。</p>
<h3 id="README-No-such-file-or-directory"><a href="#README-No-such-file-or-directory" class="headerlink" title="README: No such file or directory"></a>README: No such file or directory</h3><p>那是因为你的脚本目录下没有README的文件，只需要建一个README的文件就行了，打开终端，cd到当前位置，然后执行下面的命令：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch README</span><br></pre></td></tr></table></figure></p>
<h3 id="ERROR-–-Token-can-not-be-blank"><a href="#ERROR-–-Token-can-not-be-blank" class="headerlink" title="ERROR – : Token can not be blank"></a>ERROR – : Token can not be blank</h3><p>这个原因是因为你没有登录fir导致的，你执行这个脚本之前应该先登录一下fir，详情请看上文写的<a href="#login">登录fir.im</a>。</p>
<blockquote>
<p>以上就是我对于打包上传到fir上的脚本使用的总结，如果大家有问题可以随时问我，谢谢大家的阅读。</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 08月 24日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 实现类似美颜相机的相机启动动画]]></title>
      <url>http://imwcl.com/2016/08/16/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E7%BE%8E%E9%A2%9C%E7%9B%B8%E6%9C%BA%E7%9A%84%E7%9B%B8%E6%9C%BA%E5%90%AF%E5%8A%A8%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在写一个相册的demo，偶尔看到了美拍的相机过载动画觉得很有意思，就想在我的相册demo中加入一个这种特效，下面把我的想法和实现过程给大家分享一下</p>
</blockquote>
<p>先上效果图：（<a href="https://github.com/631106979/WCLLaunchView" target="_blank" rel="external">demo地址</a>）</p>
<p><img src="http://img.blog.csdn.net/20160816151650272" alt="效果图"></p>
<a id="more"></a>
<h2 id="步骤分析"><a href="#步骤分析" class="headerlink" title="步骤分析"></a>步骤分析</h2><p>这个动效看起来很有特色但是实现起来是非常简单的，只需要用到<code>CALayer</code>和<code>CAShapeLayer</code>做为展示层，然后通过<code>CABasicAnimation</code>实现动画就行了~</p>
<ul>
<li>用两个<code>CALayer</code>来呈现启动的image</li>
<li>通过<code>UIBezierPath</code>和<code>CAShapeLayer</code>来画出具有曲线的CAShapeLayer</li>
<li>然后将曲线的<code>CAShapeLayer</code>做为<code>CALayer</code>的mask</li>
<li>最后通过<code>CABasicAnimation</code>做一个简单的位移动画</li>
</ul>
<h2 id="先绘制上半部分的layer"><a href="#先绘制上半部分的layer" class="headerlink" title="先绘制上半部分的layer"></a>先绘制上半部分的layer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     绘制上半部分的layer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configTopShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绘制贝斯尔曲线</span></span><br><span class="line">        <span class="keyword">let</span> topBezier:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        topBezier.moveToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width+<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.addCurveToPoint(<span class="type">CGPointMake</span>(bounds.width/<span class="number">2.0</span>+<span class="number">1</span>, bounds.height/<span class="number">2.0</span>+<span class="number">1</span>), controlPoint1: <span class="type">CGPointMake</span>(bounds.width+<span class="number">1</span>, <span class="number">0</span>+<span class="number">1</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">343.5</span>+<span class="number">1</span>, <span class="number">242.5</span>+<span class="number">1</span>))</span><br><span class="line">        topBezier.addCurveToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, bounds.height+<span class="number">2</span>), controlPoint1: <span class="type">CGPointMake</span>(<span class="number">31.5</span>+<span class="number">2</span>, <span class="number">424.5</span>+<span class="number">2</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">0</span>+<span class="number">2</span>, bounds.height+<span class="number">2</span>))</span><br><span class="line">        topBezier.addLineToPoint(<span class="type">CGPointMake</span>(-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">        topBezier.closePath()</span><br><span class="line">        <span class="comment">//创建一个CAShapeLayer，将绘制的贝斯尔曲线的path给CAShapeLayer</span></span><br><span class="line">        <span class="keyword">let</span> topShape = <span class="type">CAShapeLayer</span>()</span><br><span class="line">        topShape.path = topBezier.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//给topLayer设置contents为启动图</span></span><br><span class="line">        topLayer.contents = launchImage?.<span class="type">CGImage</span></span><br><span class="line">        topLayer.frame = bounds</span><br><span class="line">        layer.addSublayer(topLayer)</span><br><span class="line">        <span class="comment">//将绘制后的CAShapeLayer做为topLayer的mask</span></span><br><span class="line">        topLayer.mask = topShape</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>绘制后的结果是这样的：</p>
<p><img src="http://img.blog.csdn.net/20160816153408858" alt="绘制后的结果"></p>
<h2 id="然后以同样的原理绘制下半部分的layer"><a href="#然后以同样的原理绘制下半部分的layer" class="headerlink" title="然后以同样的原理绘制下半部分的layer"></a>然后以同样的原理绘制下半部分的layer</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     绘制下半部分的layer</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configBottomShapeLayer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//绘制贝斯尔曲线</span></span><br><span class="line">        <span class="keyword">let</span> bottomBezier:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        bottomBezier.moveToPoint(<span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>))</span><br><span class="line">        bottomBezier.addCurveToPoint(<span class="type">CGPointMake</span>(bounds.width/<span class="number">2.0</span>, bounds.height/<span class="number">2.0</span>), controlPoint1: <span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">343.5</span>, <span class="number">242.5</span>))</span><br><span class="line">        bottomBezier.addCurveToPoint(<span class="type">CGPointMake</span>(<span class="number">0</span>, bounds.height), controlPoint1: <span class="type">CGPointMake</span>(<span class="number">31.5</span>, <span class="number">424.5</span>), controlPoint2: <span class="type">CGPointMake</span>(<span class="number">0</span>, bounds.height))</span><br><span class="line">        bottomBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width, bounds.height))</span><br><span class="line">        bottomBezier.addLineToPoint(<span class="type">CGPointMake</span>(bounds.width, <span class="number">0</span>))</span><br><span class="line">        bottomBezier.closePath()</span><br><span class="line">        <span class="comment">//创建一个CAShapeLayer，将绘制的贝斯尔曲线的path给CAShapeLayer</span></span><br><span class="line">        <span class="keyword">let</span> bottomShape = <span class="type">CAShapeLayer</span>()</span><br><span class="line">        bottomShape.path = bottomBezier.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//给bottomLayer设置contents为启动图</span></span><br><span class="line">        bottomLayer.contents = launchImage?.<span class="type">CGImage</span></span><br><span class="line">        bottomLayer.frame = bounds</span><br><span class="line">        layer.addSublayer(bottomLayer)</span><br><span class="line">        <span class="comment">//将绘制后的CAShapeLayer做为bottomLayer的mask</span></span><br><span class="line">        bottomLayer.mask = bottomShape</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里注意的是画的贝斯尔曲线上半部分的要整体向下平移1到2个像素，为了防止贝斯尔曲线画曲线导致的锯齿效果，下面是下半部分完成后的效果图：</p>
<p><img src="http://img.blog.csdn.net/20160816154025336" alt="这里写图片描述"></p>
<h2 id="最后给两个layer一个位移动画"><a href="#最后给两个layer一个位移动画" class="headerlink" title="最后给两个layer一个位移动画"></a>最后给两个layer一个位移动画</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     展开的动画</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">starAnimation</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//创建一个CABasicAnimation作用于CALayer的anchorPoint</span></span><br><span class="line">        <span class="keyword">let</span> topAnimation = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"anchorPoint"</span>)</span><br><span class="line">        <span class="comment">//设置移动路径</span></span><br><span class="line">        topAnimation.toValue = <span class="type">NSValue</span>.<span class="keyword">init</span>(<span class="type">CGPoint</span>: <span class="type">CGPointMake</span>(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">//动画时间</span></span><br><span class="line">        topAnimation.duration = <span class="number">0.6</span></span><br><span class="line">        <span class="comment">//设置代理，方便完成动画后移除当前view</span></span><br><span class="line">        topAnimation.delegate = <span class="keyword">self</span></span><br><span class="line">        <span class="comment">//设置动画速度为匀速</span></span><br><span class="line">        topAnimation.timingFunction = <span class="type">CAMediaTimingFunction</span>.<span class="keyword">init</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">        <span class="comment">//设置动画结束后不移除点，保持移动后的位置</span></span><br><span class="line">        topAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        topAnimation.fillMode = kCAFillModeForwards</span><br><span class="line">        topLayer.addAnimation(topAnimation, forKey: <span class="string">"topAnimation"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建一个CABasicAnimation作用于CALayer的anchorPoint</span></span><br><span class="line">        <span class="keyword">let</span> bottomAnimation = <span class="type">CABasicAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"anchorPoint"</span>)</span><br><span class="line">        <span class="comment">//设置移动路径</span></span><br><span class="line">        bottomAnimation.toValue = <span class="type">NSValue</span>.<span class="keyword">init</span>(<span class="type">CGPoint</span>: <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment">//动画时间</span></span><br><span class="line">        bottomAnimation.duration = <span class="number">0.6</span></span><br><span class="line">        <span class="comment">//设置动画速度为匀速</span></span><br><span class="line">        bottomAnimation.timingFunction = <span class="type">CAMediaTimingFunction</span>.<span class="keyword">init</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">        <span class="comment">//设置动画结束后不移除点，保持移动后的位置</span></span><br><span class="line">        bottomAnimation.removedOnCompletion = <span class="literal">false</span></span><br><span class="line">        bottomAnimation.fillMode = kCAFillModeForwards</span><br><span class="line">        bottomLayer.addAnimation(bottomAnimation, forKey: <span class="string">"topAnimation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span><br><span class="line">     动画完成后移除当前view</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">animationDidStop</span><span class="params">(anim: CAAnimation, finished flag: Bool)</span></span>           </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> flag &#123;</span><br><span class="line">            removeFromSuperview()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里为了方便观察，我将动画时间变长了，下面是完成后的效果图：</p>
<p><img src="http://img.blog.csdn.net/20160816154817167" alt="这里写图片描述"></p>
<blockquote>
<p>到这里这个动效就完成的差不多了，希望大家能学到东西，如果大家有更好的实现办法也可以给我提意见，我学习学习，谢谢大家观看，另外附加<a href="https://github.com/631106979/WCLLaunchView" target="_blank" rel="external">demo地址</a>，喜欢的可以关注一下</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 08月 16日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 隐藏UINavigationBar的小技巧]]></title>
      <url>http://imwcl.com/2016/07/28/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E9%9A%90%E8%97%8FUINavigationBar%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在开发过程中，为让屏幕显示更多的内容，有时候设计师会让我们隐藏UINavigationBar，通过浏览大神们写的文章和工作上用到的，总结了一下隐藏UINavigationBar的三种效果，用swift写了一份，供学习使用~~~</p>
</blockquote>
<p><a href="https://github.com/631106979/WCLHideNavBar" target="_blank" rel="external">demo地址</a></p>
<h3 id="第一种让UINavigationBar透明渐变消失"><a href="#第一种让UINavigationBar透明渐变消失" class="headerlink" title="第一种让UINavigationBar透明渐变消失"></a>第一种让UINavigationBar透明渐变消失</h3><p><img src="http://img.blog.csdn.net/20160728230823825" alt="第一种渐变"></p>
<p>思路是写一个扩展，先给UINavigationBar的backGroudImage设置为空，然后在UINavigationBar上通过runtime插入一个UIView，然后监听滚动事件，调整这个UIView的透明度来达到这个效果，下面贴代码：<br><a id="more"></a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line"> 给UINavigationBar添加背景色，用runtime插入一个backView</span><br><span class="line"> </span><br><span class="line"> - parameter color: backView的背景颜色</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclBackGroundColor</span><span class="params">(color:UIColor)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wclBackGroundColorView = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView) <span class="keyword">as</span>? <span class="type">UIView</span></span><br><span class="line">    <span class="keyword">if</span> wclBackGroundColorView == <span class="literal">nil</span> &#123;</span><br><span class="line">        setBackgroundImage(<span class="type">UIImage</span>.<span class="keyword">init</span>(), forBarMetrics: .<span class="type">Default</span>)</span><br><span class="line">        shadowImage = <span class="type">UIImage</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">let</span> backView = <span class="type">UIView</span>.<span class="keyword">init</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, -<span class="number">20</span>, bounds.width, bounds.height+<span class="number">20</span>))</span><br><span class="line">        backView.backgroundColor = color</span><br><span class="line">        backView.userInteractionEnabled = <span class="literal">false</span></span><br><span class="line">        backView.autoresizingMask = [.<span class="type">FlexibleHeight</span>, .<span class="type">FlexibleWidth</span>]</span><br><span class="line">        insertSubview(backView, atIndex: <span class="number">0</span>)</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView, backView, .<span class="type">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        wclBackGroundColorView!.backgroundColor = color</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 设置backView的透明度</span><br><span class="line"> </span><br><span class="line"> - parameter alpha: backView的透明度</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclBackViewAlpha</span><span class="params">(alpha:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> wclBackGroundColorView = objc_getAssociatedObject(<span class="keyword">self</span>, &amp;wclBackView) <span class="keyword">as</span>? <span class="type">UIView</span></span><br><span class="line">    wclBackGroundColorView?.alpha = alpha</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变"><a href="#第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变" class="headerlink" title="第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变"></a>第二种让UINavigationBar向上位移，并且UINavigationBar上的view透明渐变</h3><p><img src="http://img.blog.csdn.net/20160728231529840" alt="第二种效果"></p>
<p>主要思路也是通过扩展实现，通过改变UINavigationBar的transform来达到位移的效果，然后通过KVC来获取到UINavigationBar上的subViews来达到它的子view的透明渐变效果，下面上代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 向上隐藏NavigationBar</span><br><span class="line"> </span><br><span class="line"> - parameter progress: 隐藏的进度，默认是0，范围0~1</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclNavBarHide</span><span class="params">(progress:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(progress)</span><br><span class="line">    <span class="keyword">if</span> progress &gt; <span class="number">0</span> &#123;</span><br><span class="line">        transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -bounds.height*progress)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> leftViews = valueForKey(<span class="string">"_leftViews"</span>) <span class="keyword">as</span>? [<span class="type">UIView</span>] &#123;</span><br><span class="line">        <span class="keyword">for</span> leftView <span class="keyword">in</span> leftViews &#123;</span><br><span class="line">            leftView.alpha = <span class="number">1</span> - progress</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> rightViews = valueForKey(<span class="string">"_rightViews"</span>) <span class="keyword">as</span>? [<span class="type">UIView</span>] &#123;</span><br><span class="line">        <span class="keyword">for</span> rightView <span class="keyword">in</span> rightViews &#123;</span><br><span class="line">            rightView.alpha = <span class="number">1</span> - progress</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> titleView = valueForKey(<span class="string">"_titleView"</span>) <span class="keyword">as</span>? <span class="type">UIView</span> &#123;</span><br><span class="line">        titleView.alpha = <span class="number">1</span> - progress</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三种UINavigationBar和window的状态栏一起向上位移"><a href="#第三种UINavigationBar和window的状态栏一起向上位移" class="headerlink" title="第三种UINavigationBar和window的状态栏一起向上位移"></a>第三种UINavigationBar和window的状态栏一起向上位移</h3><p><img src="http://img.blog.csdn.net/20160728232320140" alt="第三种"></p>
<p>主要思路也是通过扩展实现，通过改变UINavigationBar的transform来达到位移的效果，然后通过KVC来获取window的状态栏一起进行偏移，下面上代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 向上隐藏NavigationBar和StateView</span><br><span class="line"> </span><br><span class="line"> - parameter progress: 隐藏的进度，默认是0，范围0~1</span><br><span class="line"> </span><br><span class="line"> - returns: 返回UINavigationBar本身</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setWclNavBarAndStateHide</span><span class="params">(progress:CGFloat)</span></span> -&gt; <span class="type">UINavigationBar</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> stateView = <span class="type">UIApplication</span>.sharedApplication().valueForKey(<span class="string">"statusBarWindow"</span>) <span class="keyword">as</span>? <span class="type">UIView</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> progress &gt; <span class="number">0</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -(bounds.height+<span class="number">20</span>)*progress)</span><br><span class="line">            stateView.transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, -(bounds.height+<span class="number">20</span>)*progress)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            stateView.transform = <span class="type">CGAffineTransformTranslate</span>(<span class="type">CGAffineTransformIdentity</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/631106979/WCLHideNavBar" target="_blank" rel="external">demo地址</a></p>
<p><a href="https://github.com/ltebean/LTNavigationBar" target="_blank" rel="external">参考文档</a></p>
<blockquote>
<p>以上就是我总结的关于三种隐藏UINavigationBar的三种发送，欢迎大家一起交流，如果有更好的可以一起学习</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 07月 28日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GCD深入学习之GCD的初识]]></title>
      <url>http://imwcl.com/2016/06/27/GCD%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E4%B9%8BGCD%E7%9A%84%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>现在网上关于GCD的介绍已经很多了，在项目中也经常用到，但是没怎么深入研究过，打算写一系列关于GCD使用，参考其他大神写的博客和Apple的技术文档总结一下，一是自己深入学习一下，二是以后忘了可以回过头来温习一下~</p>
</blockquote>
<h2 id="什么是GCD"><a href="#什么是GCD" class="headerlink" title="什么是GCD?"></a>什么是GCD?</h2><p>GCD全名是Grand Central Dispatch（大中央调度器），是系统级的，存在于libdispatch.dylib这个库里，是Apple开发的一个多核编程的解决方法，它提供了一下几种好处：</p>
<ul>
<li>GCD用纯C编写，可以提高应用程序的响应能力，更加高效；</li>
<li>GCD使用简单，会自动利用更多的CPU内核（比如双核、四核），自动管理线程的生命周期（创建线程、调度任务、销毁线程），程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码，提供更容易并发模型，有助于避免并发错误。</li>
</ul>
<a id="more"></a>
<h2 id="GCD的相关术语"><a href="#GCD的相关术语" class="headerlink" title="GCD的相关术语"></a>GCD的相关术语</h2><p>要了解GCD，你必须熟悉相关的线程和并发的几个概念。这些既可以是模糊的，微妙的，所以花点时间在GCD的背景下简要回顾一下他们。</p>
<h3 id="串行和并发"><a href="#串行和并发" class="headerlink" title="串行和并发"></a>串行和并发</h3><p>在执行任务时，串行是任务顺序执行，执行完一个下一个。并发就是任务可能同时执行多个任务。在GCD中一个任务就是一个闭包，这比NSOperation中的任务更加容易理解。</p>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>在计算机领域，同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。</p>
<h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>通过对多线程的串行化来访问公共资源或一段代码，速度快，适合控制数据访问。在任意时刻只允许一个线程对共享资源进行访问，如果有多个线程试图访问公共资 源，那么在有一个线程进入后，其他试图访问公共资源的线程将被挂起，并一直等到进入临界区的线程离开，临界区在被释放后，其他线程才可以抢占。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程，简单来说就是A线程在等待B线程完成后执行，B线程也在等待A线程完成后执行，这样就出现了死锁的现象。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>线程安全的代码可以从多个线程或并发任务安全地调用，而不会造成任何问题（数据损坏，系统崩溃等）。例如当你多线程编程时，你用let定义一个数组，因为它是只读的，你能在同一时间不同线程去使用它，而不会造成线程安全的问题，然而当你用var定义一个数组时就不一样了，它不是线程安全的，当多个线程在同一时间访问和修改数组时会产生不可预知的结果。</p>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>上下文切换是存储和恢复执行的状态，是你在一个进程中执行不同的线程之间切换的过程。这个过程是编写多任务处理应用程序时很常见，但也带来了一些额外的开销成本。就像并发就是通过切换上下文来实现的。</p>
<h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>在多核设备上执行任务时，每个CPU可以单独工作，每个CPU同时执行不同的任务，这就是并行，然而为了使单核的设备实现这种效果达到类似的效果，应为它们只有一个线程，它们只能通过快速的上下文切换来达到并行的假象，这就是并发，如下图所示：</p>
<p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/01/Concurrency_vs_Parallelism.png" alt="并发"></p>
<h2 id="GCD队列"><a href="#GCD队列" class="headerlink" title="GCD队列"></a>GCD队列</h2><p>GCD用<strong>dispatch queues</strong>来处理提交的任务，队列用来FIFO（先进先出）的原理来管理这些任务，所有的<strong>dispatch queues</strong>本身是线程安全的，你可以从多个线程去访问它们，在GCD 中提供了两种队列，分别是串行队列和并发队列。</p>
<h3 id="串行队列"><a href="#串行队列" class="headerlink" title="串行队列"></a>串行队列</h3><p>串行队列保证同一时间队列里只有一个任务在执行，只有等待第一个任务执行完成后才会执行下一个任务，你也不知道两个任务之间的间隔时间是多少，如下图所示：</p>
<p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/09/Serial-Queue-Swift.png" alt="串号队列"></p>
<p>使用串行队列有一下的优点：</p>
<ol>
<li>能确保对一个共享资源进行串行化的访问，避免了数据竞争；</li>
<li>任务的执行顺序是可预知的，你向一个串行队列提交任务时，它们被执行的顺  序与它们被提交的顺序相同；</li>
</ol>
<h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>并发队列可以让你并行的执行多个任务。任务按照它们被加入到队列中的顺序依次开始，但是它们都是并发的被执行，并不需要彼此等待才开始。并发队列能保证任务按同一顺序开始，但你不能知道执行的顺序、执行的时间以及在某一时刻正在被执行任务的数量，具体如下图所示：</p>
<p><img src="http://www.raywenderlich.com/wp-content/uploads/2014/09/Concurrent-Queue-Swift.png" alt="并发队列"></p>
<h2 id="GCD-的队列类型"><a href="#GCD-的队列类型" class="headerlink" title="GCD 的队列类型"></a>GCD 的队列类型</h2><p>在使用过程中系统会自动给每个应用提供一个串行队列和四个并发队列，其中串行队列为全局可用的串行队列，在应用的主线程中执行任务且只有一个，这个队列被用来更新 App 的 UI，执行所有与更新 UIViews 相关的任务。该队列中同一时刻只执行一个任务，这就是为什么当你在主队列中运行一个繁重的任务时UI会被阻塞的原因。GCD提供了一下三种队列：</p>
<ul>
<li><strong>主队列：</strong>任务以串行的方式执行在您的应用程序的主线程；</li>
<li><strong>并发队列：</strong>任务在先进先出的顺序列中移除,但并发运行,可以按照任何顺序完成；</li>
<li><strong>串行队列：</strong>以先进先出顺序执行一次任务。</li>
</ul>
<p>除主队列之外，系统还提供了4个并发队列。我们管它们叫 Global Dispatch queues（全局派发队列）。这些队列对整个应用来说是全局可用的，彼此只有优先级高低的区别。要使用其中一个全局并发队列的话，你得使用 dispatch_get_global_queue 函数获得一个你想要的队列的引用，该函数的第一个参数取如下值：</p>
<ul>
<li><strong>DISPATCH_QUEUE_PRIORITY_HIGH：</strong>高优先级的队列，高于其他任务优先级的队列。</li>
</ul>
<ul>
<li><strong>DISPATCH_QUEUE_PRIORITY_DEFAULT：</strong>默认优先级队列，高于下面两个优先级，</li>
<li><strong>DISPATCH_QUEUE_PRIORITY_LOW：</strong>低优先级队列，低于上面两个优先级。</li>
<li><strong>DISPATCH_QUEUE_PRIORITY_BACKGROUND：</strong>最低的优先级，使用它可以尽可能的减少对系统的影响。</li>
</ul>
<p>你可以创建任何数量的串行或并发队列。使用并发队列的情况下，即使你可以自己创建，但是还是强烈建议你使用上面那四个全局队列，避免带来没必要的麻烦。</p>
<h2 id="创建和管理GCD队列"><a href="#创建和管理GCD队列" class="headerlink" title="创建和管理GCD队列"></a>创建和管理GCD队列</h2><h3 id="dispatch-get-main-queue-gt-dispatch-queue-t"><a href="#dispatch-get-main-queue-gt-dispatch-queue-t" class="headerlink" title="dispatch_get_main_queue() -&gt; dispatch_queue_t!"></a>dispatch_get_main_queue() -&gt; dispatch_queue_t!</h3><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>通过这个函数来获取主线程队列：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回主线程队列</span></span><br><span class="line">dispatch_get_main_queue()</span><br></pre></td></tr></table></figure>
<h3 id="dispatch-get-globalqueue-identifier-Int-flags-UInt-gt-dispatch-queue-t"><a href="#dispatch-get-globalqueue-identifier-Int-flags-UInt-gt-dispatch-queue-t" class="headerlink" title="dispatch_get_globalqueue(identifier: Int,  flags: UInt) -&gt; dispatch_queue_t!"></a>dispatch_get_global<em>queue(identifier: Int, </em> flags: UInt) -&gt; dispatch_queue_t!</h3><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>通过这个函数来获取系统提供的4个并发队列</p>
<h4 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h4><table>
<thead>
<tr>
<th>参数名</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>identifier</td>
<td>代表的队列的优先级，为<code>DISPATCH_QUEUE_PRIORITY_HIGH、DISPATCH_QUEUE_PRIORITY_DEFAULT、DISPATCH_QUEUE_PRIORITY_LOW、DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>中的一个</td>
</tr>
<tr>
<td>flags</td>
<td>苹果官方解释是保留已提供将来使用，目前让这个参数为0</td>
</tr>
</tbody>
</table>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回DISPATCH_QUEUE_PRIORITY_HIGH优先级的队列</span></span><br><span class="line">dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_HIGH</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//返回DISPATCH_QUEUE_PRIORITY_DEFAULT优先级的队列</span></span><br><span class="line">dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//返回DISPATCH_QUEUE_PRIORITY_LOW优先级的队列</span></span><br><span class="line">dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_LOW</span>, <span class="number">0</span>)</span><br><span class="line"><span class="comment">//返回DISPATCH_QUEUE_PRIORITY_BACKGROUND优先级的队列</span></span><br><span class="line">dispatch_get_global_queue(<span class="type">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="dispatch-queuecreate-label-UnsafePointer-attr-dispatch-queue-attr-t-gt-dispatch-queue-t"><a href="#dispatch-queuecreate-label-UnsafePointer-attr-dispatch-queue-attr-t-gt-dispatch-queue-t" class="headerlink" title="dispatch_queuecreate(label: UnsafePointer,  attr: dispatch_queue_attr_t!) -&gt; dispatch_queue_t!"></a>dispatch_queue<em>create(label: UnsafePointer<int8>, </int8></em> attr: dispatch_queue_attr_t!) -&gt; dispatch_queue_t!</h3><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>通过这函数来创建一个新的队列。</p>
<h4 id="参数列表-1"><a href="#参数列表-1" class="headerlink" title="参数列表"></a>参数列表</h4><table>
<thead>
<tr>
<th>参数</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>label</td>
<td>为你创建的队列的标签，建议用反向DNS的命名风格（com.example.myqueue），这个参数是可选的，可以为NULL。</td>
</tr>
<tr>
<td>attr</td>
<td>GCD队列的属性，这个参数来选择创建的是串行队列（<strong>DISPATCH_QUEUE_SERIAL</strong>）还是并发队列（<strong>DISPATCH_QUEUE_CONCURRENT</strong>）和队列的优先级别。</td>
</tr>
</tbody>
</table>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个标识为com.wcl.www的并发队列</span></span><br><span class="line">dispatch_queue_create(<span class="string">"com.wcl.www"</span>, <span class="type">DISPATCH_QUEUE_CONCURRENT</span>)</span><br><span class="line"><span class="comment">//创建一个标识为com.imwcl.www的串行队列</span></span><br><span class="line">dispatch_queue_create(<span class="string">"com.imwcl.www"</span>, <span class="type">DISPATCH_QUEUE_SERIAL</span>)</span><br></pre></td></tr></table></figure>
<h3 id="dispatch-get-current-queue（）"><a href="#dispatch-get-current-queue（）" class="headerlink" title="dispatch_get_current_queue（）"></a>dispatch_get_current_queue（）</h3><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><p>返回当前任务中的队列。</p>
<h3 id="dispatch-queue-attr-make-with-qos-class-attr-dispatch-queue-attrt-qos-class-dispatch-qos-classt-relative-priority-Int32-gt-dispatch-queue-attr-t"><a href="#dispatch-queue-attr-make-with-qos-class-attr-dispatch-queue-attrt-qos-class-dispatch-qos-classt-relative-priority-Int32-gt-dispatch-queue-attr-t" class="headerlink" title="dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attrt!,  qos_class: dispatch_qos_classt,  relative_priority: Int32) -&gt; dispatch_queue_attr_t!"></a>dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attr<em>t!, </em> qos_class: dispatch_qos_class<em>t, </em> relative_priority: Int32) -&gt; dispatch_queue_attr_t!</h3><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><p>返回一个适用于创建一个想要的服务质量信息的GCD队列的属性。主要用于dispatch_queue_create函数。</p>
<h4 id="参数列表-2"><a href="#参数列表-2" class="headerlink" title="参数列表"></a>参数列表</h4><table>
<thead>
<tr>
<th>参数</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>attr</td>
<td>GCD队列的属性，这个参数来选择创建的是串行队列（<strong>DISPATCH_QUEUE_SERIAL</strong>）还是并发队列（<strong>DISPATCH_QUEUE_CONCURRENT</strong>）和队列的优先级别。</td>
</tr>
<tr>
<td>qos_class</td>
<td>这个参数为队列优先级，同样为<code>DISPATCH_QUEUE_PRIORITY_HIGH、DISPATCH_QUEUE_PRIORITY_DEFAULT、DISPATCH_QUEUE_PRIORITY_LOW、DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>中的一个。</td>
</tr>
<tr>
<td>relative_priority</td>
<td>这个参数为QOS类中相对优先级，这个值必须小于0，大于<code>QOS_MIN_RELATIVE_PRIORITY</code>，根据log数据发现<code>QOS_MIN_RELATIVE_PRIORITY</code>的值为-15，那说明第二个参数的值在0~-15之间。</td>
</tr>
</tbody>
</table>
<p>第三个参数为QOS类中相对优先级，也就是第二个参数的类，这个值必须小于0，大于<code>QOS_MIN_RELATIVE_PRIORITY</code>。</p>
<p><code>global queue</code>优先级映射到以下<code>quality-of-service</code>类:</p>
<ul>
<li><code>DISPATCH_QUEUE_PRIORITY_HIG</code>映射到<code>QOS_CLASS_USER_INITIATED</code>。</li>
<li><code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>映射到<code>QOS_CLASS_DEFAULT</code></li>
<li><code>DISPATCH_QUEUE_PRIORITY_LOW</code>映射到<code>QOS_CLASS_UTILITY</code></li>
<li><code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code>映射到<code>QOS_CLASS_BACKGROUND</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> att = dispatch_queue_attr_make_with_qos_class(<span class="type">DISPATCH_QUEUE_SERIAL</span>, <span class="type">QOS_CLASS_DEFAULT</span>, <span class="type">QOS_MIN_RELATIVE_PRIORITY</span>)</span><br><span class="line"><span class="comment">//根据att来创建一个队列</span></span><br><span class="line">dispatch_queue_create(<span class="string">"com.wcl.www"</span>, att)</span><br></pre></td></tr></table></figure>
<h3 id="dispatch-queue-get-label-dispatch-queue-t-queue"><a href="#dispatch-queue-get-label-dispatch-queue-t-queue" class="headerlink" title="dispatch_queue_get_label(dispatch_queue_t queue)"></a>dispatch_queue_get_label(dispatch_queue_t queue)</h3><h4 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h4><p>返回已经创建队列的指定标签。如果队列在创建过程中没有提供标签，则可能返回NULL。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回队列的标签</span></span><br><span class="line">dispatch_queue_get_label(dispatch_get_main_queue())</span><br></pre></td></tr></table></figure>
<h3 id="dispatch-main-void"><a href="#dispatch-main-void" class="headerlink" title="dispatch_main( void)"></a>dispatch_main( void)</h3><p>执行主队列上被提交的所有block。这个函数是为主线程而存在的并且等待执行提交到主队列中的block。在主线程中调用了UIApplicationMain(iOS) ，NSApplicationMain(OS X)，或者CFrunLoopRun的应用程序一定不要调用dispatch_main。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const charchar * argv[])  </span><br><span class="line">&#123;  </span><br><span class="line">  </span><br><span class="line">    @autoreleasepool &#123;  </span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">            NSLog(@&quot;等待1。。。。&quot;);  </span><br><span class="line">        &#125;);  </span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;  </span><br><span class="line">            NSLog(@&quot;等待1。。。。&quot;);  </span><br><span class="line">        &#125;);  </span><br><span class="line">        dispatch_main();  </span><br><span class="line">    &#125;  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上：如果不调用dispatch_main()函数，则不会打印出结果。</p>
<h3 id="dispatch-set-target-queue-object-dispatch-objectt-queue-dispatch-queue-t"><a href="#dispatch-set-target-queue-object-dispatch-objectt-queue-dispatch-queue-t" class="headerlink" title="dispatch_set_target_queue(object: dispatch_objectt!,  queue: dispatch_queue_t!)"></a>dispatch_set_target_queue(object: dispatch_object<em>t!, </em> queue: dispatch_queue_t!)</h3><h4 id="参数列表-3"><a href="#参数列表-3" class="headerlink" title="参数列表"></a>参数列表</h4><table>
<thead>
<tr>
<th>参数</th>
<th>参数描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>object</td>
<td>要修改的对象，该参数不能为空。</td>
</tr>
<tr>
<td>queue</td>
<td>处理这个对象的目标队列，这个参数不能为NULL</td>
</tr>
</tbody>
</table>
<p>给GCD对象设置目标队列，这个目标队列负责处理这个对象。处理的对象分别有一下几种：</p>
<ul>
<li><p><strong>GCD队列：</strong><code>dispatch_queue_t</code>，一个GCD队列的优先级是继承自它的目标队列的。使用dispatch_get_global_queue函数去获得一个合适的目标队列，这个目标队列就是你所需的优先级。</p>
<p>如果你提交一个block到一个串行队列中，并且这个串行队列的目标队列是一个不同的串行队列，那么这个block将不会与其他被提交到这个目标队列的block或者任何其他有相同目标队列的队列同时调用。</p>
</li>
</ul>
<ul>
<li><strong>GCD数据源：</strong><code>dispatch_source_t</code>，为一个GCD数据源的目标队列指定了它的事件处理者的block和取消事件处理的block。</li>
<li><strong>GCD I/O通道：</strong><code>dispatch_io_t</code>，一个GCD I/O通道的目标队列指定了被执行的I/O操作。这可能会影响I/O操作结果的优先级。例如，如果这个通道的目标队列的优先级被设置为DISPATCH_QUEUE_PRIORITY_BACKGROUND，那么当有I/O操作争夺的时候，任何在这个队列上通过dispatch_io_read或dispatch_io_write执行的I/O操作都会被压制。</li>
</ul>
<p>关于<code>dispatch_source_t</code>和<code>dispatch_io_t</code>的用法会在以后的章节去介绍。</p>
<blockquote>
<p>总结：这篇文章主要详细的介绍了一下关于多线程的知识和GCD队列的的创建，关于GCD的用法和其他方面的知识会在后续文章里面去描述，给自己立一个flag，争取完全弄懂以后写出好的博客来。</p>
</blockquote>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://developer.apple.com/library/mac/documentation/Performance/Reference/GCD_libdispatch_Ref/index.html#//apple_ref/c/func/dispatch_async" target="_blank" rel="external">苹果官方GCD参考文档</a></p>
<p><a href="https://www.raywenderlich.com/79149/grand-central-dispatch-tutorial-swift-part-1" target="_blank" rel="external">国外一篇好的关于GCD的文档</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 06月 27日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - CAKeyframeAnimation实现过山车动画]]></title>
      <url>http://imwcl.com/2016/06/22/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%20-%20CAKeyframeAnimation%E5%AE%9E%E7%8E%B0%E8%BF%87%E5%B1%B1%E8%BD%A6%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>偶然间在网页上看到一个<a href="http://www.html5tricks.com/demo/html5-svg-shanche-animation/index.html" target="_blank" rel="external">过山车动画</a>觉得很炫，就想用<code>swift</code>纯代码实现了一个类似的效果，因为没有设计天赋，所以就完全高仿的人家的效果-.-下面上效果图：</p>
</blockquote>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwgw1f53ahi8vslg30if0a8e81" alt="wcl.gif"></p>
<a id="more"></a>
<p>给大家介绍一下项目中主要会用到的类：</p>
<ul>
<li><code>CAShapeLayer</code></li>
<li><code>CAGradientLayer</code></li>
<li><code>CAKeyframeAnimation</code></li>
</ul>
<h3 id="实现的主要思路"><a href="#实现的主要思路" class="headerlink" title="实现的主要思路"></a>实现的主要思路</h3><p>渐变的背景用<code>CAGradientLayer</code>实现，其他例如山峰，草坪和轨道可以用<code>CAShapeLayer</code>配合<code>UIBezierPath</code>实现，然后云朵，树木和大地直接用<code>CALayer</code>通过设置<code>contents</code>实现，然后云朵和过山车的动画实现用<code>CAKeyframeAnimation</code>，这样分析其实做一个这样的动态效果并不是很难，下面就是实现过程和简单的代码示例。<a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">下载demo有完整代码</a></p>
<h3 id="CAGradientLayer"><a href="#CAGradientLayer" class="headerlink" title="CAGradientLayer"></a>CAGradientLayer</h3><p><code>CAGradientLayer</code>是用来生成两种或更多颜色平滑渐变的。相比于<code>Core Graphics</code>来说<code>CAGradientLayer</code>的真正好处在于绘制使用了硬件加速。这说明通过<code>CAGradientLayer</code>来绘制渐变的效果比用<code>Core Graphics</code>的效率更高。我们通过<code>CAGradientLayer</code>来实现这个项目中的背景<a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">下载demo有完整代码</a>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化背景</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initGradientLayer</span><span class="params">(size:CGSize)</span></span> -&gt; <span class="type">CAGradientLayer</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> layer:<span class="type">CAGradientLayer</span> = <span class="type">CAGradientLayer</span>()</span><br><span class="line">        layer.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size.width, height: size.height - <span class="number">20</span>)</span><br><span class="line">        <span class="comment">//设置渐变的颜色</span></span><br><span class="line">        layer.colors = [<span class="type">UIColor</span>.<span class="keyword">init</span>(colorLiteralRed: <span class="number">178.0</span>/<span class="number">255.0</span>, green: <span class="number">226.0</span>/<span class="number">255.0</span>, blue: <span class="number">248.0</span>/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>).<span class="type">CGColor</span>, <span class="type">UIColor</span>.<span class="keyword">init</span>(colorLiteralRed: <span class="number">232.0</span>/<span class="number">255.0</span>, green: <span class="number">244.0</span>/<span class="number">255.0</span>, blue: <span class="number">193.0</span>/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>).<span class="type">CGColor</span>]</span><br><span class="line">        <span class="comment">//设置渐变的方向为从左上到右下</span></span><br><span class="line">        layer.startPoint = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)</span><br><span class="line">        layer.endPoint = <span class="type">CGPoint</span>(x: <span class="number">1</span>, y: <span class="number">1</span>)</span><br><span class="line">        view.layer.addSublayer(layer)</span><br><span class="line">        <span class="keyword">return</span> layer</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwgw1f53ax28scyj30ij09w74d" alt="屏幕快照 2016-06-22 上午12.16.14.png"></p>
<h3 id="CAShapeLayer"><a href="#CAShapeLayer" class="headerlink" title="CAShapeLayer"></a>CAShapeLayer</h3><p><code>CAShapeLayer</code>是一个通过矢量图形而不是<code>bitmap</code>来绘制的图层子类。你指定诸如颜色和线宽等属性，用<code>CGPath</code>来定义想要绘制的图形，最后CAShapeLayer就自动渲染出来了。当然，你也可以用<code>Core Graphics</code>直接向原始的CALyer的内容中绘制一个路径，相比直下，使用<code>CAShapeLayer</code>有以下一些优点：</p>
<ul>
<li>渲染快速。<code>CAShapeLayer</code>使用了硬件加速，绘制同一图形会比用<code>Core Graphics</code>快很多。</li>
</ul>
<ul>
<li>高效使用内存。一个<code>CAShapeLayer</code>不需要像普通<code>CALayer</code>一样创建一个寄宿图形，所以无论有多大，都不会占用太多的内存。</li>
</ul>
<ul>
<li>不会被图层边界剪裁掉。一个<code>CAShapeLayer</code>可以在边界之外绘制。你的图层路径不会像在使用<code>Core Graphics</code>的普通<code>CALayer</code>一样被剪裁掉（如我们在第二章所见）。</li>
</ul>
<ul>
<li>不会出现像素化。当你给<code>CAShapeLayer</code>做<code>3D</code>变换时，它不像一个有寄宿图的普通图层一样变得像素化。</li>
</ul>
<p>我们用<code>CAShapeLayer</code>来绘制草地，山坡和过山车的轨道，下面给大家通过绘制草坪的代码简单介绍一下用法<a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">下载demo有完整代码</a>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化草坪</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">initGrasslandlayer</span><span class="params">(size:CGSize)</span></span> -&gt; <span class="type">CAShapeLayer</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> grasslandOne = <span class="type">CAShapeLayer</span>()</span><br><span class="line">        <span class="comment">//通过UIBezierPath来绘制路径</span></span><br><span class="line">        <span class="keyword">let</span> pathOne:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        pathOne.moveToPoint(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: size.height - <span class="number">20</span>))</span><br><span class="line">        pathOne.addLineToPoint(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: size.height - <span class="number">100</span>))</span><br><span class="line">        pathOne.addQuadCurveToPoint(<span class="type">CGPoint</span>(x: size.width/<span class="number">3.0</span>, y: size.height - <span class="number">20</span>), controlPoint: <span class="type">CGPoint</span>(x: size.width/<span class="number">6.0</span>, y: size.height - <span class="number">100</span>))</span><br><span class="line">        grasslandOne.path = pathOne.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//设置草坪的颜色</span></span><br><span class="line">        grasslandOne.fillColor = <span class="type">UIColor</span>.<span class="keyword">init</span>(colorLiteralRed: <span class="number">82.0</span>/<span class="number">255.0</span>, green: <span class="number">177.0</span>/<span class="number">255.0</span>, blue: <span class="number">44.0</span>/<span class="number">255.0</span>, alpha: <span class="number">1.0</span>).<span class="type">CGColor</span></span><br><span class="line">        view.layer.addSublayer(grasslandOne)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/006tNbRwgw1f53ba1snf4j30ij0agtc7" alt="屏幕快照 2016-06-22 上午12.28.53.png"></p>
<h3 id="CAKeyframeAnimation"><a href="#CAKeyframeAnimation" class="headerlink" title="CAKeyframeAnimation"></a>CAKeyframeAnimation</h3><p><code>CAKeyframeAnimation</code>类为对象提供了关键帧动画的功能。你创建一个<code>CAKeyframeAnimation</code>对象使用<code>animationWithKeyPath:</code>指定属性的关键路径，你可以指定要使用关键帧的值来控制时间和动画的行为。我们可以通过<code>CAKeyframeAnimation</code>来实现过山车在轨道上的的动画和云朵的动画，下面是一小段示例代码<a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">下载demo有完整代码</a>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加绿色轨道的动画</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addGreenCarPathAnimation</span><span class="params">(size:CGSize)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> carLayer:<span class="type">CALayer</span> = <span class="type">CALayer</span>()</span><br><span class="line">        carLayer.frame = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">17</span>, height: <span class="number">11</span>)</span><br><span class="line">        carLayer.contents = <span class="type">UIImage</span>.<span class="keyword">init</span>(named: <span class="string">"otherCar"</span>)!.<span class="type">CGImage</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//绘制路径</span></span><br><span class="line">        <span class="keyword">let</span> path:<span class="type">UIBezierPath</span> = <span class="type">UIBezierPath</span>()</span><br><span class="line">        path.lineCapStyle = .<span class="type">Round</span></span><br><span class="line">        path.lineJoinStyle = .<span class="type">Round</span></span><br><span class="line">        path.moveToPoint(<span class="type">CGPoint</span>(x: size.width + <span class="number">10</span>, y: size.height - <span class="number">7</span>))</span><br><span class="line">        path.addLineToPoint(<span class="type">CGPoint</span>(x: size.width + <span class="number">10</span>, y: size.height - <span class="number">77</span>))</span><br><span class="line">        path.addQuadCurveToPoint(<span class="type">CGPoint</span>(x: size.width/<span class="number">1.8</span>, y: size.height - <span class="number">77</span>), controlPoint: <span class="type">CGPoint</span>(x: size.width - <span class="number">120</span>, y: <span class="number">193</span>))</span><br><span class="line">        path.addArcWithCenter(<span class="type">CGPoint</span>(x: size.width/<span class="number">1.9</span>, y: size.height - <span class="number">140</span>), radius: <span class="number">63</span>, startAngle: <span class="type">CGFloat</span>(<span class="number">0.5</span>*<span class="type">M_PI</span>), endAngle: <span class="type">CGFloat</span>(<span class="number">2.5</span>*<span class="type">M_PI</span>), clockwise: <span class="literal">true</span>)</span><br><span class="line">        path.addCurveToPoint(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: size.height - <span class="number">107</span>), controlPoint1: <span class="type">CGPoint</span>(x: size.width/<span class="number">1.8</span> - <span class="number">60</span>, y: size.height - <span class="number">67</span>), controlPoint2: <span class="type">CGPoint</span>(x: <span class="number">150</span>, y: size.height/<span class="number">2.3</span>-<span class="number">7</span>))</span><br><span class="line">        path.addLineToPoint(<span class="type">CGPoint</span>(x: -<span class="number">100</span>, y: size.height + <span class="number">7</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关键帧动画作用于position</span></span><br><span class="line">        <span class="keyword">let</span> animation:<span class="type">CAKeyframeAnimation</span> = <span class="type">CAKeyframeAnimation</span>.<span class="keyword">init</span>(keyPath: <span class="string">"position"</span>)</span><br><span class="line">        animation.path = path.<span class="type">CGPath</span></span><br><span class="line">        <span class="comment">//动画节奏为线性动画</span></span><br><span class="line">        animation.timingFunction = <span class="type">CAMediaTimingFunction</span>.<span class="keyword">init</span>(name: kCAMediaTimingFunctionLinear)</span><br><span class="line">        <span class="comment">//动画时间</span></span><br><span class="line">        animation.duration = <span class="number">6</span></span><br><span class="line">        <span class="comment">//动画重复次数</span></span><br><span class="line">        animation.repeatCount = <span class="type">MAXFLOAT</span></span><br><span class="line">        <span class="comment">//动画是否逆转</span></span><br><span class="line">        animation.autoreverses = <span class="literal">false</span></span><br><span class="line">        animation.calculationMode = kCAAnimationCubicPaced</span><br><span class="line">        <span class="comment">//动画角度是否调整</span></span><br><span class="line">        animation.rotationMode = kCAAnimationRotateAuto</span><br><span class="line">        view.layer.addSublayer(carLayer)</span><br><span class="line">        carLayer.addAnimation(animation, forKey: <span class="string">"carAnimation"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的代码只是简单的示例，完整代码得去<a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">我的github</a>上去下载，到这里也就基本上完成了，大家有什么疑问可以留言评论，谢谢大家的观看</p>
</blockquote>
<p><a href="https://github.com/631106979/RollerCoasterAnimation" target="_blank" rel="external">demo地址</a></p>
<p><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="external">参考文档（非常好的一篇关于介绍CALayer学习中文翻译文档，学习必看）</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 06月 22日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 实现类似微信和支付宝的密码输入框（UIKeyInput协议）]]></title>
      <url>http://imwcl.com/2016/06/02/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6-%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC%E5%BE%AE%E4%BF%A1%E5%92%8C%E6%94%AF%E4%BB%98%E5%AE%9D%E7%9A%84%E5%AF%86%E7%A0%81%E8%BE%93%E5%85%A5%E6%A1%86%EF%BC%88UIKeyInput%E5%8D%8F%E8%AE%AE%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>目前在项目中需要实现发红包的功能，自己就写了一个密码输入框的控件，主要用到了<code>UIKeyInput</code>协议和<code>CoreGraphics</code>框架，效果类似微信支付，感觉还行就把我的思路和制作过程写下来给大家分享一下。（<a href="https://github.com/631106979/WCLPassWordView" target="_blank" rel="external">demo地址</a>觉得有用的可以star一下）</p>
<p><img src="http://ww2.sinaimg.cn/large/72f96cbagw1f4g3avwocig20a80ii78g" alt="wcl.gif"></p>
<a id="more"></a>
<h3 id="让你的自定义View具备输入的功能（UIKeyInput协议）"><a href="#让你的自定义View具备输入的功能（UIKeyInput协议）" class="headerlink" title="让你的自定义View具备输入的功能（UIKeyInput协议）"></a>让你的自定义View具备输入的功能（UIKeyInput协议）</h3><p>通过<code>UIKeyInput</code>协议可以为响应者提供简单的键盘输入的功能，让需要键盘的responder成为第一响应者就行了。<code>UIKeyInput</code>协议必须实现的有三个方法，分别是以下方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - UIKeyInput</span><br><span class="line">/**</span><br><span class="line"> *  用于显示的文本对象是否有任何文本</span><br><span class="line"> */</span><br><span class="line">- (BOOL)hasText &#123;</span><br><span class="line">    return self.textStore.length &gt; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  插入文本</span><br><span class="line"> */</span><br><span class="line">- (void)insertText:(NSString *)text &#123;</span><br><span class="line">    if (self.textStore.length &lt; self.passWordNum) &#123;</span><br><span class="line">        //判断是否是数字</span><br><span class="line">        NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:MONEYNUMBERS] invertedSet];</span><br><span class="line">        NSString*filtered = [[text componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];</span><br><span class="line">        BOOL basicTest = [text isEqualToString:filtered];</span><br><span class="line">        if(basicTest) &#123;</span><br><span class="line">          if ([self.delegate respondsToSelector:@selector(passWordDidChange:)]) &#123;</span><br><span class="line">                [self.delegate passWordDidChange:self];</span><br><span class="line">            &#125;</span><br><span class="line">            if (self.textStore.length == self.passWordNum) &#123;</span><br><span class="line">                if ([self.delegate respondsToSelector:@selector(passWordCompleteInput:)]) &#123;</span><br><span class="line">                    [self.delegate passWordCompleteInput:self];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            [self.textStore appendString:text];</span><br><span class="line">            [self setNeedsDisplay];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  删除文本</span><br><span class="line"> */</span><br><span class="line">- (void)deleteBackward &#123;</span><br><span class="line">    if (self.textStore.length &gt; 0) &#123;</span><br><span class="line">        [self.textStore deleteCharactersInRange:NSMakeRange(self.textStore.length - 1, 1)];</span><br><span class="line">      if ([self.delegate respondsToSelector:@selector(passWordDidChange:)]) &#123;</span><br><span class="line">            [self.delegate passWordDidChange:self];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [self setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  是否能成为第一响应者</span><br><span class="line"> */</span><br><span class="line">- (BOOL)canBecomeFirstResponder &#123;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  点击成为第一相应者</span><br><span class="line"> */</span><br><span class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</span><br><span class="line">    if (![self isFirstResponder]) &#123;</span><br><span class="line">        [self becomeFirstResponder];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现类似微信和支付宝的密码输入框"><a href="#实现类似微信和支付宝的密码输入框" class="headerlink" title="实现类似微信和支付宝的密码输入框"></a>实现类似微信和支付宝的密码输入框</h3><p>实现的思路是通过<code>CoreGraphics</code>框架绘制出密码输入框的外框和里面的小黑点，然后通过从键盘上获取到的字符串判断输入的位数，具体实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  设置正方形的边长</span><br><span class="line"> */</span><br><span class="line">- (void)setSquareWidth:(CGFloat)squareWidth &#123;</span><br><span class="line">    _squareWidth = squareWidth;</span><br><span class="line">    [self setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  设置键盘的类型</span><br><span class="line"> */</span><br><span class="line">- (UIKeyboardType)keyboardType &#123;</span><br><span class="line">    return UIKeyboardTypeNumberPad;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  设置密码的位数</span><br><span class="line"> */</span><br><span class="line">- (void)setPassWordNum:(NSUInteger)passWordNum &#123;</span><br><span class="line">    _passWordNum = passWordNum;</span><br><span class="line">    [self setNeedsDisplay];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  绘制</span><br><span class="line"> */</span><br><span class="line">- (void)drawRect:(CGRect)rect &#123;</span><br><span class="line">    CGFloat height = rect.size.height;</span><br><span class="line">    CGFloat width = rect.size.width;</span><br><span class="line">    CGFloat x = (width - self.squareWidth*self.passWordNum)/2.0;</span><br><span class="line">    CGFloat y = (height - self.squareWidth)/2.0;</span><br><span class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</span><br><span class="line">    //画外框</span><br><span class="line">    CGContextAddRect(context, CGRectMake( x, y, self.squareWidth*self.passWordNum, self.squareWidth));</span><br><span class="line">    CGContextSetLineWidth(context, 1);</span><br><span class="line">    CGContextSetStrokeColorWithColor(context, self.rectColor.CGColor);</span><br><span class="line">    CGContextSetFillColorWithColor(context, [UIColor whiteColor].CGColor);</span><br><span class="line">    //画竖条</span><br><span class="line">    for (int i = 1; i &lt;= self.passWordNum; i++) &#123;</span><br><span class="line">        CGContextMoveToPoint(context, x+i*self.squareWidth, y);</span><br><span class="line">        CGContextAddLineToPoint(context, x+i*self.squareWidth, y+self.squareWidth);</span><br><span class="line">         CGContextClosePath(context);</span><br><span class="line">    &#125;</span><br><span class="line">    CGContextDrawPath(context, kCGPathFillStroke);</span><br><span class="line">    CGContextSetFillColorWithColor(context, self.pointColor.CGColor);</span><br><span class="line">    //画黑点</span><br><span class="line">    for (int i = 1; i &lt;= self.textStore.length; i++) &#123;</span><br><span class="line">        CGContextAddArc(context,  x+i*self.squareWidth - self.squareWidth/2.0, y+self.squareWidth/2, self.pointRadius, 0, M_PI*2, YES);</span><br><span class="line">        CGContextDrawPath(context, kCGPathFill);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上就是实现的主要代码和分析，大家需要看<a href="https://github.com/631106979/WCLPassWordView" target="_blank" rel="external">demo</a>可以点击超链接进去下载观看，谢谢大家的阅读~</p>
</blockquote>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 06月 02日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 用AVFoundation自定义视频录制功能]]></title>
      <url>http://imwcl.com/2016/05/25/iOS%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%20-%20%E7%94%A8AVFoundation%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>系统自带的录制视频的功能显然无法满足美工和项目经理的要求，自定义视频录制就非常重要了，那么下面来带大家制作属于自己的视频录制界面。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160525152423044" alt="效果图"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>自定义视频录制需要用到的框架主要是<code>AVFoundation</code>和<code>CoreMedia</code>，包括视频输出，输入和文件的读写，下面给大家罗列一下将要用到的类：</p>
<a id="more"></a>
<ul>
<li><strong>AVCaptureSession</strong></li>
<li><strong>AVCaptureVideoPreviewLayer</strong></li>
<li><strong>AVCaptureDeviceInput</strong></li>
<li><strong>AVCaptureConnection</strong></li>
<li><strong>AVCaptureVideoDataOutput</strong></li>
<li><strong>AVCaptureAudioDataOutput</strong></li>
<li><strong>AVAssetWriter</strong></li>
<li><strong>AVAssetWriterInput</strong></li>
</ul>
<blockquote>
<p>下面详细介绍每个类和代码实现</p>
</blockquote>
<h2 id="AVCaptureSession"><a href="#AVCaptureSession" class="headerlink" title="AVCaptureSession"></a>AVCaptureSession</h2><p><code>AVCaptureSession</code>是<code>AVFoundation</code>捕捉类的中心枢纽，我们先从这个类入手，在视频捕获时,客户端可以实例化<code>AVCaptureSession</code>并添加适当的<code>AVCaptureInputs</code>、<code>AVCaptureDeviceInput</code>和输出，比如<code>AVCaptureMovieFileOutput</code>。通过<code>[AVCaptureSession startRunning]</code>开始数据流从输入到输出,和<code>[AVCaptureSession stopRunning]</code>停止输出输入的流动。客户端可以通过设置sessionPreset属性定制录制质量水平或输出的比特率。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//捕获视频的会话</span><br><span class="line">- (AVCaptureSession *)recordSession &#123;</span><br><span class="line">    if (_recordSession == nil) &#123;</span><br><span class="line">        _recordSession = [[AVCaptureSession alloc] init];</span><br><span class="line">        //添加后置摄像头的输出</span><br><span class="line">        if ([_recordSession canAddInput:self.backCameraInput]) &#123;</span><br><span class="line">            [_recordSession addInput:self.backCameraInput];</span><br><span class="line">        &#125;</span><br><span class="line">        //添加后置麦克风的输出</span><br><span class="line">        if ([_recordSession canAddInput:self.audioMicInput]) &#123;</span><br><span class="line">            [_recordSession addInput:self.audioMicInput];</span><br><span class="line">        &#125;</span><br><span class="line">        //添加视频输出</span><br><span class="line">        if ([_recordSession canAddOutput:self.videoOutput]) &#123;</span><br><span class="line">            [_recordSession addOutput:self.videoOutput];</span><br><span class="line">            //设置视频的分辨率为后置摄像头</span><br><span class="line">            NSDictionary* actual = self.videoOutput.videoSettings;</span><br><span class="line">            _cx = [[actual objectForKey:@&quot;Height&quot;] integerValue];</span><br><span class="line">            _cy = [[actual objectForKey:@&quot;Width&quot;] integerValue];</span><br><span class="line">        &#125;</span><br><span class="line">        //添加音频输出</span><br><span class="line">        if ([_recordSession canAddOutput:self.audioOutput]) &#123;</span><br><span class="line">            [_recordSession addOutput:self.audioOutput];</span><br><span class="line">        &#125;</span><br><span class="line">        //设置视频录制的方向</span><br><span class="line">        self.videoConnection.videoOrientation = AVCaptureVideoOrientationPortrait;</span><br><span class="line">    &#125;</span><br><span class="line">    return _recordSession;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureDevice"><a href="#AVCaptureDevice" class="headerlink" title="AVCaptureDevice"></a>AVCaptureDevice</h2><p><code>AVCaptureDevice</code>的每个实例对应一个设备,如摄像头或麦克风。<code>AVCaptureDevice</code>的实例不能直接创建。所有现有设备可以使用类方法<code>devicesWithMediaType:defaultDeviceWithMediaType:</code>获取，设备可以提供一个或多个给定流媒体类型。<code>AVCaptureDevice</code>实例可用于提供给<code>AVCaptureSession</code>创建一个为<code>AVCaptureDeviceInput</code>类型的输入源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//返回前置摄像头</span><br><span class="line">- (AVCaptureDevice *)frontCamera &#123;</span><br><span class="line">    return [self cameraWithPosition:AVCaptureDevicePositionFront];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//返回后置摄像头</span><br><span class="line">- (AVCaptureDevice *)backCamera &#123;</span><br><span class="line">    return [self cameraWithPosition:AVCaptureDevicePositionBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//用来返回是前置摄像头还是后置摄像头</span><br><span class="line">- (AVCaptureDevice *)cameraWithPosition:(AVCaptureDevicePosition) position &#123;</span><br><span class="line">    //返回和视频录制相关的所有默认设备</span><br><span class="line">    NSArray *devices = [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo];</span><br><span class="line">    //遍历这些设备返回跟position相关的设备</span><br><span class="line">    for (AVCaptureDevice *device in devices) &#123;</span><br><span class="line">        if ([device position] == position) &#123;</span><br><span class="line">            return device;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil;</span><br><span class="line">&#125;</span><br><span class="line">//开启闪光灯</span><br><span class="line">- (void)openFlashLight &#123;</span><br><span class="line">    AVCaptureDevice *backCamera = [self backCamera];</span><br><span class="line">    if (backCamera.torchMode == AVCaptureTorchModeOff) &#123;</span><br><span class="line">        [backCamera lockForConfiguration:nil];</span><br><span class="line">        backCamera.torchMode = AVCaptureTorchModeOn;</span><br><span class="line">        backCamera.flashMode = AVCaptureFlashModeOn;</span><br><span class="line">        [backCamera unlockForConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//关闭闪光灯</span><br><span class="line">- (void)closeFlashLight &#123;</span><br><span class="line">    AVCaptureDevice *backCamera = [self backCamera];</span><br><span class="line">    if (backCamera.torchMode == AVCaptureTorchModeOn) &#123;</span><br><span class="line">        [backCamera lockForConfiguration:nil];</span><br><span class="line">        backCamera.torchMode = AVCaptureTorchModeOff;</span><br><span class="line">        backCamera.flashMode = AVCaptureTorchModeOff;</span><br><span class="line">        [backCamera unlockForConfiguration];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureDeviceInput"><a href="#AVCaptureDeviceInput" class="headerlink" title="AVCaptureDeviceInput"></a>AVCaptureDeviceInput</h2><p><code>AVCaptureDeviceInput</code> 是AVCaptureSession输入源,提供媒体数据从设备连接到系统，通过<code>AVCaptureDevice</code>的实例化得到，就是我们将要用到的设备输出源设备，也就是前后摄像头，通过<code>[AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo]</code>方法获得。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//后置摄像头输入</span><br><span class="line">- (AVCaptureDeviceInput *)backCameraInput &#123;</span><br><span class="line">    if (_backCameraInput == nil) &#123;</span><br><span class="line">        NSError *error;</span><br><span class="line">        _backCameraInput = [[AVCaptureDeviceInput alloc] initWithDevice:[self backCamera] error:&amp;error];</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            [SVProgressHUD showErrorWithStatus:@&quot;获取后置摄像头失败~&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return _backCameraInput;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//前置摄像头输入</span><br><span class="line">- (AVCaptureDeviceInput *)frontCameraInput &#123;</span><br><span class="line">    if (_frontCameraInput == nil) &#123;</span><br><span class="line">        NSError *error;</span><br><span class="line">        _frontCameraInput = [[AVCaptureDeviceInput alloc] initWithDevice:[self frontCamera] error:&amp;error];</span><br><span class="line">        if (error) &#123;</span><br><span class="line">            [SVProgressHUD showErrorWithStatus:@&quot;获取前置摄像头失败~&quot;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return _frontCameraInput;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureVideoPreviewLayer"><a href="#AVCaptureVideoPreviewLayer" class="headerlink" title="AVCaptureVideoPreviewLayer"></a>AVCaptureVideoPreviewLayer</h2><p>是<code>CoreAnimation</code>里面layer的一个子类，用来做为<code>AVCaptureSession</code>预览视频输出，简单来说就是来做为拍摄的视频呈现的一个layer。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//捕获到的视频呈现的layer</span><br><span class="line">- (AVCaptureVideoPreviewLayer *)previewLayer &#123;</span><br><span class="line">    if (_previewLayer == nil) &#123;</span><br><span class="line">        //通过AVCaptureSession初始化</span><br><span class="line">        AVCaptureVideoPreviewLayer *preview = [[AVCaptureVideoPreviewLayer alloc] initWithSession:self.recordSession];</span><br><span class="line">        //设置比例为铺满全屏</span><br><span class="line">        preview.videoGravity = AVLayerVideoGravityResizeAspectFill;</span><br><span class="line">        _previewLayer = preview;</span><br><span class="line">    &#125;</span><br><span class="line">    return _previewLayer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureMovieFileOutput"><a href="#AVCaptureMovieFileOutput" class="headerlink" title="AVCaptureMovieFileOutput"></a>AVCaptureMovieFileOutput</h2><p><code>AVCaptureMovieFileOutput</code>是<code>AVCaptureFileOutput</code>的子类，用来写入<code>QuickTime</code>视频类型的媒体文件。因为这个类在iphone上并不能实现暂停录制，和不能定义视频文件的类型，所以在这里并不使用，而是用灵活性更强的<code>AVCaptureVideoDataOutput</code>和<code>AVCaptureAudioDataOutput</code>来实现视频的录制。</p>
<h2 id="AVCaptureVideoDataOutput"><a href="#AVCaptureVideoDataOutput" class="headerlink" title="AVCaptureVideoDataOutput"></a>AVCaptureVideoDataOutput</h2><p><code>AVCaptureVideoDataOutput</code>是<code>AVCaptureOutput</code>一个子类，可以用于用来输出未压缩或压缩的视频捕获的帧，<code>AVCaptureVideoDataOutput</code>产生的实例可以使用其他媒体视频帧适合的api处理，应用程序可以用<code>captureOutput:didOutputSampleBuffer:fromConnection:</code>代理方法来获取帧数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//视频输出</span><br><span class="line">- (AVCaptureVideoDataOutput *)videoOutput &#123;</span><br><span class="line">    if (_videoOutput == nil) &#123;</span><br><span class="line">        _videoOutput = [[AVCaptureVideoDataOutput alloc] init];</span><br><span class="line">        [_videoOutput setSampleBufferDelegate:self queue:self.captureQueue];</span><br><span class="line">        NSDictionary* setcapSettings = [NSDictionary dictionaryWithObjectsAndKeys:</span><br><span class="line">                                        [NSNumber numberWithInt:kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange], kCVPixelBufferPixelFormatTypeKey,</span><br><span class="line">                                        nil];</span><br><span class="line">        _videoOutput.videoSettings = setcapSettings;</span><br><span class="line">    &#125;</span><br><span class="line">    return _videoOutput;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureAudioDataOutput"><a href="#AVCaptureAudioDataOutput" class="headerlink" title="AVCaptureAudioDataOutput"></a>AVCaptureAudioDataOutput</h2><p><code>AVCaptureAudioDataOutput</code>是<code>AVCaptureOutput</code>的子类，可用于用来输出捕获来的非压缩或压缩的音频样本，<code>AVCaptureAudioDataOutput</code>产生的实例可以使用其他媒体视频帧适合的api处理，应用程序可以用<code>captureOutput:didOutputSampleBuffer:fromConnection:</code>代理方法来获取音频数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//音频输出</span><br><span class="line">- (AVCaptureAudioDataOutput *)audioOutput &#123;</span><br><span class="line">    if (_audioOutput == nil) &#123;</span><br><span class="line">        _audioOutput = [[AVCaptureAudioDataOutput alloc] init];</span><br><span class="line">        [_audioOutput setSampleBufferDelegate:self queue:self.captureQueue];</span><br><span class="line">    &#125;</span><br><span class="line">    return _audioOutput;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVCaptureConnection"><a href="#AVCaptureConnection" class="headerlink" title="AVCaptureConnection"></a>AVCaptureConnection</h2><p><code>AVCaptureConnection</code>代表<code>AVCaptureInputPort</code>或端口之间的连接，和一个<code>AVCaptureOutput</code>或<code>AVCaptureVideoPreviewLayer</code>在<code>AVCaptureSession</code>中的呈现。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//视频连接</span><br><span class="line">- (AVCaptureConnection *)videoConnection &#123;</span><br><span class="line">    _videoConnection = [self.videoOutput connectionWithMediaType:AVMediaTypeVideo];</span><br><span class="line">    return _videoConnection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//音频连接</span><br><span class="line">- (AVCaptureConnection *)audioConnection &#123;</span><br><span class="line">    if (_audioConnection == nil) &#123;</span><br><span class="line">        _audioConnection = [self.audioOutput connectionWithMediaType:AVMediaTypeAudio];</span><br><span class="line">    &#125;</span><br><span class="line">    return _audioConnection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVAssetWriter"><a href="#AVAssetWriter" class="headerlink" title="AVAssetWriter"></a>AVAssetWriter</h2><p><code>AVAssetWriter</code>为写入媒体数据到一个新的文件提供服务，<code>AVAssetWriter</code>的实例可以规定写入媒体文件的格式，如<code>QuickTime</code>电影文件格式或<code>MPEG-4</code>文件格式等等。<code>AVAssetWriter</code>有多个并行的轨道媒体数据，基本的有视频轨道和音频轨道，将会在下面介绍。<code>AVAssetWriter</code>的单个实例可用于一次写入一个单一的文件。那些希望写入多次文件的客户端必须每一次用一个新的<code>AVAssetWriter</code>实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//初始化方法</span><br><span class="line">- (instancetype)initPath:(NSString*)path Height:(NSInteger)cy width:(NSInteger)cx channels:(int)ch samples:(Float64) rate &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        self.path = path;</span><br><span class="line">        //先把路径下的文件给删除掉，保证录制的文件是最新的</span><br><span class="line">        [[NSFileManager defaultManager] removeItemAtPath:self.path error:nil];</span><br><span class="line">        NSURL* url = [NSURL fileURLWithPath:self.path];</span><br><span class="line">        //初始化写入媒体类型为MP4类型</span><br><span class="line">        _writer = [AVAssetWriter assetWriterWithURL:url fileType:AVFileTypeMPEG4 error:nil];</span><br><span class="line">        //使其更适合在网络上播放</span><br><span class="line">        _writer.shouldOptimizeForNetworkUse = YES;</span><br><span class="line">        //初始化视频输出</span><br><span class="line">        [self initVideoInputHeight:cy width:cx];</span><br><span class="line">        //确保采集到rate和ch</span><br><span class="line">        if (rate != 0 &amp;&amp; ch != 0) &#123;</span><br><span class="line">            //初始化音频输出</span><br><span class="line">            [self initAudioInputChannels:ch samples:rate];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AVAssetWriterInput"><a href="#AVAssetWriterInput" class="headerlink" title="AVAssetWriterInput"></a>AVAssetWriterInput</h2><p>用<code>AVAssetWriterInput</code>去拼接一个多媒体样本类型为<code>CMSampleBuffer</code>的实例到<code>AVAssetWriter</code>对象的输出文件的一个轨道；当有多个输入时， <code>AVAssetWriter</code>试图在用于存储和播放效率的理想模式写媒体数据。它的每一个输入信号，是否能接受媒体的数据根据通过<code>readyForMoreMediaData</code>的值来判断。如果<code>readyForMoreMediaData</code>是<code>YES</code> ，说明输入可以接受媒体数据。并且你只能媒体数据追加到输入端。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//初始化视频输入</span><br><span class="line">- (void)initVideoInputHeight:(NSInteger)cy width:(NSInteger)cx &#123;</span><br><span class="line">    //录制视频的一些配置，分辨率，编码方式等等</span><br><span class="line">    NSDictionary* settings = [NSDictionary dictionaryWithObjectsAndKeys:</span><br><span class="line">                              AVVideoCodecH264, AVVideoCodecKey,</span><br><span class="line">                              [NSNumber numberWithInteger: cx], AVVideoWidthKey,</span><br><span class="line">                              [NSNumber numberWithInteger: cy], AVVideoHeightKey,</span><br><span class="line">                              nil];</span><br><span class="line">    //初始化视频写入类</span><br><span class="line">    _videoInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeVideo outputSettings:settings];</span><br><span class="line">    //表明输入是否应该调整其处理为实时数据源的数据</span><br><span class="line">    _videoInput.expectsMediaDataInRealTime = YES;</span><br><span class="line">    //将视频输入源加入</span><br><span class="line">    [_writer addInput:_videoInput];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//初始化音频输入</span><br><span class="line">- (void)initAudioInputChannels:(int)ch samples:(Float64)rate &#123;</span><br><span class="line">    //音频的一些配置包括音频各种这里为AAC,音频通道、采样率和音频的比特率</span><br><span class="line">    NSDictionary *settings = [NSDictionary dictionaryWithObjectsAndKeys:</span><br><span class="line">                              [ NSNumber numberWithInt: kAudioFormatMPEG4AAC], AVFormatIDKey,</span><br><span class="line">                              [ NSNumber numberWithInt: ch], AVNumberOfChannelsKey,</span><br><span class="line">                              [ NSNumber numberWithFloat: rate], AVSampleRateKey,</span><br><span class="line">                              [ NSNumber numberWithInt: 128000], AVEncoderBitRateKey,</span><br><span class="line">                              nil];</span><br><span class="line">    //初始化音频写入类</span><br><span class="line">    _audioInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeAudio outputSettings:settings];</span><br><span class="line">    //表明输入是否应该调整其处理为实时数据源的数据</span><br><span class="line">    _audioInput.expectsMediaDataInRealTime = YES;</span><br><span class="line">    //将音频输入源加入</span><br><span class="line">    [_writer addInput:_audioInput];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>上面是录制之前的一些需要的类和配置，下面介绍的是如何将获取到的数据呈现出来和怎样进行文件写入</p>
</blockquote>
<h2 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 写入数据</span><br><span class="line">- (void) captureOutput:(AVCaptureOutput *)captureOutput didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer fromConnection:(AVCaptureConnection *)connection &#123;</span><br><span class="line">    BOOL isVideo = YES;</span><br><span class="line">    @synchronized(self) &#123;</span><br><span class="line">        if (!self.isCapturing  || self.isPaused) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (captureOutput != self.videoOutput) &#123;</span><br><span class="line">            isVideo = NO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //初始化编码器，当有音频和视频参数时创建编码器</span><br><span class="line">        if ((self.recordEncoder == nil) &amp;&amp; !isVideo)                     </span><br><span class="line">        &#123;  </span><br><span class="line">            CMFormatDescriptionRef fmt = CMSampleBufferGetFormatDescription(sampleBuffer);</span><br><span class="line">            [self setAudioFormat:fmt];</span><br><span class="line">            NSString *videoName = [NSString getUploadFile_type:@&quot;video&quot; fileType:@&quot;mp4&quot;];</span><br><span class="line">            self.videoPath = [[self getVideoCachePath] stringByAppendingPathComponent:videoName];</span><br><span class="line">            self.recordEncoder = [WCLRecordEncoder encoderForPath:self.videoPath Height:_cy width:_cx channels:_channels samples:_samplerate];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //判断是否中断录制过</span><br><span class="line">        if (self.discont) &#123;</span><br><span class="line">            if (isVideo) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            self.discont = NO;</span><br><span class="line">            // 计算暂停的时间</span><br><span class="line">            CMTime pts = CMSampleBufferGetPresentationTimeStamp(sampleBuffer);</span><br><span class="line">            CMTime last = isVideo ? _lastVideo : _lastAudio;</span><br><span class="line">            if (last.flags &amp; kCMTimeFlags_Valid) &#123;</span><br><span class="line">                if (_timeOffset.flags &amp; kCMTimeFlags_Valid) &#123;</span><br><span class="line">                    pts = CMTimeSubtract(pts, _timeOffset);</span><br><span class="line">                &#125;</span><br><span class="line">                CMTime offset = CMTimeSubtract(pts, last);</span><br><span class="line">                if (_timeOffset.value == 0) &#123;</span><br><span class="line">                    _timeOffset = offset;</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    _timeOffset = CMTimeAdd(_timeOffset, offset);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            _lastVideo.flags = 0;</span><br><span class="line">            _lastAudio.flags = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        // 增加sampleBuffer的引用计时,这样我们可以释放这个或修改这个数据，防止在修改时被释放</span><br><span class="line">        CFRetain(sampleBuffer);</span><br><span class="line">        if (_timeOffset.value &gt; 0) &#123;</span><br><span class="line">            CFRelease(sampleBuffer);</span><br><span class="line">            //根据得到的timeOffset调整</span><br><span class="line">            sampleBuffer = [self adjustTime:sampleBuffer by:_timeOffset];</span><br><span class="line">        &#125;</span><br><span class="line">        // 记录暂停上一次录制的时间</span><br><span class="line">        CMTime pts = CMSampleBufferGetPresentationTimeStamp(sampleBuffer);</span><br><span class="line">        CMTime dur = CMSampleBufferGetDuration(sampleBuffer);</span><br><span class="line">        if (dur.value &gt; 0) &#123;</span><br><span class="line">            pts = CMTimeAdd(pts, dur);</span><br><span class="line">        &#125;</span><br><span class="line">        if (isVideo) &#123;</span><br><span class="line">            _lastVideo = pts;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            _lastAudio = pts;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CMTime dur = CMSampleBufferGetPresentationTimeStamp(sampleBuffer);</span><br><span class="line">    if (self.startTime.value == 0) &#123;</span><br><span class="line">        self.startTime = dur;</span><br><span class="line">    &#125;</span><br><span class="line">    CMTime sub = CMTimeSubtract(dur, self.startTime);</span><br><span class="line">    self.currentRecordTime = CMTimeGetSeconds(sub);</span><br><span class="line">    if (self.currentRecordTime &gt; self.maxRecordTime) &#123;</span><br><span class="line">        if (self.currentRecordTime - self.maxRecordTime &lt; 0.1) &#123;</span><br><span class="line">            if ([self.delegate respondsToSelector:@selector(recordProgress:)]) &#123;</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    [self.delegate recordProgress:self.currentRecordTime/self.maxRecordTime];</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if ([self.delegate respondsToSelector:@selector(recordProgress:)]) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            [self.delegate recordProgress:self.currentRecordTime/self.maxRecordTime];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 进行数据编码</span><br><span class="line">    [self.recordEncoder encodeFrame:sampleBuffer isVideo:isVideo];</span><br><span class="line">    CFRelease(sampleBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置音频格式</span><br><span class="line">- (void)setAudioFormat:(CMFormatDescriptionRef)fmt &#123;</span><br><span class="line">    const AudioStreamBasicDescription *asbd = CMAudioFormatDescriptionGetStreamBasicDescription(fmt);</span><br><span class="line">    _samplerate = asbd-&gt;mSampleRate;</span><br><span class="line">    _channels = asbd-&gt;mChannelsPerFrame;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调整媒体数据的时间</span><br><span class="line">- (CMSampleBufferRef)adjustTime:(CMSampleBufferRef)sample by:(CMTime)offset &#123;</span><br><span class="line">    CMItemCount count;</span><br><span class="line">    CMSampleBufferGetSampleTimingInfoArray(sample, 0, nil, &amp;count);</span><br><span class="line">    CMSampleTimingInfo* pInfo = malloc(sizeof(CMSampleTimingInfo) * count);</span><br><span class="line">    CMSampleBufferGetSampleTimingInfoArray(sample, count, pInfo, &amp;count);</span><br><span class="line">    for (CMItemCount i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        pInfo[i].decodeTimeStamp = CMTimeSubtract(pInfo[i].decodeTimeStamp, offset);</span><br><span class="line">        pInfo[i].presentationTimeStamp = CMTimeSubtract(pInfo[i].presentationTimeStamp, offset);</span><br><span class="line">    &#125;</span><br><span class="line">    CMSampleBufferRef sout;</span><br><span class="line">    CMSampleBufferCreateCopyWithNewTiming(nil, sample, count, pInfo, &amp;sout);</span><br><span class="line">    free(pInfo);</span><br><span class="line">    return sout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过这个方法写入数据</span><br><span class="line">- (BOOL)encodeFrame:(CMSampleBufferRef) sampleBuffer isVideo:(BOOL)isVideo &#123;</span><br><span class="line">    //数据是否准备写入</span><br><span class="line">    if (CMSampleBufferDataIsReady(sampleBuffer)) &#123;</span><br><span class="line">        //写入状态为未知,保证视频先写入</span><br><span class="line">        if (_writer.status == AVAssetWriterStatusUnknown &amp;&amp; isVideo) &#123;</span><br><span class="line">            //获取开始写入的CMTime</span><br><span class="line">            CMTime startTime = CMSampleBufferGetPresentationTimeStamp(sampleBuffer);</span><br><span class="line">            //开始写入</span><br><span class="line">            [_writer startWriting];</span><br><span class="line">            [_writer startSessionAtSourceTime:startTime];</span><br><span class="line">        &#125;</span><br><span class="line">        //写入失败</span><br><span class="line">        if (_writer.status == AVAssetWriterStatusFailed) &#123;</span><br><span class="line">            NSLog(@&quot;writer error %@&quot;, _writer.error.localizedDescription);</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">        //判断是否是视频</span><br><span class="line">        if (isVideo) &#123;</span><br><span class="line">            //视频输入是否准备接受更多的媒体数据</span><br><span class="line">            if (_videoInput.readyForMoreMediaData == YES) &#123;</span><br><span class="line">                //拼接数据</span><br><span class="line">                [_videoInput appendSampleBuffer:sampleBuffer];</span><br><span class="line">                return YES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            //音频输入是否准备接受更多的媒体数据</span><br><span class="line">            if (_audioInput.readyForMoreMediaData) &#123;</span><br><span class="line">                //拼接数据</span><br><span class="line">                [_audioInput appendSampleBuffer:sampleBuffer];</span><br><span class="line">                return YES;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完成录制并写入相册"><a href="#完成录制并写入相册" class="headerlink" title="完成录制并写入相册"></a>完成录制并写入相册</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//停止录制</span><br><span class="line">- (void) stopCaptureHandler:(void (^)(UIImage *movieImage))handler &#123;</span><br><span class="line">    @synchronized(self) &#123;</span><br><span class="line">        if (self.isCapturing) &#123;</span><br><span class="line">            NSString* path = self.recordEncoder.path;</span><br><span class="line">            NSURL* url = [NSURL fileURLWithPath:path];</span><br><span class="line">            self.isCapturing = NO;</span><br><span class="line">            dispatch_async(_captureQueue, ^&#123;</span><br><span class="line">                [self.recordEncoder finishWithCompletionHandler:^&#123;</span><br><span class="line">                    self.isCapturing = NO;</span><br><span class="line">                    self.recordEncoder = nil;</span><br><span class="line">                    [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^&#123;</span><br><span class="line">                        [PHAssetChangeRequest creationRequestForAssetFromVideoAtFileURL:url];</span><br><span class="line">                    &#125; completionHandler:^(BOOL success, NSError * _Nullable error) &#123;</span><br><span class="line">                        NSLog(@&quot;保存成功&quot;);</span><br><span class="line">                    &#125;];</span><br><span class="line">                    [self movieToImageHandler:handler];</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//获取视频第一帧的图片</span><br><span class="line">- (void)movieToImageHandler:(void (^)(UIImage *movieImage))handler &#123;</span><br><span class="line">    NSURL *url = [NSURL fileURLWithPath:self.videoPath];</span><br><span class="line">    AVURLAsset *asset = [[AVURLAsset alloc] initWithURL:url options:nil];</span><br><span class="line">    AVAssetImageGenerator *generator = [[AVAssetImageGenerator alloc] initWithAsset:asset];</span><br><span class="line">    generator.appliesPreferredTrackTransform = TRUE;</span><br><span class="line">    CMTime thumbTime = CMTimeMakeWithSeconds(0, 60);</span><br><span class="line">    generator.apertureMode = AVAssetImageGeneratorApertureModeEncodedPixels;</span><br><span class="line">    AVAssetImageGeneratorCompletionHandler generatorHandler =</span><br><span class="line">    ^(CMTime requestedTime, CGImageRef im, CMTime actualTime, AVAssetImageGeneratorResult result, NSError *error)&#123;</span><br><span class="line">        if (result == AVAssetImageGeneratorSucceeded) &#123;</span><br><span class="line">            UIImage *thumbImg = [UIImage imageWithCGImage:im];</span><br><span class="line">            if (handler) &#123;</span><br><span class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">                    handler(thumbImg);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    [generator generateCGImagesAsynchronouslyForTimes:</span><br><span class="line">     [NSArray arrayWithObject:[NSValue valueWithCMTime:thumbTime]] completionHandler:generatorHandler];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//完成视频录制时调用</span><br><span class="line">- (void)finishWithCompletionHandler:(void (^)(void))handler &#123;</span><br><span class="line">    [_writer finishWritingWithCompletionHandler: handler];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>以上就是本博客内容的全部内容，大家如果有什么疑问可以问我，本文附带有<a href="https://github.com/631106979/WCLRecordVideo" target="_blank" rel="external">demo</a>，大家可以去看看具体怎么使用，有用的话可以点一下star，谢谢大家的阅读~~</p>
<h2 id="我的demo地址"><a href="#我的demo地址" class="headerlink" title="我的demo地址"></a><a href="https://github.com/631106979/WCLRecordVideo" target="_blank" rel="external">我的demo地址</a></h2><hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 05月 25日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发小结 - 通过PUT请求上传数据]]></title>
      <url>http://imwcl.com/2016/05/17/iOS%E5%BC%80%E5%8F%91-%E9%80%9A%E8%BF%87PUT%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%BC%A0%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一般服务器上传数据一般都是用POST请求，这样通过AFNetworking的POST请求稳稳的，但是有一天遇到一个问题，服务器上传数据用的是PUT请求，发现用AFNetworking并不是那么好用，今天就来讲一下如何通过PUT请求上传数据。</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是PUT请求"><a href="#什么是PUT请求" class="headerlink" title="什么是PUT请求"></a>什么是PUT请求</h2><p>PUT请求是请求服务器存储一个资源，并用Request-URI作为其标识，跟POST类似，但不常用，PUT请求比较少见。HTML表单也不支持这个。本质上来讲， PUT和POST极为相似，都是向服务器发送数据，但它们之间有一个重要区别，PUT通常指定了资源的存放位置，而POST则没有，POST的数据存放位置由服务器自己决定。举个例子：如一个用于提交博文的URL，/addBlog。如果用PUT，则提交的URL会是像这样的”/addBlog/abc123”，其中abc123就是这个博文的地址。而如果用POST，则这个地址会在提交后由服务器告知客户端。目前大部分博客都是这样的。显然，PUT和POST用途是不一样的。具体用哪个还取决于当前的业务场景。</p>
<h2 id="POST和PUT的请求根本区别"><a href="#POST和PUT的请求根本区别" class="headerlink" title="POST和PUT的请求根本区别"></a>POST和PUT的请求根本区别</h2><p>有的观点认为，应该用POST来创建一个资源，用PUT来更新一个资源；有的观点认为，应该用PUT来创建一个资源，用POST来更新一个资源；还有的观点认为可以用PUT和POST中任何一个来做创建或者更新一个资源。这些观点都只看到了风格，争论起来也只是争论哪种风格更好，其实，用PUT还是POST，不是看这是创建还是更新资源的动作，这不是风格的问题，而是语义的问题。在HTTP中，PUT被定义为idempotent的方法，POST则不是，这是一个很重要的区别。</p>
<h2 id="在代码中如何应用"><a href="#在代码中如何应用" class="headerlink" title="在代码中如何应用"></a>在代码中如何应用</h2><p>我们先来看看AFNetworking中PUT和POST方法怎么用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//POST方法</span><br><span class="line">- (nullable NSURLSessionDataTask *)POST:(NSString *)URLString</span><br><span class="line">                             parameters:(nullable id)parameters</span><br><span class="line">              constructingBodyWithBlock:(nullable void (^)(id &lt;AFMultipartFormData&gt; formData))block</span><br><span class="line">                               progress:(nullable void (^)(NSProgress *uploadProgress)) uploadProgress</span><br><span class="line">                                success:(nullable void (^)(NSURLSessionDataTask *task, id _Nullable responseObject))success</span><br><span class="line">                                failure:(nullable void (^)(NSURLSessionDataTask * _Nullable task, NSError *error))failure;</span><br><span class="line"></span><br><span class="line">//PUT方法</span><br><span class="line">- (nullable NSURLSessionDataTask *)PUT:(NSString *)URLString</span><br><span class="line">                   parameters:(nullable id)parameters</span><br><span class="line">                      success:(nullable void (^)(NSURLSessionDataTask *task, id _Nullable responseObject))success</span><br><span class="line">                      failure:(nullable void (^)(NSURLSessionDataTask * _Nullable task, NSError *error))failure;</span><br></pre></td></tr></table></figure>
<p>发现参数中只有<code>URLString</code>和<code>parameters</code>，相对于POST请求来说少了一个formData的参数，没有地方把数据拼接上去，我曾经尝试把Data放到parameters中并不好用，在网上搜索了很多也没找到合适的解决办法，只能换一种方式了。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在用AFNetworking进行PUT请求不好用之后，我想过是否用通过系统NSURLSessionTask来实现PUT请求，但是想想自己写太麻烦了，就尝试着用ASIHTTPRequest来尝试一下，发现ASIHTTPRequest还是很好用的，下面贴出代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (void)uploadData:(NSData *)data uploadUrl:(NSString *)uploadUrl &#123;    </span><br><span class="line">    ASIHTTPRequest * fileUpRequest = [ASIHTTPRequest requestWithURL:[NSURL URLWithString:uploadUrl]];</span><br><span class="line">    fileUpRequest.delegate = self;</span><br><span class="line">    //设置请求超时时间为60秒</span><br><span class="line">    [fileUpRequest setTimeOutSeconds:60.f];</span><br><span class="line">    //设置请求超时时间后再次尝试请求的次数</span><br><span class="line">    [fileUpRequest setNumberOfTimesToRetryOnTimeout:2];</span><br><span class="line">    //将data拼接进去</span><br><span class="line">    [fileUpRequest appendPostData:data];</span><br><span class="line">    //设置请求方式为PUT</span><br><span class="line">    [fileUpRequest setRequestMethod:@&quot;PUT&quot;];</span><br><span class="line">    //设置上传失败的回调方法</span><br><span class="line">    [fileUpRequest setDidFailSelector:@selector(uploadFailed:)];</span><br><span class="line">    //设置上传成功的回调方法</span><br><span class="line">    [fileUpRequest setDidFinishSelector:@selector(uploadFinished:)];</span><br><span class="line">    //显示精确的上传进度</span><br><span class="line">    fileUpRequest.showAccurateProgress = YES;</span><br><span class="line">    //开始异步请求</span><br><span class="line">    [fileUpRequest startAsynchronous];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 到这里我的问题已经解决，如果大家还有问题可以给我留言解决，谢谢大家的支持。</p>
</blockquote>
<p><a href="http://blog.csdn.net/wang631106979/article/details/51440457" target="_blank" rel="external">我的CSDN博客地址</a><br><a href="https://github.com/631106979" target="_blank" rel="external">我的GitHub地址</a></p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 05月 17日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发小结 - 使用自定义字体]]></title>
      <url>http://imwcl.com/2016/05/16/iOS%E5%BC%80%E5%8F%91-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<p>APP开发过程中，根据美工的需求可能会用到一些特殊的字体，然而在苹果自带字体中并没有，那就必须我们开发来来实现这些功能呢，下面以<strong>冬青黑体简体中文(Hiragino Sans GB)</strong>为例子给大家演示一下自定义字体的步骤：<br><a id="more"></a></p>
<ul>
<li>首先将下好的字体放到工程里面</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160516115837202" alt="这里写图片描述"></p>
<ul>
<li>然后在info.pilist里面加以下字段</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160516115901908" alt="这里写图片描述"></p>
<ul>
<li>然后就可以使用了，在xib中使用：</li>
</ul>
<p><img src="http://img.blog.csdn.net/20160516115926439" alt="这里写图片描述"></p>
<ul>
<li>用代码使用：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//大家注意，要把中间的空格都去掉</span><br><span class="line">[UIFont fontWithName:@&quot;HiraginoSansGB-W3&quot; size:12]</span><br></pre></td></tr></table></figure>
<hr>
<p>这样就可以使用自定义字体，不过不建议大家使用，因为汉字字体的包大小很大，会增加应用包的大小，像一套<strong>冬青黑体简体中文(Hiragino Sans GB)</strong>大小总共有26MB左右，这样增加应用包大小就得不偿失了。</p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 05月 16日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发小结 - github SSH秘钥配置]]></title>
      <url>http://imwcl.com/2016/04/22/github-SSH-Configure/</url>
      <content type="html"><![CDATA[<h2 id="github-SSH秘钥配置"><a href="#github-SSH秘钥配置" class="headerlink" title="github SSH秘钥配置"></a>github SSH秘钥配置</h2><p>从github上clone代码下来，或者关联你的远程仓库有两种链接，一种是Https的链接，一种是ssh的链接，今天要讲的是用ssh链时出现的一些问题和解决办法。<br><a id="more"></a></p>
<h2 id="如何创建SSH"><a href="#如何创建SSH" class="headerlink" title="如何创建SSH"></a>如何创建SSH</h2><p>打开你的终端，输入<strong>ssh-keygen -t rsa -C “xxxxx@xxxxx.com”</strong>，里面的邮箱是你的github账号，然后会弹出<strong>Enter file in which to save the key (/Users/wangchonglei/.ssh/id_rsa):</strong>这里是系统默认的保存地址和文件名，你可以更改，例如：<strong>/Users/wangchonglei/.ssh/girhub_rsa</strong>（记住：不同的账号需要起不一样的名字），然后一直回车会出现类似下面这样的文字，就说明创建成功了；</p>
<p>The key’s randomart image is:<br>+—[RSA 2048]—-+<br>| o|<br>| . ..|<br>| o o o .|<br>| o + = = |<br>| . . S = o +oo|<br>| E o = + .. =|<br>| + + .+ =.|<br>| .<em> .o BB=|<br>| o=.o. o*</em>O|<br>+—-[SHA256]—–+</p>
<h2 id="如何查看你的rsa"><a href="#如何查看你的rsa" class="headerlink" title="如何查看你的rsa"></a>如何查看你的rsa</h2><p>有两种方式可以查看，第一种比较简单，直接<strong>cat ~/.ssh/#####.pub</strong>，这里是你刚刚自己输入的文件名，系统默认的是<strong>id_rsa.pub</strong>； 第二种使用vim编辑器查看，首先<strong>cd ~/.ssh</strong>，到文件目录下，然后vim 你的文件名，比如<strong>vim ####.pub</strong>就可以查看了。</p>
<p>把你的SSH填写到github上</p>
<p>这个比较简单，在github上点击你的头像，选择setting，进入后点击SSHKEYS后Add SSH key就行了</p>
<h2 id="测试是否设置成功"><a href="#测试是否设置成功" class="headerlink" title="测试是否设置成功"></a>测试是否设置成功</h2><p>在终端中输入<strong>ssh -T git@git.oschina.net</strong>，系统返回Welcome to Git@OSC，###是就表示添加成功了，就你可以用git remote add origin git@#####来关联你的远程库了。</p>
<hr>
<p>作者 <a href="http://imwcl.com/">@W_C__L</a><br>2016 年 04月 22日</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发进阶 - 常用的Xcode插件]]></title>
      <url>http://imwcl.com/2016/04/22/Xcode-Plug-In/</url>
      <content type="html"><![CDATA[<h2 id="Alcatraz-插件管理工具"><a href="#Alcatraz-插件管理工具" class="headerlink" title="Alcatraz - 插件管理工具"></a><a href="https://github.com/mneorr/Alcatraz" target="_blank" rel="external">Alcatraz</a> - 插件管理工具</h2><p>Alcatraz是一个开源的Xcode插件管理器，可以让你更便捷地发现、安装以及管理插件、模板和配色方案。只需要简单地点击或者勾选，就能下载安装和删除插件，建议选择的第一个Xcode插件。<br>下载完成后通过Window—&gt;Package Manager来打开。<br><a id="more"></a><br><img src="http://img.blog.csdn.net/20160325225549776" alt="这里写图片描述"></p>
<hr>
<h2 id="VVDocumenter-规范注释生成器"><a href="#VVDocumenter-规范注释生成器" class="headerlink" title="VVDocumenter  - 规范注释生成器"></a><a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">VVDocumenter</a>  - 规范注释生成器</h2><p> VVDocumenter是一个规范化的代码注释插件，在协同开发的时候，每个人的代码风格不一样，那么必要的代码注释就显得很关键，那么VVDocumenter一定是最好的选择，在需要填写注释的属性和方法上下只需要输入三个斜线”///“，就能生成相应的代码注释了，支持Xcode和swift。<br><img src="http://img.blog.csdn.net/20160325234457278" alt="这里写图片描述"></p>
<hr>
<h2 id="FuzzyAutocomplete-代码自动补全插件"><a href="#FuzzyAutocomplete-代码自动补全插件" class="headerlink" title="FuzzyAutocomplete  - 代码自动补全插件"></a><a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin" target="_blank" rel="external">FuzzyAutocomplete</a>  - 代码自动补全插件</h2><p>FuzzyAutocompletePlugin是一个Xcode代码补全插件的插件，通过添加模糊匹配来提高Xcode代码自动补全功能，开发者无需遵循从头匹配的原则，只要记得方法里某个关键字即可进行匹配，很好地提高了工作效率。比系统自带的更高效，无需输入顺序即可匹配到相应代码。<br><img src="http://img.blog.csdn.net/20160325234213322" alt="这里写图片描述"></p>
<hr>
<h2 id="ESJsonFormat-JSON格式化输出为模型的属性的插件"><a href="#ESJsonFormat-JSON格式化输出为模型的属性的插件" class="headerlink" title="ESJsonFormat -  JSON格式化输出为模型的属性的插件"></a><a href="https://github.com/EnjoySR/ESJsonFormat-Xcode" target="_blank" rel="external">ESJsonFormat</a> -  JSON格式化输出为模型的属性的插件</h2><p>可以通过json字符串自动生成属性，同时支持<a href="https://github.com/CoderMJLee/MJExtension" target="_blank" rel="external">MJExtension</a>，具体效果见下图：<br><img src="http://img.blog.csdn.net/20160325231545006" alt="这里写图片描述"></p>
<hr>
<h2 id="IconMaker-AppIcon一键生成神器"><a href="#IconMaker-AppIcon一键生成神器" class="headerlink" title="IconMaker  - AppIcon一键生成神器"></a><a href="https://github.com/kaphacius/IconMaker" target="_blank" rel="external">IconMaker</a>  - AppIcon一键生成神器</h2><p>只需简单几部操作就能生成一套icon，再也不需要一个个手动替换了，再也不需要应为icon大小不对审核被拒绝了，只需要一步一键生成，要多方便有多方便。<br><img src="http://img.blog.csdn.net/20160325232225891" alt="这里写图片描述"></p>
<hr>
<h2 id="XAlign-一个用来对齐常规代码的Xcode插件"><a href="#XAlign-一个用来对齐常规代码的Xcode插件" class="headerlink" title="XAlign  - 一个用来对齐常规代码的Xcode插件"></a><a href="https://github.com/qfish/XAlign" target="_blank" rel="external">XAlign</a>  - 一个用来对齐常规代码的Xcode插件</h2><p>一个用来对齐常规代码的Xcode插件，十分强大的自定义对齐模式。只需键入command+shift+x就能自动帮你对齐你杂乱的代码了，强迫症专用。<br><img src="http://img.blog.csdn.net/20160325232753314" alt="这里写图片描述"></p>
<hr>
<h2 id="KSImageNamed-图片名自动补全插件"><a href="#KSImageNamed-图片名自动补全插件" class="headerlink" title="KSImageNamed - 图片名自动补全插件"></a><a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="external">KSImageNamed</a> - 图片名自动补全插件</h2><p>为项目中使用的UIImage的imageNamed提供文件名自动补全功能。使用[UIImage imageNamed:@”xxx”]时，该插件会扫描整个workspace中的图片文件。<br><img src="http://img.blog.csdn.net/20160325233049119" alt="这里写图片描述"></p>
<hr>
<h2 id="Backlight-帮你找到当前正在输入位置的黑科技"><a href="#Backlight-帮你找到当前正在输入位置的黑科技" class="headerlink" title="Backlight - 帮你找到当前正在输入位置的黑科技"></a><a href="https://github.com/limejelly/Backlight-for-XCode" target="_blank" rel="external">Backlight</a> - 帮你找到当前正在输入位置的黑科技</h2><p>大家肯定遇到过，当你在输入时突然找不到输入光标在哪里了，这时候你能慢慢找，<a href="https://github.com/limejelly/Backlight-for-XCode" target="_blank" rel="external">Backlight</a> 帮你解决了这个问题，你不用再为找不到光标而烦恼了，绝对黑科技。<br><img src="http://img.blog.csdn.net/20160325233630208" alt="这里写图片描述"></p>
<hr>
<p>PS:今天就给大家分享到这里，这都是我用起来非常舒服的插件，以后有更好的我会在这里更新</p>
]]></content>
    </entry>
    
  
  
</search>
